/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "shared_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace ghidra { namespace shared {


STypeUnit::~STypeUnit() throw() {
}


void STypeUnit::__set_typeId(const Id val) {
  this->typeId = val;
}

void STypeUnit::__set_pointerLvl(const int32_t val) {
  this->pointerLvl = val;
}

void STypeUnit::__set_arraySize(const int32_t val) {
  this->arraySize = val;
}
std::ostream& operator<<(std::ostream& out, const STypeUnit& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t STypeUnit::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->typeId);
          this->__isset.typeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pointerLvl);
          this->__isset.pointerLvl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->arraySize);
          this->__isset.arraySize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t STypeUnit::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("STypeUnit");

  xfer += oprot->writeFieldBegin("typeId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->typeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pointerLvl", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->pointerLvl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("arraySize", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->arraySize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(STypeUnit &a, STypeUnit &b) {
  using ::std::swap;
  swap(a.typeId, b.typeId);
  swap(a.pointerLvl, b.pointerLvl);
  swap(a.arraySize, b.arraySize);
  swap(a.__isset, b.__isset);
}

STypeUnit::STypeUnit(const STypeUnit& other0) {
  typeId = other0.typeId;
  pointerLvl = other0.pointerLvl;
  arraySize = other0.arraySize;
  __isset = other0.__isset;
}
STypeUnit& STypeUnit::operator=(const STypeUnit& other1) {
  typeId = other1.typeId;
  pointerLvl = other1.pointerLvl;
  arraySize = other1.arraySize;
  __isset = other1.__isset;
  return *this;
}
void STypeUnit::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "STypeUnit(";
  out << "typeId=" << to_string(typeId);
  out << ", " << "pointerLvl=" << to_string(pointerLvl);
  out << ", " << "arraySize=" << to_string(arraySize);
  out << ")";
}

}} // namespace
