/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "shared_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace ghidra { namespace shared {


STypeUnit::~STypeUnit() throw() {
}


void STypeUnit::__set_typeId(const Id val) {
  this->typeId = val;
}

void STypeUnit::__set_pointerLvls(const std::vector<int16_t> & val) {
  this->pointerLvls = val;
}
std::ostream& operator<<(std::ostream& out, const STypeUnit& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t STypeUnit::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->typeId);
          this->__isset.typeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pointerLvls.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->pointerLvls.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI16(this->pointerLvls[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.pointerLvls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t STypeUnit::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("STypeUnit");

  xfer += oprot->writeFieldBegin("typeId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->typeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pointerLvls", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->pointerLvls.size()));
    std::vector<int16_t> ::const_iterator _iter5;
    for (_iter5 = this->pointerLvls.begin(); _iter5 != this->pointerLvls.end(); ++_iter5)
    {
      xfer += oprot->writeI16((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(STypeUnit &a, STypeUnit &b) {
  using ::std::swap;
  swap(a.typeId, b.typeId);
  swap(a.pointerLvls, b.pointerLvls);
  swap(a.__isset, b.__isset);
}

STypeUnit::STypeUnit(const STypeUnit& other6) {
  typeId = other6.typeId;
  pointerLvls = other6.pointerLvls;
  __isset = other6.__isset;
}
STypeUnit& STypeUnit::operator=(const STypeUnit& other7) {
  typeId = other7.typeId;
  pointerLvls = other7.pointerLvls;
  __isset = other7.__isset;
  return *this;
}
void STypeUnit::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "STypeUnit(";
  out << "typeId=" << to_string(typeId);
  out << ", " << "pointerLvls=" << to_string(pointerLvls);
  out << ")";
}

}} // namespace
