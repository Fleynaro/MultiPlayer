/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef datatype_TYPES_H
#define datatype_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "shared_types.h"


namespace ghidra { namespace datatype {

struct DataTypeGroup {
  enum type {
    Simple = 0,
    Enum = 1,
    Structure = 2,
    Typedef = 3,
    Signature = 4
  };
};

extern const std::map<int, const char*> _DataTypeGroup_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const DataTypeGroup::type& val);

typedef int64_t Id;

typedef int64_t Hash;

typedef std::map<Id, Hash>  HashMap;

class SDataTypeBase;

class SDataType;

class SDataTypeStructureField;

class SDataTypeStructure;

class SDataTypeEnumField;

class SDataTypeEnum;

class SDataTypeTypedef;

typedef struct _SDataTypeBase__isset {
  _SDataTypeBase__isset() : id(false), name(false), group(false) {}
  bool id :1;
  bool name :1;
  bool group :1;
} _SDataTypeBase__isset;

class SDataTypeBase : public virtual ::apache::thrift::TBase {
 public:

  SDataTypeBase(const SDataTypeBase&);
  SDataTypeBase& operator=(const SDataTypeBase&);
  SDataTypeBase() : id(0), name(), group((DataTypeGroup::type)0) {
  }

  virtual ~SDataTypeBase() throw();
  Id id;
  std::string name;
  DataTypeGroup::type group;

  _SDataTypeBase__isset __isset;

  void __set_id(const Id val);

  void __set_name(const std::string& val);

  void __set_group(const DataTypeGroup::type val);

  bool operator == (const SDataTypeBase & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(group == rhs.group))
      return false;
    return true;
  }
  bool operator != (const SDataTypeBase &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SDataTypeBase & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SDataTypeBase &a, SDataTypeBase &b);

std::ostream& operator<<(std::ostream& out, const SDataTypeBase& obj);

typedef struct _SDataType__isset {
  _SDataType__isset() : id(false), name(false), desc(false), group(false), size(false) {}
  bool id :1;
  bool name :1;
  bool desc :1;
  bool group :1;
  bool size :1;
} _SDataType__isset;

class SDataType : public virtual ::apache::thrift::TBase {
 public:

  SDataType(const SDataType&);
  SDataType& operator=(const SDataType&);
  SDataType() : id(0), name(), desc(), group((DataTypeGroup::type)0), size(0) {
  }

  virtual ~SDataType() throw();
  Id id;
  std::string name;
  std::string desc;
  DataTypeGroup::type group;
  int32_t size;

  _SDataType__isset __isset;

  void __set_id(const Id val);

  void __set_name(const std::string& val);

  void __set_desc(const std::string& val);

  void __set_group(const DataTypeGroup::type val);

  void __set_size(const int32_t val);

  bool operator == (const SDataType & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(desc == rhs.desc))
      return false;
    if (!(group == rhs.group))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const SDataType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SDataType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SDataType &a, SDataType &b);

std::ostream& operator<<(std::ostream& out, const SDataType& obj);

typedef struct _SDataTypeStructureField__isset {
  _SDataTypeStructureField__isset() : offset(false), name(false), comment(false), type(false) {}
  bool offset :1;
  bool name :1;
  bool comment :1;
  bool type :1;
} _SDataTypeStructureField__isset;

class SDataTypeStructureField : public virtual ::apache::thrift::TBase {
 public:

  SDataTypeStructureField(const SDataTypeStructureField&);
  SDataTypeStructureField& operator=(const SDataTypeStructureField&);
  SDataTypeStructureField() : offset(0), name(), comment() {
  }

  virtual ~SDataTypeStructureField() throw();
  int32_t offset;
  std::string name;
  std::string comment;
   ::ghidra::shared::STypeUnit type;

  _SDataTypeStructureField__isset __isset;

  void __set_offset(const int32_t val);

  void __set_name(const std::string& val);

  void __set_comment(const std::string& val);

  void __set_type(const  ::ghidra::shared::STypeUnit& val);

  bool operator == (const SDataTypeStructureField & rhs) const
  {
    if (!(offset == rhs.offset))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const SDataTypeStructureField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SDataTypeStructureField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SDataTypeStructureField &a, SDataTypeStructureField &b);

std::ostream& operator<<(std::ostream& out, const SDataTypeStructureField& obj);

typedef struct _SDataTypeStructure__isset {
  _SDataTypeStructure__isset() : type(false), fields(false) {}
  bool type :1;
  bool fields :1;
} _SDataTypeStructure__isset;

class SDataTypeStructure : public virtual ::apache::thrift::TBase {
 public:

  SDataTypeStructure(const SDataTypeStructure&);
  SDataTypeStructure& operator=(const SDataTypeStructure&);
  SDataTypeStructure() {
  }

  virtual ~SDataTypeStructure() throw();
  SDataType type;
  std::vector<SDataTypeStructureField>  fields;

  _SDataTypeStructure__isset __isset;

  void __set_type(const SDataType& val);

  void __set_fields(const std::vector<SDataTypeStructureField> & val);

  bool operator == (const SDataTypeStructure & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const SDataTypeStructure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SDataTypeStructure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SDataTypeStructure &a, SDataTypeStructure &b);

std::ostream& operator<<(std::ostream& out, const SDataTypeStructure& obj);

typedef struct _SDataTypeEnumField__isset {
  _SDataTypeEnumField__isset() : name(false), value(false) {}
  bool name :1;
  bool value :1;
} _SDataTypeEnumField__isset;

class SDataTypeEnumField : public virtual ::apache::thrift::TBase {
 public:

  SDataTypeEnumField(const SDataTypeEnumField&);
  SDataTypeEnumField& operator=(const SDataTypeEnumField&);
  SDataTypeEnumField() : name(), value(0) {
  }

  virtual ~SDataTypeEnumField() throw();
  std::string name;
  int32_t value;

  _SDataTypeEnumField__isset __isset;

  void __set_name(const std::string& val);

  void __set_value(const int32_t val);

  bool operator == (const SDataTypeEnumField & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const SDataTypeEnumField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SDataTypeEnumField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SDataTypeEnumField &a, SDataTypeEnumField &b);

std::ostream& operator<<(std::ostream& out, const SDataTypeEnumField& obj);

typedef struct _SDataTypeEnum__isset {
  _SDataTypeEnum__isset() : type(false), fields(false) {}
  bool type :1;
  bool fields :1;
} _SDataTypeEnum__isset;

class SDataTypeEnum : public virtual ::apache::thrift::TBase {
 public:

  SDataTypeEnum(const SDataTypeEnum&);
  SDataTypeEnum& operator=(const SDataTypeEnum&);
  SDataTypeEnum() {
  }

  virtual ~SDataTypeEnum() throw();
  SDataType type;
  std::vector<SDataTypeEnumField>  fields;

  _SDataTypeEnum__isset __isset;

  void __set_type(const SDataType& val);

  void __set_fields(const std::vector<SDataTypeEnumField> & val);

  bool operator == (const SDataTypeEnum & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const SDataTypeEnum &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SDataTypeEnum & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SDataTypeEnum &a, SDataTypeEnum &b);

std::ostream& operator<<(std::ostream& out, const SDataTypeEnum& obj);

typedef struct _SDataTypeTypedef__isset {
  _SDataTypeTypedef__isset() : type(false), refType(false) {}
  bool type :1;
  bool refType :1;
} _SDataTypeTypedef__isset;

class SDataTypeTypedef : public virtual ::apache::thrift::TBase {
 public:

  SDataTypeTypedef(const SDataTypeTypedef&);
  SDataTypeTypedef& operator=(const SDataTypeTypedef&);
  SDataTypeTypedef() {
  }

  virtual ~SDataTypeTypedef() throw();
  SDataType type;
   ::ghidra::shared::STypeUnit refType;

  _SDataTypeTypedef__isset __isset;

  void __set_type(const SDataType& val);

  void __set_refType(const  ::ghidra::shared::STypeUnit& val);

  bool operator == (const SDataTypeTypedef & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(refType == rhs.refType))
      return false;
    return true;
  }
  bool operator != (const SDataTypeTypedef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SDataTypeTypedef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SDataTypeTypedef &a, SDataTypeTypedef &b);

std::ostream& operator<<(std::ostream& out, const SDataTypeTypedef& obj);

}} // namespace

#endif
