/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "datatype_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace ghidra { namespace datatype {

int _kDataTypeGroupValues[] = {
  DataTypeGroup::Simple,
  DataTypeGroup::Enum,
  DataTypeGroup::Structure,
  DataTypeGroup::Class,
  DataTypeGroup::Typedef,
  DataTypeGroup::Signature
};
const char* _kDataTypeGroupNames[] = {
  "Simple",
  "Enum",
  "Structure",
  "Class",
  "Typedef",
  "Signature"
};
const std::map<int, const char*> _DataTypeGroup_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kDataTypeGroupValues, _kDataTypeGroupNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const DataTypeGroup::type& val) {
  std::map<int, const char*>::const_iterator it = _DataTypeGroup_VALUES_TO_NAMES.find(val);
  if (it != _DataTypeGroup_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


SDataType::~SDataType() throw() {
}


void SDataType::__set_id(const Id val) {
  this->id = val;
}

void SDataType::__set_name(const std::string& val) {
  this->name = val;
}

void SDataType::__set_comment(const std::string& val) {
  this->comment = val;
}

void SDataType::__set_group(const DataTypeGroup::type val) {
  this->group = val;
}

void SDataType::__set_size(const int32_t val) {
  this->size = val;
}
std::ostream& operator<<(std::ostream& out, const SDataType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SDataType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->group = (DataTypeGroup::type)ecast0;
          this->__isset.group = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SDataType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDataType");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("group", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->group);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SDataType &a, SDataType &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.comment, b.comment);
  swap(a.group, b.group);
  swap(a.size, b.size);
  swap(a.__isset, b.__isset);
}

SDataType::SDataType(const SDataType& other1) {
  id = other1.id;
  name = other1.name;
  comment = other1.comment;
  group = other1.group;
  size = other1.size;
  __isset = other1.__isset;
}
SDataType& SDataType::operator=(const SDataType& other2) {
  id = other2.id;
  name = other2.name;
  comment = other2.comment;
  group = other2.group;
  size = other2.size;
  __isset = other2.__isset;
  return *this;
}
void SDataType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SDataType(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "comment=" << to_string(comment);
  out << ", " << "group=" << to_string(group);
  out << ", " << "size=" << to_string(size);
  out << ")";
}


SDataTypeStructureField::~SDataTypeStructureField() throw() {
}


void SDataTypeStructureField::__set_offset(const int32_t val) {
  this->offset = val;
}

void SDataTypeStructureField::__set_name(const std::string& val) {
  this->name = val;
}

void SDataTypeStructureField::__set_comment(const std::string& val) {
  this->comment = val;
}

void SDataTypeStructureField::__set_type(const  ::ghidra::shared::STypeUnit& val) {
  this->type = val;
}
std::ostream& operator<<(std::ostream& out, const SDataTypeStructureField& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SDataTypeStructureField::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->offset);
          this->__isset.offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->type.read(iprot);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SDataTypeStructureField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDataTypeStructureField");

  xfer += oprot->writeFieldBegin("offset", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->type.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SDataTypeStructureField &a, SDataTypeStructureField &b) {
  using ::std::swap;
  swap(a.offset, b.offset);
  swap(a.name, b.name);
  swap(a.comment, b.comment);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

SDataTypeStructureField::SDataTypeStructureField(const SDataTypeStructureField& other3) {
  offset = other3.offset;
  name = other3.name;
  comment = other3.comment;
  type = other3.type;
  __isset = other3.__isset;
}
SDataTypeStructureField& SDataTypeStructureField::operator=(const SDataTypeStructureField& other4) {
  offset = other4.offset;
  name = other4.name;
  comment = other4.comment;
  type = other4.type;
  __isset = other4.__isset;
  return *this;
}
void SDataTypeStructureField::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SDataTypeStructureField(";
  out << "offset=" << to_string(offset);
  out << ", " << "name=" << to_string(name);
  out << ", " << "comment=" << to_string(comment);
  out << ", " << "type=" << to_string(type);
  out << ")";
}


SDataTypeStructure::~SDataTypeStructure() throw() {
}


void SDataTypeStructure::__set_type(const SDataType& val) {
  this->type = val;
}

void SDataTypeStructure::__set_fields(const std::vector<SDataTypeStructureField> & val) {
  this->fields = val;
}
std::ostream& operator<<(std::ostream& out, const SDataTypeStructure& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SDataTypeStructure::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->type.read(iprot);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fields.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->fields.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += this->fields[_i9].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.fields = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SDataTypeStructure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDataTypeStructure");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->type.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fields", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fields.size()));
    std::vector<SDataTypeStructureField> ::const_iterator _iter10;
    for (_iter10 = this->fields.begin(); _iter10 != this->fields.end(); ++_iter10)
    {
      xfer += (*_iter10).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SDataTypeStructure &a, SDataTypeStructure &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.fields, b.fields);
  swap(a.__isset, b.__isset);
}

SDataTypeStructure::SDataTypeStructure(const SDataTypeStructure& other11) {
  type = other11.type;
  fields = other11.fields;
  __isset = other11.__isset;
}
SDataTypeStructure& SDataTypeStructure::operator=(const SDataTypeStructure& other12) {
  type = other12.type;
  fields = other12.fields;
  __isset = other12.__isset;
  return *this;
}
void SDataTypeStructure::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SDataTypeStructure(";
  out << "type=" << to_string(type);
  out << ", " << "fields=" << to_string(fields);
  out << ")";
}


SDataTypeClass::~SDataTypeClass() throw() {
}


void SDataTypeClass::__set_structType(const SDataTypeStructure& val) {
  this->structType = val;
}
std::ostream& operator<<(std::ostream& out, const SDataTypeClass& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SDataTypeClass::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->structType.read(iprot);
          this->__isset.structType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SDataTypeClass::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDataTypeClass");

  xfer += oprot->writeFieldBegin("structType", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->structType.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SDataTypeClass &a, SDataTypeClass &b) {
  using ::std::swap;
  swap(a.structType, b.structType);
  swap(a.__isset, b.__isset);
}

SDataTypeClass::SDataTypeClass(const SDataTypeClass& other13) {
  structType = other13.structType;
  __isset = other13.__isset;
}
SDataTypeClass& SDataTypeClass::operator=(const SDataTypeClass& other14) {
  structType = other14.structType;
  __isset = other14.__isset;
  return *this;
}
void SDataTypeClass::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SDataTypeClass(";
  out << "structType=" << to_string(structType);
  out << ")";
}


SDataTypeEnumField::~SDataTypeEnumField() throw() {
}


void SDataTypeEnumField::__set_name(const std::string& val) {
  this->name = val;
}

void SDataTypeEnumField::__set_value(const int32_t val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const SDataTypeEnumField& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SDataTypeEnumField::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SDataTypeEnumField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDataTypeEnumField");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SDataTypeEnumField &a, SDataTypeEnumField &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

SDataTypeEnumField::SDataTypeEnumField(const SDataTypeEnumField& other15) {
  name = other15.name;
  value = other15.value;
  __isset = other15.__isset;
}
SDataTypeEnumField& SDataTypeEnumField::operator=(const SDataTypeEnumField& other16) {
  name = other16.name;
  value = other16.value;
  __isset = other16.__isset;
  return *this;
}
void SDataTypeEnumField::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SDataTypeEnumField(";
  out << "name=" << to_string(name);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


SDataTypeEnum::~SDataTypeEnum() throw() {
}


void SDataTypeEnum::__set_type(const SDataType& val) {
  this->type = val;
}

void SDataTypeEnum::__set_fields(const std::vector<SDataTypeEnumField> & val) {
  this->fields = val;
}
std::ostream& operator<<(std::ostream& out, const SDataTypeEnum& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SDataTypeEnum::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->type.read(iprot);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fields.clear();
            uint32_t _size17;
            ::apache::thrift::protocol::TType _etype20;
            xfer += iprot->readListBegin(_etype20, _size17);
            this->fields.resize(_size17);
            uint32_t _i21;
            for (_i21 = 0; _i21 < _size17; ++_i21)
            {
              xfer += this->fields[_i21].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.fields = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SDataTypeEnum::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDataTypeEnum");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->type.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fields", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fields.size()));
    std::vector<SDataTypeEnumField> ::const_iterator _iter22;
    for (_iter22 = this->fields.begin(); _iter22 != this->fields.end(); ++_iter22)
    {
      xfer += (*_iter22).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SDataTypeEnum &a, SDataTypeEnum &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.fields, b.fields);
  swap(a.__isset, b.__isset);
}

SDataTypeEnum::SDataTypeEnum(const SDataTypeEnum& other23) {
  type = other23.type;
  fields = other23.fields;
  __isset = other23.__isset;
}
SDataTypeEnum& SDataTypeEnum::operator=(const SDataTypeEnum& other24) {
  type = other24.type;
  fields = other24.fields;
  __isset = other24.__isset;
  return *this;
}
void SDataTypeEnum::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SDataTypeEnum(";
  out << "type=" << to_string(type);
  out << ", " << "fields=" << to_string(fields);
  out << ")";
}


SDataTypeTypedef::~SDataTypeTypedef() throw() {
}


void SDataTypeTypedef::__set_type(const SDataType& val) {
  this->type = val;
}

void SDataTypeTypedef::__set_refType(const  ::ghidra::shared::STypeUnit& val) {
  this->refType = val;
}
std::ostream& operator<<(std::ostream& out, const SDataTypeTypedef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SDataTypeTypedef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->type.read(iprot);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->refType.read(iprot);
          this->__isset.refType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SDataTypeTypedef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDataTypeTypedef");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->type.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("refType", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->refType.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SDataTypeTypedef &a, SDataTypeTypedef &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.refType, b.refType);
  swap(a.__isset, b.__isset);
}

SDataTypeTypedef::SDataTypeTypedef(const SDataTypeTypedef& other25) {
  type = other25.type;
  refType = other25.refType;
  __isset = other25.__isset;
}
SDataTypeTypedef& SDataTypeTypedef::operator=(const SDataTypeTypedef& other26) {
  type = other26.type;
  refType = other26.refType;
  __isset = other26.__isset;
  return *this;
}
void SDataTypeTypedef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SDataTypeTypedef(";
  out << "type=" << to_string(type);
  out << ", " << "refType=" << to_string(refType);
  out << ")";
}

}} // namespace
