/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef shared_TYPES_H
#define shared_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace ghidra { namespace shared {

typedef int64_t Id;

class STypeUnit;

typedef struct _STypeUnit__isset {
  _STypeUnit__isset() : typeId(false), pointerLvl(false), arraySize(false) {}
  bool typeId :1;
  bool pointerLvl :1;
  bool arraySize :1;
} _STypeUnit__isset;

class STypeUnit : public virtual ::apache::thrift::TBase {
 public:

  STypeUnit(const STypeUnit&);
  STypeUnit& operator=(const STypeUnit&);
  STypeUnit() : typeId(0), pointerLvl(0), arraySize(0) {
  }

  virtual ~STypeUnit() throw();
  Id typeId;
  int32_t pointerLvl;
  int32_t arraySize;

  _STypeUnit__isset __isset;

  void __set_typeId(const Id val);

  void __set_pointerLvl(const int32_t val);

  void __set_arraySize(const int32_t val);

  bool operator == (const STypeUnit & rhs) const
  {
    if (!(typeId == rhs.typeId))
      return false;
    if (!(pointerLvl == rhs.pointerLvl))
      return false;
    if (!(arraySize == rhs.arraySize))
      return false;
    return true;
  }
  bool operator != (const STypeUnit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const STypeUnit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(STypeUnit &a, STypeUnit &b);

std::ostream& operator<<(std::ostream& out, const STypeUnit& obj);

}} // namespace

#endif
