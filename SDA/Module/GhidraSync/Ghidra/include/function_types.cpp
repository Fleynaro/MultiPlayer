/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "function_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace ghidra { namespace function {


SFunctionRange::~SFunctionRange() throw() {
}


void SFunctionRange::__set_minOffset(const int32_t val) {
  this->minOffset = val;
}

void SFunctionRange::__set_maxOffset(const int32_t val) {
  this->maxOffset = val;
}
std::ostream& operator<<(std::ostream& out, const SFunctionRange& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SFunctionRange::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minOffset);
          this->__isset.minOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxOffset);
          this->__isset.maxOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SFunctionRange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SFunctionRange");

  xfer += oprot->writeFieldBegin("minOffset", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->minOffset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxOffset", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->maxOffset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SFunctionRange &a, SFunctionRange &b) {
  using ::std::swap;
  swap(a.minOffset, b.minOffset);
  swap(a.maxOffset, b.maxOffset);
  swap(a.__isset, b.__isset);
}

SFunctionRange::SFunctionRange(const SFunctionRange& other0) {
  minOffset = other0.minOffset;
  maxOffset = other0.maxOffset;
  __isset = other0.__isset;
}
SFunctionRange& SFunctionRange::operator=(const SFunctionRange& other1) {
  minOffset = other1.minOffset;
  maxOffset = other1.maxOffset;
  __isset = other1.__isset;
  return *this;
}
void SFunctionRange::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SFunctionRange(";
  out << "minOffset=" << to_string(minOffset);
  out << ", " << "maxOffset=" << to_string(maxOffset);
  out << ")";
}


SFunction::~SFunction() throw() {
}


void SFunction::__set_id(const Id val) {
  this->id = val;
}

void SFunction::__set_name(const std::string& val) {
  this->name = val;
}

void SFunction::__set_comment(const std::string& val) {
  this->comment = val;
}

void SFunction::__set_signature(const  ::ghidra::datatype::SDataTypeSignature& val) {
  this->signature = val;
}

void SFunction::__set_ranges(const std::vector<SFunctionRange> & val) {
  this->ranges = val;
}
std::ostream& operator<<(std::ostream& out, const SFunction& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SFunction::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->signature.read(iprot);
          this->__isset.signature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ranges.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->ranges.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->ranges[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ranges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SFunction::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SFunction");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("signature", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->signature.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ranges", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ranges.size()));
    std::vector<SFunctionRange> ::const_iterator _iter7;
    for (_iter7 = this->ranges.begin(); _iter7 != this->ranges.end(); ++_iter7)
    {
      xfer += (*_iter7).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SFunction &a, SFunction &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.comment, b.comment);
  swap(a.signature, b.signature);
  swap(a.ranges, b.ranges);
  swap(a.__isset, b.__isset);
}

SFunction::SFunction(const SFunction& other8) {
  id = other8.id;
  name = other8.name;
  comment = other8.comment;
  signature = other8.signature;
  ranges = other8.ranges;
  __isset = other8.__isset;
}
SFunction& SFunction::operator=(const SFunction& other9) {
  id = other9.id;
  name = other9.name;
  comment = other9.comment;
  signature = other9.signature;
  ranges = other9.ranges;
  __isset = other9.__isset;
  return *this;
}
void SFunction::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SFunction(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "comment=" << to_string(comment);
  out << ", " << "signature=" << to_string(signature);
  out << ", " << "ranges=" << to_string(ranges);
  out << ")";
}

}} // namespace
