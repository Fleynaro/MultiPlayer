/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef variable_TYPES_H
#define variable_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "shared_types.h"


namespace ghidra { namespace variable {

typedef int64_t Id;

class SGlobalVar;

typedef struct _SGlobalVar__isset {
  _SGlobalVar__isset() : id(false), name(false), comment(false), type(false) {}
  bool id :1;
  bool name :1;
  bool comment :1;
  bool type :1;
} _SGlobalVar__isset;

class SGlobalVar : public virtual ::apache::thrift::TBase {
 public:

  SGlobalVar(const SGlobalVar&);
  SGlobalVar& operator=(const SGlobalVar&);
  SGlobalVar() : id(0), name(), comment() {
  }

  virtual ~SGlobalVar() throw();
  Id id;
  std::string name;
  std::string comment;
   ::ghidra::shared::STypeUnit type;

  _SGlobalVar__isset __isset;

  void __set_id(const Id val);

  void __set_name(const std::string& val);

  void __set_comment(const std::string& val);

  void __set_type(const  ::ghidra::shared::STypeUnit& val);

  bool operator == (const SGlobalVar & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const SGlobalVar &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SGlobalVar & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SGlobalVar &a, SGlobalVar &b);

std::ostream& operator<<(std::ostream& out, const SGlobalVar& obj);

}} // namespace

#endif
