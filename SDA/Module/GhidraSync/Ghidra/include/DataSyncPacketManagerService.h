/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DataSyncPacketManagerService_H
#define DataSyncPacketManagerService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "ghidra_types.h"

namespace ghidra { namespace packet {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DataSyncPacketManagerServiceIf {
 public:
  virtual ~DataSyncPacketManagerServiceIf() {}
  virtual void recieveLightSyncPacket(SDataLightSyncPacket& _return) = 0;
  virtual void sendLightSyncPacket(const SDataLightSyncPacket& packet) = 0;
  virtual void recieveFullSyncPacket(SDataFullSyncPacket& _return) = 0;
  virtual void sendFullSyncPacket(const SDataFullSyncPacket& packet) = 0;
};

class DataSyncPacketManagerServiceIfFactory {
 public:
  typedef DataSyncPacketManagerServiceIf Handler;

  virtual ~DataSyncPacketManagerServiceIfFactory() {}

  virtual DataSyncPacketManagerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DataSyncPacketManagerServiceIf* /* handler */) = 0;
};

class DataSyncPacketManagerServiceIfSingletonFactory : virtual public DataSyncPacketManagerServiceIfFactory {
 public:
  DataSyncPacketManagerServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<DataSyncPacketManagerServiceIf>& iface) : iface_(iface) {}
  virtual ~DataSyncPacketManagerServiceIfSingletonFactory() {}

  virtual DataSyncPacketManagerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DataSyncPacketManagerServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<DataSyncPacketManagerServiceIf> iface_;
};

class DataSyncPacketManagerServiceNull : virtual public DataSyncPacketManagerServiceIf {
 public:
  virtual ~DataSyncPacketManagerServiceNull() {}
  void recieveLightSyncPacket(SDataLightSyncPacket& /* _return */) {
    return;
  }
  void sendLightSyncPacket(const SDataLightSyncPacket& /* packet */) {
    return;
  }
  void recieveFullSyncPacket(SDataFullSyncPacket& /* _return */) {
    return;
  }
  void sendFullSyncPacket(const SDataFullSyncPacket& /* packet */) {
    return;
  }
};


class DataSyncPacketManagerService_recieveLightSyncPacket_args {
 public:

  DataSyncPacketManagerService_recieveLightSyncPacket_args(const DataSyncPacketManagerService_recieveLightSyncPacket_args&);
  DataSyncPacketManagerService_recieveLightSyncPacket_args& operator=(const DataSyncPacketManagerService_recieveLightSyncPacket_args&);
  DataSyncPacketManagerService_recieveLightSyncPacket_args() {
  }

  virtual ~DataSyncPacketManagerService_recieveLightSyncPacket_args() throw();

  bool operator == (const DataSyncPacketManagerService_recieveLightSyncPacket_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DataSyncPacketManagerService_recieveLightSyncPacket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataSyncPacketManagerService_recieveLightSyncPacket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataSyncPacketManagerService_recieveLightSyncPacket_pargs {
 public:


  virtual ~DataSyncPacketManagerService_recieveLightSyncPacket_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataSyncPacketManagerService_recieveLightSyncPacket_result__isset {
  _DataSyncPacketManagerService_recieveLightSyncPacket_result__isset() : success(false) {}
  bool success :1;
} _DataSyncPacketManagerService_recieveLightSyncPacket_result__isset;

class DataSyncPacketManagerService_recieveLightSyncPacket_result {
 public:

  DataSyncPacketManagerService_recieveLightSyncPacket_result(const DataSyncPacketManagerService_recieveLightSyncPacket_result&);
  DataSyncPacketManagerService_recieveLightSyncPacket_result& operator=(const DataSyncPacketManagerService_recieveLightSyncPacket_result&);
  DataSyncPacketManagerService_recieveLightSyncPacket_result() {
  }

  virtual ~DataSyncPacketManagerService_recieveLightSyncPacket_result() throw();
  SDataLightSyncPacket success;

  _DataSyncPacketManagerService_recieveLightSyncPacket_result__isset __isset;

  void __set_success(const SDataLightSyncPacket& val);

  bool operator == (const DataSyncPacketManagerService_recieveLightSyncPacket_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataSyncPacketManagerService_recieveLightSyncPacket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataSyncPacketManagerService_recieveLightSyncPacket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataSyncPacketManagerService_recieveLightSyncPacket_presult__isset {
  _DataSyncPacketManagerService_recieveLightSyncPacket_presult__isset() : success(false) {}
  bool success :1;
} _DataSyncPacketManagerService_recieveLightSyncPacket_presult__isset;

class DataSyncPacketManagerService_recieveLightSyncPacket_presult {
 public:


  virtual ~DataSyncPacketManagerService_recieveLightSyncPacket_presult() throw();
  SDataLightSyncPacket* success;

  _DataSyncPacketManagerService_recieveLightSyncPacket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataSyncPacketManagerService_sendLightSyncPacket_args__isset {
  _DataSyncPacketManagerService_sendLightSyncPacket_args__isset() : packet(false) {}
  bool packet :1;
} _DataSyncPacketManagerService_sendLightSyncPacket_args__isset;

class DataSyncPacketManagerService_sendLightSyncPacket_args {
 public:

  DataSyncPacketManagerService_sendLightSyncPacket_args(const DataSyncPacketManagerService_sendLightSyncPacket_args&);
  DataSyncPacketManagerService_sendLightSyncPacket_args& operator=(const DataSyncPacketManagerService_sendLightSyncPacket_args&);
  DataSyncPacketManagerService_sendLightSyncPacket_args() {
  }

  virtual ~DataSyncPacketManagerService_sendLightSyncPacket_args() throw();
  SDataLightSyncPacket packet;

  _DataSyncPacketManagerService_sendLightSyncPacket_args__isset __isset;

  void __set_packet(const SDataLightSyncPacket& val);

  bool operator == (const DataSyncPacketManagerService_sendLightSyncPacket_args & rhs) const
  {
    if (!(packet == rhs.packet))
      return false;
    return true;
  }
  bool operator != (const DataSyncPacketManagerService_sendLightSyncPacket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataSyncPacketManagerService_sendLightSyncPacket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataSyncPacketManagerService_sendLightSyncPacket_pargs {
 public:


  virtual ~DataSyncPacketManagerService_sendLightSyncPacket_pargs() throw();
  const SDataLightSyncPacket* packet;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataSyncPacketManagerService_sendLightSyncPacket_result {
 public:

  DataSyncPacketManagerService_sendLightSyncPacket_result(const DataSyncPacketManagerService_sendLightSyncPacket_result&);
  DataSyncPacketManagerService_sendLightSyncPacket_result& operator=(const DataSyncPacketManagerService_sendLightSyncPacket_result&);
  DataSyncPacketManagerService_sendLightSyncPacket_result() {
  }

  virtual ~DataSyncPacketManagerService_sendLightSyncPacket_result() throw();

  bool operator == (const DataSyncPacketManagerService_sendLightSyncPacket_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DataSyncPacketManagerService_sendLightSyncPacket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataSyncPacketManagerService_sendLightSyncPacket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataSyncPacketManagerService_sendLightSyncPacket_presult {
 public:


  virtual ~DataSyncPacketManagerService_sendLightSyncPacket_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DataSyncPacketManagerService_recieveFullSyncPacket_args {
 public:

  DataSyncPacketManagerService_recieveFullSyncPacket_args(const DataSyncPacketManagerService_recieveFullSyncPacket_args&);
  DataSyncPacketManagerService_recieveFullSyncPacket_args& operator=(const DataSyncPacketManagerService_recieveFullSyncPacket_args&);
  DataSyncPacketManagerService_recieveFullSyncPacket_args() {
  }

  virtual ~DataSyncPacketManagerService_recieveFullSyncPacket_args() throw();

  bool operator == (const DataSyncPacketManagerService_recieveFullSyncPacket_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DataSyncPacketManagerService_recieveFullSyncPacket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataSyncPacketManagerService_recieveFullSyncPacket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataSyncPacketManagerService_recieveFullSyncPacket_pargs {
 public:


  virtual ~DataSyncPacketManagerService_recieveFullSyncPacket_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataSyncPacketManagerService_recieveFullSyncPacket_result__isset {
  _DataSyncPacketManagerService_recieveFullSyncPacket_result__isset() : success(false) {}
  bool success :1;
} _DataSyncPacketManagerService_recieveFullSyncPacket_result__isset;

class DataSyncPacketManagerService_recieveFullSyncPacket_result {
 public:

  DataSyncPacketManagerService_recieveFullSyncPacket_result(const DataSyncPacketManagerService_recieveFullSyncPacket_result&);
  DataSyncPacketManagerService_recieveFullSyncPacket_result& operator=(const DataSyncPacketManagerService_recieveFullSyncPacket_result&);
  DataSyncPacketManagerService_recieveFullSyncPacket_result() {
  }

  virtual ~DataSyncPacketManagerService_recieveFullSyncPacket_result() throw();
  SDataFullSyncPacket success;

  _DataSyncPacketManagerService_recieveFullSyncPacket_result__isset __isset;

  void __set_success(const SDataFullSyncPacket& val);

  bool operator == (const DataSyncPacketManagerService_recieveFullSyncPacket_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataSyncPacketManagerService_recieveFullSyncPacket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataSyncPacketManagerService_recieveFullSyncPacket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataSyncPacketManagerService_recieveFullSyncPacket_presult__isset {
  _DataSyncPacketManagerService_recieveFullSyncPacket_presult__isset() : success(false) {}
  bool success :1;
} _DataSyncPacketManagerService_recieveFullSyncPacket_presult__isset;

class DataSyncPacketManagerService_recieveFullSyncPacket_presult {
 public:


  virtual ~DataSyncPacketManagerService_recieveFullSyncPacket_presult() throw();
  SDataFullSyncPacket* success;

  _DataSyncPacketManagerService_recieveFullSyncPacket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataSyncPacketManagerService_sendFullSyncPacket_args__isset {
  _DataSyncPacketManagerService_sendFullSyncPacket_args__isset() : packet(false) {}
  bool packet :1;
} _DataSyncPacketManagerService_sendFullSyncPacket_args__isset;

class DataSyncPacketManagerService_sendFullSyncPacket_args {
 public:

  DataSyncPacketManagerService_sendFullSyncPacket_args(const DataSyncPacketManagerService_sendFullSyncPacket_args&);
  DataSyncPacketManagerService_sendFullSyncPacket_args& operator=(const DataSyncPacketManagerService_sendFullSyncPacket_args&);
  DataSyncPacketManagerService_sendFullSyncPacket_args() {
  }

  virtual ~DataSyncPacketManagerService_sendFullSyncPacket_args() throw();
  SDataFullSyncPacket packet;

  _DataSyncPacketManagerService_sendFullSyncPacket_args__isset __isset;

  void __set_packet(const SDataFullSyncPacket& val);

  bool operator == (const DataSyncPacketManagerService_sendFullSyncPacket_args & rhs) const
  {
    if (!(packet == rhs.packet))
      return false;
    return true;
  }
  bool operator != (const DataSyncPacketManagerService_sendFullSyncPacket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataSyncPacketManagerService_sendFullSyncPacket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataSyncPacketManagerService_sendFullSyncPacket_pargs {
 public:


  virtual ~DataSyncPacketManagerService_sendFullSyncPacket_pargs() throw();
  const SDataFullSyncPacket* packet;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataSyncPacketManagerService_sendFullSyncPacket_result {
 public:

  DataSyncPacketManagerService_sendFullSyncPacket_result(const DataSyncPacketManagerService_sendFullSyncPacket_result&);
  DataSyncPacketManagerService_sendFullSyncPacket_result& operator=(const DataSyncPacketManagerService_sendFullSyncPacket_result&);
  DataSyncPacketManagerService_sendFullSyncPacket_result() {
  }

  virtual ~DataSyncPacketManagerService_sendFullSyncPacket_result() throw();

  bool operator == (const DataSyncPacketManagerService_sendFullSyncPacket_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DataSyncPacketManagerService_sendFullSyncPacket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataSyncPacketManagerService_sendFullSyncPacket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataSyncPacketManagerService_sendFullSyncPacket_presult {
 public:


  virtual ~DataSyncPacketManagerService_sendFullSyncPacket_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DataSyncPacketManagerServiceClient : virtual public DataSyncPacketManagerServiceIf {
 public:
  DataSyncPacketManagerServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DataSyncPacketManagerServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void recieveLightSyncPacket(SDataLightSyncPacket& _return);
  void send_recieveLightSyncPacket();
  void recv_recieveLightSyncPacket(SDataLightSyncPacket& _return);
  void sendLightSyncPacket(const SDataLightSyncPacket& packet);
  void send_sendLightSyncPacket(const SDataLightSyncPacket& packet);
  void recv_sendLightSyncPacket();
  void recieveFullSyncPacket(SDataFullSyncPacket& _return);
  void send_recieveFullSyncPacket();
  void recv_recieveFullSyncPacket(SDataFullSyncPacket& _return);
  void sendFullSyncPacket(const SDataFullSyncPacket& packet);
  void send_sendFullSyncPacket(const SDataFullSyncPacket& packet);
  void recv_sendFullSyncPacket();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DataSyncPacketManagerServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<DataSyncPacketManagerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DataSyncPacketManagerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_recieveLightSyncPacket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendLightSyncPacket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_recieveFullSyncPacket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendFullSyncPacket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DataSyncPacketManagerServiceProcessor(::apache::thrift::stdcxx::shared_ptr<DataSyncPacketManagerServiceIf> iface) :
    iface_(iface) {
    processMap_["recieveLightSyncPacket"] = &DataSyncPacketManagerServiceProcessor::process_recieveLightSyncPacket;
    processMap_["sendLightSyncPacket"] = &DataSyncPacketManagerServiceProcessor::process_sendLightSyncPacket;
    processMap_["recieveFullSyncPacket"] = &DataSyncPacketManagerServiceProcessor::process_recieveFullSyncPacket;
    processMap_["sendFullSyncPacket"] = &DataSyncPacketManagerServiceProcessor::process_sendFullSyncPacket;
  }

  virtual ~DataSyncPacketManagerServiceProcessor() {}
};

class DataSyncPacketManagerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DataSyncPacketManagerServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< DataSyncPacketManagerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< DataSyncPacketManagerServiceIfFactory > handlerFactory_;
};

class DataSyncPacketManagerServiceMultiface : virtual public DataSyncPacketManagerServiceIf {
 public:
  DataSyncPacketManagerServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<DataSyncPacketManagerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DataSyncPacketManagerServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<DataSyncPacketManagerServiceIf> > ifaces_;
  DataSyncPacketManagerServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<DataSyncPacketManagerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void recieveLightSyncPacket(SDataLightSyncPacket& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->recieveLightSyncPacket(_return);
    }
    ifaces_[i]->recieveLightSyncPacket(_return);
    return;
  }

  void sendLightSyncPacket(const SDataLightSyncPacket& packet) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendLightSyncPacket(packet);
    }
    ifaces_[i]->sendLightSyncPacket(packet);
  }

  void recieveFullSyncPacket(SDataFullSyncPacket& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->recieveFullSyncPacket(_return);
    }
    ifaces_[i]->recieveFullSyncPacket(_return);
    return;
  }

  void sendFullSyncPacket(const SDataFullSyncPacket& packet) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendFullSyncPacket(packet);
    }
    ifaces_[i]->sendFullSyncPacket(packet);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DataSyncPacketManagerServiceConcurrentClient : virtual public DataSyncPacketManagerServiceIf {
 public:
  DataSyncPacketManagerServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DataSyncPacketManagerServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void recieveLightSyncPacket(SDataLightSyncPacket& _return);
  int32_t send_recieveLightSyncPacket();
  void recv_recieveLightSyncPacket(SDataLightSyncPacket& _return, const int32_t seqid);
  void sendLightSyncPacket(const SDataLightSyncPacket& packet);
  int32_t send_sendLightSyncPacket(const SDataLightSyncPacket& packet);
  void recv_sendLightSyncPacket(const int32_t seqid);
  void recieveFullSyncPacket(SDataFullSyncPacket& _return);
  int32_t send_recieveFullSyncPacket();
  void recv_recieveFullSyncPacket(SDataFullSyncPacket& _return, const int32_t seqid);
  void sendFullSyncPacket(const SDataFullSyncPacket& packet);
  int32_t send_sendFullSyncPacket(const SDataFullSyncPacket& packet);
  void recv_sendFullSyncPacket(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
