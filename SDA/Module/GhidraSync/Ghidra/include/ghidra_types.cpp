/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ghidra_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace ghidra { namespace packet {


SDataLightSyncPacket::~SDataLightSyncPacket() throw() {
}


void SDataLightSyncPacket::__set_types(const std::vector< ::ghidra::datatype::SDataType> & val) {
  this->types = val;
}
std::ostream& operator<<(std::ostream& out, const SDataLightSyncPacket& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SDataLightSyncPacket::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->types.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->types.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->types[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.types = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SDataLightSyncPacket::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDataLightSyncPacket");

  xfer += oprot->writeFieldBegin("types", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->types.size()));
    std::vector< ::ghidra::datatype::SDataType> ::const_iterator _iter5;
    for (_iter5 = this->types.begin(); _iter5 != this->types.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SDataLightSyncPacket &a, SDataLightSyncPacket &b) {
  using ::std::swap;
  swap(a.types, b.types);
  swap(a.__isset, b.__isset);
}

SDataLightSyncPacket::SDataLightSyncPacket(const SDataLightSyncPacket& other6) {
  types = other6.types;
  __isset = other6.__isset;
}
SDataLightSyncPacket& SDataLightSyncPacket::operator=(const SDataLightSyncPacket& other7) {
  types = other7.types;
  __isset = other7.__isset;
  return *this;
}
void SDataLightSyncPacket::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SDataLightSyncPacket(";
  out << "types=" << to_string(types);
  out << ")";
}


SDataFullSyncPacket::~SDataFullSyncPacket() throw() {
}


void SDataFullSyncPacket::__set_typedefs(const std::vector< ::ghidra::datatype::SDataTypeTypedef> & val) {
  this->typedefs = val;
}

void SDataFullSyncPacket::__set_classes(const std::vector< ::ghidra::datatype::SDataTypeClass> & val) {
  this->classes = val;
}

void SDataFullSyncPacket::__set_structures(const std::vector< ::ghidra::datatype::SDataTypeStructure> & val) {
  this->structures = val;
}

void SDataFullSyncPacket::__set_enums(const std::vector< ::ghidra::datatype::SDataTypeEnum> & val) {
  this->enums = val;
}

void SDataFullSyncPacket::__set_signatures(const std::vector< ::ghidra::datatype::SDataTypeSignature> & val) {
  this->signatures = val;
}

void SDataFullSyncPacket::__set_functions(const std::vector< ::ghidra::function::SFunction> & val) {
  this->functions = val;
}

void SDataFullSyncPacket::__set_removed_datatypes(const std::vector< ::ghidra::shared::Id> & val) {
  this->removed_datatypes = val;
}

void SDataFullSyncPacket::__set_removed_functions(const std::vector< ::ghidra::shared::Id> & val) {
  this->removed_functions = val;
}
std::ostream& operator<<(std::ostream& out, const SDataFullSyncPacket& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SDataFullSyncPacket::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->typedefs.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            xfer += iprot->readListBegin(_etype11, _size8);
            this->typedefs.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += this->typedefs[_i12].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.typedefs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->classes.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _etype16;
            xfer += iprot->readListBegin(_etype16, _size13);
            this->classes.resize(_size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              xfer += this->classes[_i17].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.classes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->structures.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->structures.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += this->structures[_i22].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.structures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->enums.clear();
            uint32_t _size23;
            ::apache::thrift::protocol::TType _etype26;
            xfer += iprot->readListBegin(_etype26, _size23);
            this->enums.resize(_size23);
            uint32_t _i27;
            for (_i27 = 0; _i27 < _size23; ++_i27)
            {
              xfer += this->enums[_i27].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.enums = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->signatures.clear();
            uint32_t _size28;
            ::apache::thrift::protocol::TType _etype31;
            xfer += iprot->readListBegin(_etype31, _size28);
            this->signatures.resize(_size28);
            uint32_t _i32;
            for (_i32 = 0; _i32 < _size28; ++_i32)
            {
              xfer += this->signatures[_i32].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.signatures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->functions.clear();
            uint32_t _size33;
            ::apache::thrift::protocol::TType _etype36;
            xfer += iprot->readListBegin(_etype36, _size33);
            this->functions.resize(_size33);
            uint32_t _i37;
            for (_i37 = 0; _i37 < _size33; ++_i37)
            {
              xfer += this->functions[_i37].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.functions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->removed_datatypes.clear();
            uint32_t _size38;
            ::apache::thrift::protocol::TType _etype41;
            xfer += iprot->readListBegin(_etype41, _size38);
            this->removed_datatypes.resize(_size38);
            uint32_t _i42;
            for (_i42 = 0; _i42 < _size38; ++_i42)
            {
              xfer += iprot->readI64(this->removed_datatypes[_i42]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.removed_datatypes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->removed_functions.clear();
            uint32_t _size43;
            ::apache::thrift::protocol::TType _etype46;
            xfer += iprot->readListBegin(_etype46, _size43);
            this->removed_functions.resize(_size43);
            uint32_t _i47;
            for (_i47 = 0; _i47 < _size43; ++_i47)
            {
              xfer += iprot->readI64(this->removed_functions[_i47]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.removed_functions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SDataFullSyncPacket::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDataFullSyncPacket");

  xfer += oprot->writeFieldBegin("typedefs", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->typedefs.size()));
    std::vector< ::ghidra::datatype::SDataTypeTypedef> ::const_iterator _iter48;
    for (_iter48 = this->typedefs.begin(); _iter48 != this->typedefs.end(); ++_iter48)
    {
      xfer += (*_iter48).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("classes", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->classes.size()));
    std::vector< ::ghidra::datatype::SDataTypeClass> ::const_iterator _iter49;
    for (_iter49 = this->classes.begin(); _iter49 != this->classes.end(); ++_iter49)
    {
      xfer += (*_iter49).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("structures", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->structures.size()));
    std::vector< ::ghidra::datatype::SDataTypeStructure> ::const_iterator _iter50;
    for (_iter50 = this->structures.begin(); _iter50 != this->structures.end(); ++_iter50)
    {
      xfer += (*_iter50).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enums", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->enums.size()));
    std::vector< ::ghidra::datatype::SDataTypeEnum> ::const_iterator _iter51;
    for (_iter51 = this->enums.begin(); _iter51 != this->enums.end(); ++_iter51)
    {
      xfer += (*_iter51).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("signatures", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->signatures.size()));
    std::vector< ::ghidra::datatype::SDataTypeSignature> ::const_iterator _iter52;
    for (_iter52 = this->signatures.begin(); _iter52 != this->signatures.end(); ++_iter52)
    {
      xfer += (*_iter52).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("functions", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->functions.size()));
    std::vector< ::ghidra::function::SFunction> ::const_iterator _iter53;
    for (_iter53 = this->functions.begin(); _iter53 != this->functions.end(); ++_iter53)
    {
      xfer += (*_iter53).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("removed_datatypes", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->removed_datatypes.size()));
    std::vector< ::ghidra::shared::Id> ::const_iterator _iter54;
    for (_iter54 = this->removed_datatypes.begin(); _iter54 != this->removed_datatypes.end(); ++_iter54)
    {
      xfer += oprot->writeI64((*_iter54));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("removed_functions", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->removed_functions.size()));
    std::vector< ::ghidra::shared::Id> ::const_iterator _iter55;
    for (_iter55 = this->removed_functions.begin(); _iter55 != this->removed_functions.end(); ++_iter55)
    {
      xfer += oprot->writeI64((*_iter55));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SDataFullSyncPacket &a, SDataFullSyncPacket &b) {
  using ::std::swap;
  swap(a.typedefs, b.typedefs);
  swap(a.classes, b.classes);
  swap(a.structures, b.structures);
  swap(a.enums, b.enums);
  swap(a.signatures, b.signatures);
  swap(a.functions, b.functions);
  swap(a.removed_datatypes, b.removed_datatypes);
  swap(a.removed_functions, b.removed_functions);
  swap(a.__isset, b.__isset);
}

SDataFullSyncPacket::SDataFullSyncPacket(const SDataFullSyncPacket& other56) {
  typedefs = other56.typedefs;
  classes = other56.classes;
  structures = other56.structures;
  enums = other56.enums;
  signatures = other56.signatures;
  functions = other56.functions;
  removed_datatypes = other56.removed_datatypes;
  removed_functions = other56.removed_functions;
  __isset = other56.__isset;
}
SDataFullSyncPacket& SDataFullSyncPacket::operator=(const SDataFullSyncPacket& other57) {
  typedefs = other57.typedefs;
  classes = other57.classes;
  structures = other57.structures;
  enums = other57.enums;
  signatures = other57.signatures;
  functions = other57.functions;
  removed_datatypes = other57.removed_datatypes;
  removed_functions = other57.removed_functions;
  __isset = other57.__isset;
  return *this;
}
void SDataFullSyncPacket::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SDataFullSyncPacket(";
  out << "typedefs=" << to_string(typedefs);
  out << ", " << "classes=" << to_string(classes);
  out << ", " << "structures=" << to_string(structures);
  out << ", " << "enums=" << to_string(enums);
  out << ", " << "signatures=" << to_string(signatures);
  out << ", " << "functions=" << to_string(functions);
  out << ", " << "removed_datatypes=" << to_string(removed_datatypes);
  out << ", " << "removed_functions=" << to_string(removed_functions);
  out << ")";
}

}} // namespace
