/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package sda.ghidra.packet;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2020-05-18")
public class SDataFullSyncPacket implements org.apache.thrift.TBase<SDataFullSyncPacket, SDataFullSyncPacket._Fields>, java.io.Serializable, Cloneable, Comparable<SDataFullSyncPacket> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SDataFullSyncPacket");

  private static final org.apache.thrift.protocol.TField TYPEDEFS_FIELD_DESC = new org.apache.thrift.protocol.TField("typedefs", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField CLASSES_FIELD_DESC = new org.apache.thrift.protocol.TField("classes", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField STRUCTURES_FIELD_DESC = new org.apache.thrift.protocol.TField("structures", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField ENUMS_FIELD_DESC = new org.apache.thrift.protocol.TField("enums", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField FUNCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("functions", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SDataFullSyncPacketStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SDataFullSyncPacketTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<sda.ghidra.datatype.SDataTypeTypedef> typedefs; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<sda.ghidra.datatype.SDataTypeClass> classes; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<sda.ghidra.datatype.SDataTypeStructure> structures; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<sda.ghidra.datatype.SDataTypeEnum> enums; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<sda.ghidra.function.SFunction> functions; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPEDEFS((short)1, "typedefs"),
    CLASSES((short)2, "classes"),
    STRUCTURES((short)3, "structures"),
    ENUMS((short)4, "enums"),
    FUNCTIONS((short)5, "functions");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPEDEFS
          return TYPEDEFS;
        case 2: // CLASSES
          return CLASSES;
        case 3: // STRUCTURES
          return STRUCTURES;
        case 4: // ENUMS
          return ENUMS;
        case 5: // FUNCTIONS
          return FUNCTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPEDEFS, new org.apache.thrift.meta_data.FieldMetaData("typedefs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, sda.ghidra.datatype.SDataTypeTypedef.class))));
    tmpMap.put(_Fields.CLASSES, new org.apache.thrift.meta_data.FieldMetaData("classes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, sda.ghidra.datatype.SDataTypeClass.class))));
    tmpMap.put(_Fields.STRUCTURES, new org.apache.thrift.meta_data.FieldMetaData("structures", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, sda.ghidra.datatype.SDataTypeStructure.class))));
    tmpMap.put(_Fields.ENUMS, new org.apache.thrift.meta_data.FieldMetaData("enums", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, sda.ghidra.datatype.SDataTypeEnum.class))));
    tmpMap.put(_Fields.FUNCTIONS, new org.apache.thrift.meta_data.FieldMetaData("functions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, sda.ghidra.function.SFunction.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SDataFullSyncPacket.class, metaDataMap);
  }

  public SDataFullSyncPacket() {
  }

  public SDataFullSyncPacket(
    java.util.List<sda.ghidra.datatype.SDataTypeTypedef> typedefs,
    java.util.List<sda.ghidra.datatype.SDataTypeClass> classes,
    java.util.List<sda.ghidra.datatype.SDataTypeStructure> structures,
    java.util.List<sda.ghidra.datatype.SDataTypeEnum> enums,
    java.util.List<sda.ghidra.function.SFunction> functions)
  {
    this();
    this.typedefs = typedefs;
    this.classes = classes;
    this.structures = structures;
    this.enums = enums;
    this.functions = functions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SDataFullSyncPacket(SDataFullSyncPacket other) {
    if (other.isSetTypedefs()) {
      java.util.List<sda.ghidra.datatype.SDataTypeTypedef> __this__typedefs = new java.util.ArrayList<sda.ghidra.datatype.SDataTypeTypedef>(other.typedefs.size());
      for (sda.ghidra.datatype.SDataTypeTypedef other_element : other.typedefs) {
        __this__typedefs.add(new sda.ghidra.datatype.SDataTypeTypedef(other_element));
      }
      this.typedefs = __this__typedefs;
    }
    if (other.isSetClasses()) {
      java.util.List<sda.ghidra.datatype.SDataTypeClass> __this__classes = new java.util.ArrayList<sda.ghidra.datatype.SDataTypeClass>(other.classes.size());
      for (sda.ghidra.datatype.SDataTypeClass other_element : other.classes) {
        __this__classes.add(new sda.ghidra.datatype.SDataTypeClass(other_element));
      }
      this.classes = __this__classes;
    }
    if (other.isSetStructures()) {
      java.util.List<sda.ghidra.datatype.SDataTypeStructure> __this__structures = new java.util.ArrayList<sda.ghidra.datatype.SDataTypeStructure>(other.structures.size());
      for (sda.ghidra.datatype.SDataTypeStructure other_element : other.structures) {
        __this__structures.add(new sda.ghidra.datatype.SDataTypeStructure(other_element));
      }
      this.structures = __this__structures;
    }
    if (other.isSetEnums()) {
      java.util.List<sda.ghidra.datatype.SDataTypeEnum> __this__enums = new java.util.ArrayList<sda.ghidra.datatype.SDataTypeEnum>(other.enums.size());
      for (sda.ghidra.datatype.SDataTypeEnum other_element : other.enums) {
        __this__enums.add(new sda.ghidra.datatype.SDataTypeEnum(other_element));
      }
      this.enums = __this__enums;
    }
    if (other.isSetFunctions()) {
      java.util.List<sda.ghidra.function.SFunction> __this__functions = new java.util.ArrayList<sda.ghidra.function.SFunction>(other.functions.size());
      for (sda.ghidra.function.SFunction other_element : other.functions) {
        __this__functions.add(new sda.ghidra.function.SFunction(other_element));
      }
      this.functions = __this__functions;
    }
  }

  public SDataFullSyncPacket deepCopy() {
    return new SDataFullSyncPacket(this);
  }

  @Override
  public void clear() {
    this.typedefs = null;
    this.classes = null;
    this.structures = null;
    this.enums = null;
    this.functions = null;
  }

  public int getTypedefsSize() {
    return (this.typedefs == null) ? 0 : this.typedefs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<sda.ghidra.datatype.SDataTypeTypedef> getTypedefsIterator() {
    return (this.typedefs == null) ? null : this.typedefs.iterator();
  }

  public void addToTypedefs(sda.ghidra.datatype.SDataTypeTypedef elem) {
    if (this.typedefs == null) {
      this.typedefs = new java.util.ArrayList<sda.ghidra.datatype.SDataTypeTypedef>();
    }
    this.typedefs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<sda.ghidra.datatype.SDataTypeTypedef> getTypedefs() {
    return this.typedefs;
  }

  public SDataFullSyncPacket setTypedefs(@org.apache.thrift.annotation.Nullable java.util.List<sda.ghidra.datatype.SDataTypeTypedef> typedefs) {
    this.typedefs = typedefs;
    return this;
  }

  public void unsetTypedefs() {
    this.typedefs = null;
  }

  /** Returns true if field typedefs is set (has been assigned a value) and false otherwise */
  public boolean isSetTypedefs() {
    return this.typedefs != null;
  }

  public void setTypedefsIsSet(boolean value) {
    if (!value) {
      this.typedefs = null;
    }
  }

  public int getClassesSize() {
    return (this.classes == null) ? 0 : this.classes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<sda.ghidra.datatype.SDataTypeClass> getClassesIterator() {
    return (this.classes == null) ? null : this.classes.iterator();
  }

  public void addToClasses(sda.ghidra.datatype.SDataTypeClass elem) {
    if (this.classes == null) {
      this.classes = new java.util.ArrayList<sda.ghidra.datatype.SDataTypeClass>();
    }
    this.classes.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<sda.ghidra.datatype.SDataTypeClass> getClasses() {
    return this.classes;
  }

  public SDataFullSyncPacket setClasses(@org.apache.thrift.annotation.Nullable java.util.List<sda.ghidra.datatype.SDataTypeClass> classes) {
    this.classes = classes;
    return this;
  }

  public void unsetClasses() {
    this.classes = null;
  }

  /** Returns true if field classes is set (has been assigned a value) and false otherwise */
  public boolean isSetClasses() {
    return this.classes != null;
  }

  public void setClassesIsSet(boolean value) {
    if (!value) {
      this.classes = null;
    }
  }

  public int getStructuresSize() {
    return (this.structures == null) ? 0 : this.structures.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<sda.ghidra.datatype.SDataTypeStructure> getStructuresIterator() {
    return (this.structures == null) ? null : this.structures.iterator();
  }

  public void addToStructures(sda.ghidra.datatype.SDataTypeStructure elem) {
    if (this.structures == null) {
      this.structures = new java.util.ArrayList<sda.ghidra.datatype.SDataTypeStructure>();
    }
    this.structures.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<sda.ghidra.datatype.SDataTypeStructure> getStructures() {
    return this.structures;
  }

  public SDataFullSyncPacket setStructures(@org.apache.thrift.annotation.Nullable java.util.List<sda.ghidra.datatype.SDataTypeStructure> structures) {
    this.structures = structures;
    return this;
  }

  public void unsetStructures() {
    this.structures = null;
  }

  /** Returns true if field structures is set (has been assigned a value) and false otherwise */
  public boolean isSetStructures() {
    return this.structures != null;
  }

  public void setStructuresIsSet(boolean value) {
    if (!value) {
      this.structures = null;
    }
  }

  public int getEnumsSize() {
    return (this.enums == null) ? 0 : this.enums.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<sda.ghidra.datatype.SDataTypeEnum> getEnumsIterator() {
    return (this.enums == null) ? null : this.enums.iterator();
  }

  public void addToEnums(sda.ghidra.datatype.SDataTypeEnum elem) {
    if (this.enums == null) {
      this.enums = new java.util.ArrayList<sda.ghidra.datatype.SDataTypeEnum>();
    }
    this.enums.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<sda.ghidra.datatype.SDataTypeEnum> getEnums() {
    return this.enums;
  }

  public SDataFullSyncPacket setEnums(@org.apache.thrift.annotation.Nullable java.util.List<sda.ghidra.datatype.SDataTypeEnum> enums) {
    this.enums = enums;
    return this;
  }

  public void unsetEnums() {
    this.enums = null;
  }

  /** Returns true if field enums is set (has been assigned a value) and false otherwise */
  public boolean isSetEnums() {
    return this.enums != null;
  }

  public void setEnumsIsSet(boolean value) {
    if (!value) {
      this.enums = null;
    }
  }

  public int getFunctionsSize() {
    return (this.functions == null) ? 0 : this.functions.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<sda.ghidra.function.SFunction> getFunctionsIterator() {
    return (this.functions == null) ? null : this.functions.iterator();
  }

  public void addToFunctions(sda.ghidra.function.SFunction elem) {
    if (this.functions == null) {
      this.functions = new java.util.ArrayList<sda.ghidra.function.SFunction>();
    }
    this.functions.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<sda.ghidra.function.SFunction> getFunctions() {
    return this.functions;
  }

  public SDataFullSyncPacket setFunctions(@org.apache.thrift.annotation.Nullable java.util.List<sda.ghidra.function.SFunction> functions) {
    this.functions = functions;
    return this;
  }

  public void unsetFunctions() {
    this.functions = null;
  }

  /** Returns true if field functions is set (has been assigned a value) and false otherwise */
  public boolean isSetFunctions() {
    return this.functions != null;
  }

  public void setFunctionsIsSet(boolean value) {
    if (!value) {
      this.functions = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TYPEDEFS:
      if (value == null) {
        unsetTypedefs();
      } else {
        setTypedefs((java.util.List<sda.ghidra.datatype.SDataTypeTypedef>)value);
      }
      break;

    case CLASSES:
      if (value == null) {
        unsetClasses();
      } else {
        setClasses((java.util.List<sda.ghidra.datatype.SDataTypeClass>)value);
      }
      break;

    case STRUCTURES:
      if (value == null) {
        unsetStructures();
      } else {
        setStructures((java.util.List<sda.ghidra.datatype.SDataTypeStructure>)value);
      }
      break;

    case ENUMS:
      if (value == null) {
        unsetEnums();
      } else {
        setEnums((java.util.List<sda.ghidra.datatype.SDataTypeEnum>)value);
      }
      break;

    case FUNCTIONS:
      if (value == null) {
        unsetFunctions();
      } else {
        setFunctions((java.util.List<sda.ghidra.function.SFunction>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPEDEFS:
      return getTypedefs();

    case CLASSES:
      return getClasses();

    case STRUCTURES:
      return getStructures();

    case ENUMS:
      return getEnums();

    case FUNCTIONS:
      return getFunctions();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TYPEDEFS:
      return isSetTypedefs();
    case CLASSES:
      return isSetClasses();
    case STRUCTURES:
      return isSetStructures();
    case ENUMS:
      return isSetEnums();
    case FUNCTIONS:
      return isSetFunctions();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SDataFullSyncPacket)
      return this.equals((SDataFullSyncPacket)that);
    return false;
  }

  public boolean equals(SDataFullSyncPacket that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_typedefs = true && this.isSetTypedefs();
    boolean that_present_typedefs = true && that.isSetTypedefs();
    if (this_present_typedefs || that_present_typedefs) {
      if (!(this_present_typedefs && that_present_typedefs))
        return false;
      if (!this.typedefs.equals(that.typedefs))
        return false;
    }

    boolean this_present_classes = true && this.isSetClasses();
    boolean that_present_classes = true && that.isSetClasses();
    if (this_present_classes || that_present_classes) {
      if (!(this_present_classes && that_present_classes))
        return false;
      if (!this.classes.equals(that.classes))
        return false;
    }

    boolean this_present_structures = true && this.isSetStructures();
    boolean that_present_structures = true && that.isSetStructures();
    if (this_present_structures || that_present_structures) {
      if (!(this_present_structures && that_present_structures))
        return false;
      if (!this.structures.equals(that.structures))
        return false;
    }

    boolean this_present_enums = true && this.isSetEnums();
    boolean that_present_enums = true && that.isSetEnums();
    if (this_present_enums || that_present_enums) {
      if (!(this_present_enums && that_present_enums))
        return false;
      if (!this.enums.equals(that.enums))
        return false;
    }

    boolean this_present_functions = true && this.isSetFunctions();
    boolean that_present_functions = true && that.isSetFunctions();
    if (this_present_functions || that_present_functions) {
      if (!(this_present_functions && that_present_functions))
        return false;
      if (!this.functions.equals(that.functions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTypedefs()) ? 131071 : 524287);
    if (isSetTypedefs())
      hashCode = hashCode * 8191 + typedefs.hashCode();

    hashCode = hashCode * 8191 + ((isSetClasses()) ? 131071 : 524287);
    if (isSetClasses())
      hashCode = hashCode * 8191 + classes.hashCode();

    hashCode = hashCode * 8191 + ((isSetStructures()) ? 131071 : 524287);
    if (isSetStructures())
      hashCode = hashCode * 8191 + structures.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnums()) ? 131071 : 524287);
    if (isSetEnums())
      hashCode = hashCode * 8191 + enums.hashCode();

    hashCode = hashCode * 8191 + ((isSetFunctions()) ? 131071 : 524287);
    if (isSetFunctions())
      hashCode = hashCode * 8191 + functions.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SDataFullSyncPacket other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTypedefs()).compareTo(other.isSetTypedefs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypedefs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typedefs, other.typedefs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClasses()).compareTo(other.isSetClasses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClasses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classes, other.classes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStructures()).compareTo(other.isSetStructures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStructures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structures, other.structures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnums()).compareTo(other.isSetEnums());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnums()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enums, other.enums);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFunctions()).compareTo(other.isSetFunctions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunctions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.functions, other.functions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SDataFullSyncPacket(");
    boolean first = true;

    sb.append("typedefs:");
    if (this.typedefs == null) {
      sb.append("null");
    } else {
      sb.append(this.typedefs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("classes:");
    if (this.classes == null) {
      sb.append("null");
    } else {
      sb.append(this.classes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("structures:");
    if (this.structures == null) {
      sb.append("null");
    } else {
      sb.append(this.structures);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("enums:");
    if (this.enums == null) {
      sb.append("null");
    } else {
      sb.append(this.enums);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("functions:");
    if (this.functions == null) {
      sb.append("null");
    } else {
      sb.append(this.functions);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SDataFullSyncPacketStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SDataFullSyncPacketStandardScheme getScheme() {
      return new SDataFullSyncPacketStandardScheme();
    }
  }

  private static class SDataFullSyncPacketStandardScheme extends org.apache.thrift.scheme.StandardScheme<SDataFullSyncPacket> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SDataFullSyncPacket struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPEDEFS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.typedefs = new java.util.ArrayList<sda.ghidra.datatype.SDataTypeTypedef>(_list8.size);
                @org.apache.thrift.annotation.Nullable sda.ghidra.datatype.SDataTypeTypedef _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new sda.ghidra.datatype.SDataTypeTypedef();
                  _elem9.read(iprot);
                  struct.typedefs.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setTypedefsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLASSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.classes = new java.util.ArrayList<sda.ghidra.datatype.SDataTypeClass>(_list11.size);
                @org.apache.thrift.annotation.Nullable sda.ghidra.datatype.SDataTypeClass _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = new sda.ghidra.datatype.SDataTypeClass();
                  _elem12.read(iprot);
                  struct.classes.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setClassesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STRUCTURES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                struct.structures = new java.util.ArrayList<sda.ghidra.datatype.SDataTypeStructure>(_list14.size);
                @org.apache.thrift.annotation.Nullable sda.ghidra.datatype.SDataTypeStructure _elem15;
                for (int _i16 = 0; _i16 < _list14.size; ++_i16)
                {
                  _elem15 = new sda.ghidra.datatype.SDataTypeStructure();
                  _elem15.read(iprot);
                  struct.structures.add(_elem15);
                }
                iprot.readListEnd();
              }
              struct.setStructuresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENUMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list17 = iprot.readListBegin();
                struct.enums = new java.util.ArrayList<sda.ghidra.datatype.SDataTypeEnum>(_list17.size);
                @org.apache.thrift.annotation.Nullable sda.ghidra.datatype.SDataTypeEnum _elem18;
                for (int _i19 = 0; _i19 < _list17.size; ++_i19)
                {
                  _elem18 = new sda.ghidra.datatype.SDataTypeEnum();
                  _elem18.read(iprot);
                  struct.enums.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setEnumsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FUNCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                struct.functions = new java.util.ArrayList<sda.ghidra.function.SFunction>(_list20.size);
                @org.apache.thrift.annotation.Nullable sda.ghidra.function.SFunction _elem21;
                for (int _i22 = 0; _i22 < _list20.size; ++_i22)
                {
                  _elem21 = new sda.ghidra.function.SFunction();
                  _elem21.read(iprot);
                  struct.functions.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setFunctionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SDataFullSyncPacket struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.typedefs != null) {
        oprot.writeFieldBegin(TYPEDEFS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.typedefs.size()));
          for (sda.ghidra.datatype.SDataTypeTypedef _iter23 : struct.typedefs)
          {
            _iter23.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.classes != null) {
        oprot.writeFieldBegin(CLASSES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.classes.size()));
          for (sda.ghidra.datatype.SDataTypeClass _iter24 : struct.classes)
          {
            _iter24.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.structures != null) {
        oprot.writeFieldBegin(STRUCTURES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.structures.size()));
          for (sda.ghidra.datatype.SDataTypeStructure _iter25 : struct.structures)
          {
            _iter25.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.enums != null) {
        oprot.writeFieldBegin(ENUMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.enums.size()));
          for (sda.ghidra.datatype.SDataTypeEnum _iter26 : struct.enums)
          {
            _iter26.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.functions != null) {
        oprot.writeFieldBegin(FUNCTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.functions.size()));
          for (sda.ghidra.function.SFunction _iter27 : struct.functions)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SDataFullSyncPacketTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SDataFullSyncPacketTupleScheme getScheme() {
      return new SDataFullSyncPacketTupleScheme();
    }
  }

  private static class SDataFullSyncPacketTupleScheme extends org.apache.thrift.scheme.TupleScheme<SDataFullSyncPacket> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SDataFullSyncPacket struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTypedefs()) {
        optionals.set(0);
      }
      if (struct.isSetClasses()) {
        optionals.set(1);
      }
      if (struct.isSetStructures()) {
        optionals.set(2);
      }
      if (struct.isSetEnums()) {
        optionals.set(3);
      }
      if (struct.isSetFunctions()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTypedefs()) {
        {
          oprot.writeI32(struct.typedefs.size());
          for (sda.ghidra.datatype.SDataTypeTypedef _iter28 : struct.typedefs)
          {
            _iter28.write(oprot);
          }
        }
      }
      if (struct.isSetClasses()) {
        {
          oprot.writeI32(struct.classes.size());
          for (sda.ghidra.datatype.SDataTypeClass _iter29 : struct.classes)
          {
            _iter29.write(oprot);
          }
        }
      }
      if (struct.isSetStructures()) {
        {
          oprot.writeI32(struct.structures.size());
          for (sda.ghidra.datatype.SDataTypeStructure _iter30 : struct.structures)
          {
            _iter30.write(oprot);
          }
        }
      }
      if (struct.isSetEnums()) {
        {
          oprot.writeI32(struct.enums.size());
          for (sda.ghidra.datatype.SDataTypeEnum _iter31 : struct.enums)
          {
            _iter31.write(oprot);
          }
        }
      }
      if (struct.isSetFunctions()) {
        {
          oprot.writeI32(struct.functions.size());
          for (sda.ghidra.function.SFunction _iter32 : struct.functions)
          {
            _iter32.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SDataFullSyncPacket struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.typedefs = new java.util.ArrayList<sda.ghidra.datatype.SDataTypeTypedef>(_list33.size);
          @org.apache.thrift.annotation.Nullable sda.ghidra.datatype.SDataTypeTypedef _elem34;
          for (int _i35 = 0; _i35 < _list33.size; ++_i35)
          {
            _elem34 = new sda.ghidra.datatype.SDataTypeTypedef();
            _elem34.read(iprot);
            struct.typedefs.add(_elem34);
          }
        }
        struct.setTypedefsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list36 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.classes = new java.util.ArrayList<sda.ghidra.datatype.SDataTypeClass>(_list36.size);
          @org.apache.thrift.annotation.Nullable sda.ghidra.datatype.SDataTypeClass _elem37;
          for (int _i38 = 0; _i38 < _list36.size; ++_i38)
          {
            _elem37 = new sda.ghidra.datatype.SDataTypeClass();
            _elem37.read(iprot);
            struct.classes.add(_elem37);
          }
        }
        struct.setClassesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.structures = new java.util.ArrayList<sda.ghidra.datatype.SDataTypeStructure>(_list39.size);
          @org.apache.thrift.annotation.Nullable sda.ghidra.datatype.SDataTypeStructure _elem40;
          for (int _i41 = 0; _i41 < _list39.size; ++_i41)
          {
            _elem40 = new sda.ghidra.datatype.SDataTypeStructure();
            _elem40.read(iprot);
            struct.structures.add(_elem40);
          }
        }
        struct.setStructuresIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.enums = new java.util.ArrayList<sda.ghidra.datatype.SDataTypeEnum>(_list42.size);
          @org.apache.thrift.annotation.Nullable sda.ghidra.datatype.SDataTypeEnum _elem43;
          for (int _i44 = 0; _i44 < _list42.size; ++_i44)
          {
            _elem43 = new sda.ghidra.datatype.SDataTypeEnum();
            _elem43.read(iprot);
            struct.enums.add(_elem43);
          }
        }
        struct.setEnumsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.functions = new java.util.ArrayList<sda.ghidra.function.SFunction>(_list45.size);
          @org.apache.thrift.annotation.Nullable sda.ghidra.function.SFunction _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new sda.ghidra.function.SFunction();
            _elem46.read(iprot);
            struct.functions.add(_elem46);
          }
        }
        struct.setFunctionsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

