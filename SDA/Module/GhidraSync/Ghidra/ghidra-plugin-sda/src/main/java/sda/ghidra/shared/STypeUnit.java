/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package sda.ghidra.shared;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2020-01-08")
public class STypeUnit implements org.apache.thrift.TBase<STypeUnit, STypeUnit._Fields>, java.io.Serializable, Cloneable, Comparable<STypeUnit> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("STypeUnit");

  private static final org.apache.thrift.protocol.TField TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("typeId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField POINTER_LVL_FIELD_DESC = new org.apache.thrift.protocol.TField("pointerLvl", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ARRAY_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("arraySize", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new STypeUnitStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new STypeUnitTupleSchemeFactory();

  public long typeId; // required
  public int pointerLvl; // required
  public int arraySize; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPE_ID((short)1, "typeId"),
    POINTER_LVL((short)2, "pointerLvl"),
    ARRAY_SIZE((short)3, "arraySize");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE_ID
          return TYPE_ID;
        case 2: // POINTER_LVL
          return POINTER_LVL;
        case 3: // ARRAY_SIZE
          return ARRAY_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TYPEID_ISSET_ID = 0;
  private static final int __POINTERLVL_ISSET_ID = 1;
  private static final int __ARRAYSIZE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("typeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Id")));
    tmpMap.put(_Fields.POINTER_LVL, new org.apache.thrift.meta_data.FieldMetaData("pointerLvl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ARRAY_SIZE, new org.apache.thrift.meta_data.FieldMetaData("arraySize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(STypeUnit.class, metaDataMap);
  }

  public STypeUnit() {
  }

  public STypeUnit(
    long typeId,
    int pointerLvl,
    int arraySize)
  {
    this();
    this.typeId = typeId;
    setTypeIdIsSet(true);
    this.pointerLvl = pointerLvl;
    setPointerLvlIsSet(true);
    this.arraySize = arraySize;
    setArraySizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public STypeUnit(STypeUnit other) {
    __isset_bitfield = other.__isset_bitfield;
    this.typeId = other.typeId;
    this.pointerLvl = other.pointerLvl;
    this.arraySize = other.arraySize;
  }

  public STypeUnit deepCopy() {
    return new STypeUnit(this);
  }

  @Override
  public void clear() {
    setTypeIdIsSet(false);
    this.typeId = 0;
    setPointerLvlIsSet(false);
    this.pointerLvl = 0;
    setArraySizeIsSet(false);
    this.arraySize = 0;
  }

  public long getTypeId() {
    return this.typeId;
  }

  public STypeUnit setTypeId(long typeId) {
    this.typeId = typeId;
    setTypeIdIsSet(true);
    return this;
  }

  public void unsetTypeId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPEID_ISSET_ID);
  }

  /** Returns true if field typeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTypeId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPEID_ISSET_ID);
  }

  public void setTypeIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPEID_ISSET_ID, value);
  }

  public int getPointerLvl() {
    return this.pointerLvl;
  }

  public STypeUnit setPointerLvl(int pointerLvl) {
    this.pointerLvl = pointerLvl;
    setPointerLvlIsSet(true);
    return this;
  }

  public void unsetPointerLvl() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POINTERLVL_ISSET_ID);
  }

  /** Returns true if field pointerLvl is set (has been assigned a value) and false otherwise */
  public boolean isSetPointerLvl() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POINTERLVL_ISSET_ID);
  }

  public void setPointerLvlIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POINTERLVL_ISSET_ID, value);
  }

  public int getArraySize() {
    return this.arraySize;
  }

  public STypeUnit setArraySize(int arraySize) {
    this.arraySize = arraySize;
    setArraySizeIsSet(true);
    return this;
  }

  public void unsetArraySize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ARRAYSIZE_ISSET_ID);
  }

  /** Returns true if field arraySize is set (has been assigned a value) and false otherwise */
  public boolean isSetArraySize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ARRAYSIZE_ISSET_ID);
  }

  public void setArraySizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ARRAYSIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TYPE_ID:
      if (value == null) {
        unsetTypeId();
      } else {
        setTypeId((java.lang.Long)value);
      }
      break;

    case POINTER_LVL:
      if (value == null) {
        unsetPointerLvl();
      } else {
        setPointerLvl((java.lang.Integer)value);
      }
      break;

    case ARRAY_SIZE:
      if (value == null) {
        unsetArraySize();
      } else {
        setArraySize((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE_ID:
      return getTypeId();

    case POINTER_LVL:
      return getPointerLvl();

    case ARRAY_SIZE:
      return getArraySize();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TYPE_ID:
      return isSetTypeId();
    case POINTER_LVL:
      return isSetPointerLvl();
    case ARRAY_SIZE:
      return isSetArraySize();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof STypeUnit)
      return this.equals((STypeUnit)that);
    return false;
  }

  public boolean equals(STypeUnit that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_typeId = true;
    boolean that_present_typeId = true;
    if (this_present_typeId || that_present_typeId) {
      if (!(this_present_typeId && that_present_typeId))
        return false;
      if (this.typeId != that.typeId)
        return false;
    }

    boolean this_present_pointerLvl = true;
    boolean that_present_pointerLvl = true;
    if (this_present_pointerLvl || that_present_pointerLvl) {
      if (!(this_present_pointerLvl && that_present_pointerLvl))
        return false;
      if (this.pointerLvl != that.pointerLvl)
        return false;
    }

    boolean this_present_arraySize = true;
    boolean that_present_arraySize = true;
    if (this_present_arraySize || that_present_arraySize) {
      if (!(this_present_arraySize && that_present_arraySize))
        return false;
      if (this.arraySize != that.arraySize)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(typeId);

    hashCode = hashCode * 8191 + pointerLvl;

    hashCode = hashCode * 8191 + arraySize;

    return hashCode;
  }

  @Override
  public int compareTo(STypeUnit other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTypeId()).compareTo(other.isSetTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeId, other.typeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPointerLvl()).compareTo(other.isSetPointerLvl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointerLvl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointerLvl, other.pointerLvl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetArraySize()).compareTo(other.isSetArraySize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArraySize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arraySize, other.arraySize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("STypeUnit(");
    boolean first = true;

    sb.append("typeId:");
    sb.append(this.typeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pointerLvl:");
    sb.append(this.pointerLvl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("arraySize:");
    sb.append(this.arraySize);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class STypeUnitStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public STypeUnitStandardScheme getScheme() {
      return new STypeUnitStandardScheme();
    }
  }

  private static class STypeUnitStandardScheme extends org.apache.thrift.scheme.StandardScheme<STypeUnit> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, STypeUnit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.typeId = iprot.readI64();
              struct.setTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POINTER_LVL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pointerLvl = iprot.readI32();
              struct.setPointerLvlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ARRAY_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.arraySize = iprot.readI32();
              struct.setArraySizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, STypeUnit struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TYPE_ID_FIELD_DESC);
      oprot.writeI64(struct.typeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POINTER_LVL_FIELD_DESC);
      oprot.writeI32(struct.pointerLvl);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ARRAY_SIZE_FIELD_DESC);
      oprot.writeI32(struct.arraySize);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class STypeUnitTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public STypeUnitTupleScheme getScheme() {
      return new STypeUnitTupleScheme();
    }
  }

  private static class STypeUnitTupleScheme extends org.apache.thrift.scheme.TupleScheme<STypeUnit> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, STypeUnit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTypeId()) {
        optionals.set(0);
      }
      if (struct.isSetPointerLvl()) {
        optionals.set(1);
      }
      if (struct.isSetArraySize()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTypeId()) {
        oprot.writeI64(struct.typeId);
      }
      if (struct.isSetPointerLvl()) {
        oprot.writeI32(struct.pointerLvl);
      }
      if (struct.isSetArraySize()) {
        oprot.writeI32(struct.arraySize);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, STypeUnit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.typeId = iprot.readI64();
        struct.setTypeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pointerLvl = iprot.readI32();
        struct.setPointerLvlIsSet(true);
      }
      if (incoming.get(2)) {
        struct.arraySize = iprot.readI32();
        struct.setArraySizeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

