#pragma once



#include "../IGameNativeGroup.h"


namespace SE {
	class ENTITY : public IGameNativeGroup<ENTITY>
	{
	public:
		static GameNative<BOOL(Entity entity), 0x7239B21A38F536BA> DOES_ENTITY_EXIST;
		static GameNative<BOOL(Entity entity, BOOL p2), 0xDDE6DF5AE89981D2> DOES_ENTITY_BELONG_TO_THIS_SCRIPT;
		static GameNative<BOOL(Entity entity), 0x060D6E96F8B8E48D> DOES_ENTITY_HAVE_DRAWABLE;
		static GameNative<BOOL(Entity entity), 0xDA95EA3317CC5064> DOES_ENTITY_HAVE_PHYSICS;
		static GameNative<BOOL(Entity entity, const char* animDict, const char* animName, int p3), 0x20B711662962B472> HAS_ENTITY_ANIM_FINISHED;
		static GameNative<BOOL(Entity entity), 0x95EB9964FF5C5C65> HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT;
		static GameNative<BOOL(Entity entity), 0x605F5A140F202491> HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED;
		static GameNative<BOOL(Entity entity), 0xDFD5033FDBA0A9C8> HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE;
		static GameNative<BOOL(Entity entity1, Entity entity2, BOOL p2), 0xC86D67D52A707CF8> HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY;
		static GameNative<BOOL(Entity entity1, Entity entity2, int traceType), 0xFCDFF7B72D23A1AC> HAS_ENTITY_CLEAR_LOS_TO_ENTITY;
		static GameNative<BOOL(Entity entity1, Entity entity2), 0x0267D00AF114F17A> HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT;
		static GameNative<BOOL(Entity entity), 0x8BAD02F0368D9E14> HAS_ENTITY_COLLIDED_WITH_ANYTHING;
		static GameNative<Hash(Entity entity), 0x5C3D0A935F535C4C> GET_LAST_MATERIAL_HIT_BY_ENTITY;
		static GameNative<Vector3(Entity entity), 0xE465D4AB7CA6AE72> GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY;
		static GameNative<void(Entity entity), 0x40FDEDB72F8293B2> FORCE_ENTITY_AI_AND_ANIMATION_UPDATE;
		static GameNative<float(Entity entity, const char* animDict, const char* animName), 0x346D81500D088F42> GET_ENTITY_ANIM_CURRENT_TIME;
		static GameNative<float(Entity entity, const char* animDict, const char* animName), 0x50BD2730B191E360> GET_ENTITY_ANIM_TOTAL_TIME;
		static GameNative<float(const char* animDict, const char* animName), 0xFEDDF04D62B8D790> _GET_ANIM_DURATION;
		static GameNative<Entity(Entity entity), 0x48C2BED9180FE123> GET_ENTITY_ATTACHED_TO;
		static GameNative<Vector3(Entity entity, BOOL alive), 0x3FEF770D40960D5A> GET_ENTITY_COORDS;
		static GameNative<Vector3(Entity entity), 0x0A794A5A57F8DF91> GET_ENTITY_FORWARD_VECTOR;
		static GameNative<float(Entity entity), 0x8BB4EF4214E0E6D5> GET_ENTITY_FORWARD_X;
		static GameNative<float(Entity entity), 0x866A4A5FAE349510> GET_ENTITY_FORWARD_Y;
		static GameNative<float(Entity entity), 0xE83D4F9BA2A38914> GET_ENTITY_HEADING;
		static GameNative<float(Entity entity), 0x846BF6291198A71E> _GET_ENTITY_PHYSICS_HEADING;
		static GameNative<int(Entity entity), 0xEEF059FAD016D209> GET_ENTITY_HEALTH;
		static GameNative<int(Entity entity), 0x15D757606D170C3C> GET_ENTITY_MAX_HEALTH;
		static GameNative<void(Entity entity, int value), 0x166E7CF68597D8B5> SET_ENTITY_MAX_HEALTH;
		static GameNative<float(Entity entity, float X, float Y, float Z, BOOL atTop, BOOL inWorldCoords), 0x5A504562485944DD> GET_ENTITY_HEIGHT;
		static GameNative<float(Entity entity), 0x1DD55701034110E5> GET_ENTITY_HEIGHT_ABOVE_GROUND;
		static GameNative<void(Entity entity, Vector3* rightVector, Vector3* forwardVector, Vector3* upVector, Vector3* position), 0xECB2FC7235A7D137> GET_ENTITY_MATRIX;
		static GameNative<Hash(Entity entity), 0x9F47B058362C84B5> GET_ENTITY_MODEL;
		static GameNative<Vector3(Entity entity, float posX, float posY, float posZ), 0x2274BC1C4885E333> GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS;
		static GameNative<Vector3(Entity entity, float offsetX, float offsetY, float offsetZ), 0x1899F328B0E12848> GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS;
		static GameNative<float(Entity entity), 0xD45DC2893621E1FE> GET_ENTITY_PITCH;
		static GameNative<void(Entity entity, float* x, float* y, float* z, float* w), 0x7B3703D2D32DFA18> GET_ENTITY_QUATERNION;
		static GameNative<float(Entity entity), 0x831E0242595560DF> GET_ENTITY_ROLL;
		static GameNative<Vector3(Entity entity, int rotationOrder), 0xAFBD61CC738D9EB9> GET_ENTITY_ROTATION;
		static GameNative<Vector3(Entity entity), 0x213B91045D09B983> GET_ENTITY_ROTATION_VELOCITY;
		static GameNative<const char* (Entity entity, ScrHandle* script), 0xA6E9C38DB51D7748> GET_ENTITY_SCRIPT;
		static GameNative<float(Entity entity), 0xD5037BA82E12416F> GET_ENTITY_SPEED;
		static GameNative<Vector3(Entity entity, BOOL relative), 0x9A8D700A51CB7B0D> GET_ENTITY_SPEED_VECTOR;
		static GameNative<float(Entity entity), 0x95EED5A694951F9F> GET_ENTITY_UPRIGHT_VALUE;
		static GameNative<Vector3(Entity entity), 0x4805D2B1D8CF94A9> GET_ENTITY_VELOCITY;
		static GameNative<Object(Entity entity), 0xD7E3B9735C0F89D6> GET_OBJECT_INDEX_FROM_ENTITY_INDEX;
		static GameNative<Ped(Entity entity), 0x04A2A40C73395041> GET_PED_INDEX_FROM_ENTITY_INDEX;
		static GameNative<Vehicle(Entity entity), 0x4B53F92932ADFAC0> GET_VEHICLE_INDEX_FROM_ENTITY_INDEX;
		static GameNative<Vector3(Entity entity, int boneIndex), 0x44A8FCB8ED227738> GET_WORLD_POSITION_OF_ENTITY_BONE;
		static GameNative<Player(Entity entity), 0x7196842CB375CDB3> GET_NEAREST_PLAYER_TO_ENTITY;
		static GameNative<Player(Entity entity, int team), 0x4DC9A62F844D9337> GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM;
		static GameNative<int(Entity entity), 0x8ACD366038D14505> GET_ENTITY_TYPE;
		static GameNative<int(Entity entity), 0xF6F5161F4534EDFF> _GET_ENTITY_POPULATION_TYPE;
		static GameNative<BOOL(int handle), 0x731EC8A916BD11A1> IS_AN_ENTITY;
		static GameNative<BOOL(Entity entity), 0x524AC5ECEA15343E> IS_ENTITY_A_PED;
		static GameNative<BOOL(Entity entity), 0x0A7B270912999B3C> IS_ENTITY_A_MISSION_ENTITY;
		static GameNative<BOOL(Entity entity), 0x6AC7003FA6E5575E> IS_ENTITY_A_VEHICLE;
		static GameNative<BOOL(Player* entity), 0x8D68C8FD0FACA94E> IS_ENTITY_AN_OBJECT;
		static GameNative<BOOL(Entity entity, float xPos, float yPos, float zPos, float xSize, float ySize, float zSize, BOOL p7, BOOL p8, int p9), 0x20B60995556D004F> IS_ENTITY_AT_COORD;
		static GameNative<BOOL(Entity entity1, Entity entity2, float xSize, float ySize, float zSize, BOOL p5, BOOL p6, int p7), 0x751B70C3D034E187> IS_ENTITY_AT_ENTITY;
		static GameNative<BOOL(Entity entity), 0xB346476EF1A64897> IS_ENTITY_ATTACHED;
		static GameNative<BOOL(Entity entity), 0xCF511840CEEDE0CC> IS_ENTITY_ATTACHED_TO_ANY_OBJECT;
		static GameNative<BOOL(Entity entity), 0xB1632E9A5F988D11> IS_ENTITY_ATTACHED_TO_ANY_PED;
		static GameNative<BOOL(Entity entity), 0x26AA915AD89BFB4B> IS_ENTITY_ATTACHED_TO_ANY_VEHICLE;
		static GameNative<BOOL(Entity from, Entity to), 0xEFBE71898A993728> IS_ENTITY_ATTACHED_TO_ENTITY;
		static GameNative<BOOL(Entity entity), 0x5F9532F3B5CC2551> IS_ENTITY_DEAD;
		static GameNative<BOOL(Entity entity), 0x886E37EC497200B6> IS_ENTITY_IN_AIR;
		static GameNative<BOOL(Entity entity, float originX, float originY, float originZ, float edgeX, float edgeY, float edgeZ, float angle, BOOL p8, BOOL p9, Any p10), 0x51210CED3DA1C78A> IS_ENTITY_IN_ANGLED_AREA;
		static GameNative<BOOL(Entity entity, float x1, float y1, float z1, float x2, float y2, float z2, BOOL p7, BOOL p8, Any p9), 0x54736AA40E271165> IS_ENTITY_IN_AREA;
		static GameNative<BOOL(Entity entity, const char* zone), 0xB6463CF6AF527071> IS_ENTITY_IN_ZONE;
		static GameNative<BOOL(Entity entity), 0xCFB0A0D8EDD145A3> IS_ENTITY_IN_WATER;
		static GameNative<float(Entity entity), 0xE81AFC1BC4CC41CE> GET_ENTITY_SUBMERGED_LEVEL;
		static GameNative<void(Entity entity, BOOL toggle), 0x694E00132F2823ED> _SET_USED_BY_PLAYER;
		static GameNative<BOOL(Entity entity), 0xE659E47AF827484B> IS_ENTITY_ON_SCREEN;
		static GameNative<BOOL(Entity entity, const char* animDict, const char* animName, int taskFlag), 0x1F0B79228E461EC9> IS_ENTITY_PLAYING_ANIM;
		static GameNative<BOOL(Entity entity), 0x1218E6886D3D8327> IS_ENTITY_STATIC;
		static GameNative<BOOL(Entity entity, Entity targetEntity), 0x17FFC1B2BA35A494> IS_ENTITY_TOUCHING_ENTITY;
		static GameNative<BOOL(Entity entity, Hash modelHash), 0x0F42323798A58C8C> IS_ENTITY_TOUCHING_MODEL;
		static GameNative<BOOL(Entity entity, float angle), 0x5333F526F6AB19AA> IS_ENTITY_UPRIGHT;
		static GameNative<BOOL(Entity entity), 0x1DBD58820FA61D71> IS_ENTITY_UPSIDEDOWN;
		static GameNative<BOOL(Entity entity), 0x47D6F43D77935C75> IS_ENTITY_VISIBLE;
		static GameNative<BOOL(Entity entity), 0xD796CB5BA8F20E32> IS_ENTITY_VISIBLE_TO_SCRIPT;
		static GameNative<BOOL(Entity entity), 0xE31C2C72B8692B64> IS_ENTITY_OCCLUDED;
		static GameNative<BOOL(Hash entityModelHash, float x, float y, float z, BOOL p4), 0xEE5D2A122E09EC42> WOULD_ENTITY_BE_OCCLUDED;
		static GameNative<BOOL(Entity entity), 0xD05BFF0C0A12C68F> IS_ENTITY_WAITING_FOR_WORLD_COLLISION;
		static GameNative<void(Entity entity, int forceType, float x, float y, float z, BOOL p5, BOOL isDirectionRel, BOOL isForceRel, BOOL p8), 0x18FF00FC7EFF559E> APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS;
		static GameNative<void(Entity entity, int forceFlags, float x, float y, float z, float offX, float offY, float offZ, int boneIndex, BOOL isDirectionRel, BOOL ignoreUpVec, BOOL isForceRel, BOOL p12, BOOL p13), 0xC5F68BE9613E2D18> APPLY_FORCE_TO_ENTITY;
		static GameNative<void(Entity entity1, Entity entity2, int boneIndex, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, BOOL p9, BOOL useSoftPinning, BOOL collision, BOOL isPed, int vertexIndex, BOOL fixedRot), 0x6B9BBD38AB0796DF> ATTACH_ENTITY_TO_ENTITY;
		static GameNative<void(Entity entity1, Entity entity2, int boneIndex1, int boneIndex2, float xPos1, float yPos1, float zPos1, float xPos2, float yPos2, float zPos2, float xRot, float yRot, float zRot, float breakForce, BOOL fixedRot, BOOL p15, BOOL collision, BOOL teleport, int p18), 0xC3675780C92F90F9> ATTACH_ENTITY_TO_ENTITY_PHYSICALLY;
		static GameNative<void(Entity entity), 0xF4080490ADC51C6F> PROCESS_ENTITY_ATTACHMENTS;
		static GameNative<int(Entity entity, const char* boneName), 0xFB71170B7E76ACBA> GET_ENTITY_BONE_INDEX_BY_NAME;
		static GameNative<void(Entity entity), 0xA72CD9CA74A5ECBA> CLEAR_ENTITY_LAST_DAMAGE_ENTITY;
		static GameNative<void(Entity* entity), 0xAE3CBE5BF394C9C9> DELETE_ENTITY;
		static GameNative<void(Entity entity, BOOL p1, BOOL collision), 0x961AC54BF0613F5D> DETACH_ENTITY;
		static GameNative<void(Entity entity, BOOL toggle), 0x428CA6DBD1094446> FREEZE_ENTITY_POSITION;
		static GameNative<void(Entity entity, BOOL toggle), 0x3910051CCECDB00C> _SET_ENTITY_SOMETHING;
		static GameNative<BOOL(Entity entity, const char* animName, const char* animDict, float p3, BOOL loop, BOOL stayInAnim, BOOL p6, float delta, Any bitset), 0x7FB218262B810701> PLAY_ENTITY_ANIM;
		static GameNative<BOOL(Entity entity, int SceneID, const char* animName, const char* animDict, float speed, float speedMult, int flag, float flag2), 0xC77720A12FE14A86> PLAY_SYNCHRONIZED_ENTITY_ANIM;
		static GameNative<BOOL(float posX, float posY, float posZ, float radius, Object prop, int sceneID, const char* animName, const char* animDict, float playbackRate, float unkFlag, BOOL unkBool, float unkFlag2), 0xB9C54555ED30FBC4> PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM;
		static GameNative<BOOL(float posX, float posY, float posZ, float radius, Object object, float playbackRate), 0x11E79CAB7183B6F5> STOP_SYNCHRONIZED_MAP_ENTITY_ANIM;
		static GameNative<Any(Entity entity, const char* animation, const char* animGroup, float p3), 0x28004F88151E03E0> STOP_ENTITY_ANIM;
		static GameNative<BOOL(Entity entity, float p1, BOOL p2), 0x43D3807C077261E3> STOP_SYNCHRONIZED_ENTITY_ANIM;
		static GameNative<BOOL(Entity entity, Hash actionHash), 0xEAF4CD9EA3E7E922> HAS_ANIM_EVENT_FIRED;
		static GameNative<BOOL(const char* animDictionary, const char* animName, const char* p2, Any* p3, Any* p4), 0x07F1BE2BCCAA27A7> FIND_ANIM_EVENT_PHASE;
		static GameNative<void(Entity entity, const char* animDictionary, const char* animName, float time), 0x4487C259F0F70977> SET_ENTITY_ANIM_CURRENT_TIME;
		static GameNative<void(Entity entity, const char* animDictionary, const char* animName, float speedMultiplier), 0x28D1A16553C51776> SET_ENTITY_ANIM_SPEED;
		static GameNative<void(Entity entity, BOOL p1, BOOL p2), 0xAD738C3085FE7E11> SET_ENTITY_AS_MISSION_ENTITY;
		static GameNative<void(Entity* entity), 0xB736A491E64A32CF> SET_ENTITY_AS_NO_LONGER_NEEDED;
		static GameNative<void(Ped* ped), 0x2595DD4236549CE3> SET_PED_AS_NO_LONGER_NEEDED;
		static GameNative<void(Vehicle* vehicle), 0x629BFA74418D6239> SET_VEHICLE_AS_NO_LONGER_NEEDED;
		static GameNative<void(Object* object), 0x3AE22DEB5BA5A3E6> SET_OBJECT_AS_NO_LONGER_NEEDED;
		static GameNative<void(Entity entity, BOOL toggle), 0x1760FFA8AB074D66> SET_ENTITY_CAN_BE_DAMAGED;
		static GameNative<void(Entity entity, BOOL bCanBeDamaged, int relGroup), 0xE22D8FDE858B8119> SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP;
		static GameNative<void(Entity entity, BOOL toggle), 0xD3997889736FD899> SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS;
		static GameNative<void(Entity entity, BOOL toggle, BOOL keepPhysics), 0x1A9205C1B9EE827F> SET_ENTITY_COLLISION;
		static GameNative<BOOL(Entity entity), 0xCCF1E97BEFDAE480> _GET_ENTITY_COLLISON_DISABLED;
		static GameNative<void(Entity entity, BOOL p1, BOOL p2), 0x9EBC85ED0FFFE51C> _SET_ENTITY_COLLISION_2;
		static GameNative<void(Entity entity, float xPos, float yPos, float zPos, BOOL xAxis, BOOL yAxis, BOOL zAxis, BOOL clearArea), 0x06843DA7060A026B> SET_ENTITY_COORDS;
		static GameNative<void(Entity entity, float xPos, float yPos, float zPos, BOOL xAxis, BOOL yAxis, BOOL zAxis, BOOL clearArea), 0x621873ECE1178967> _SET_ENTITY_COORDS_2;
		static GameNative<void(Entity entity, float xPos, float yPos, float zPos, BOOL xAxis, BOOL yAxis, BOOL zAxis), 0x239A3351AC1DA385> SET_ENTITY_COORDS_NO_OFFSET;
		static GameNative<void(Entity entity, BOOL toggle), 0x1718DE8E3F2823CA> SET_ENTITY_DYNAMIC;
		static GameNative<void(Entity entity, float heading), 0x8E2530AA8ADA980E> SET_ENTITY_HEADING;
		static GameNative<void(Entity entity, int health), 0x6B76DC1F3AE6E6A3> SET_ENTITY_HEALTH;
		static GameNative<void(Entity entity, BOOL toggle), 0x3882114BDE571AD4> SET_ENTITY_INVINCIBLE;
		static GameNative<void(Entity entity, BOOL p1, float p2), 0xEA02E132F5C68722> SET_ENTITY_IS_TARGET_PRIORITY;
		static GameNative<void(Entity entity, BOOL toggle), 0x7CFBA6A80BDF3874> SET_ENTITY_LIGHTS;
		static GameNative<void(Entity entity, BOOL toggle), 0x0DC7CABAB1E9B67E> SET_ENTITY_LOAD_COLLISION_FLAG;
		static GameNative<BOOL(Entity entity), 0xE9676F61BC0B3321> HAS_COLLISION_LOADED_AROUND_ENTITY;
		static GameNative<void(Entity entity, float speed), 0x0E46A3FCBDE2A1B1> SET_ENTITY_MAX_SPEED;
		static GameNative<void(Entity entity, BOOL toggle), 0x79F020FF9EDC0748> SET_ENTITY_ONLY_DAMAGED_BY_PLAYER;
		static GameNative<void(Entity entity, BOOL p1, Hash relationshipHash), 0x7022BD828FA0B082> SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP;
		static GameNative<void(Entity entity, BOOL bulletProof, BOOL fireProof, BOOL explosionProof, BOOL collisionProof, BOOL meleeProof, BOOL steamProof, BOOL smokeProof, BOOL drownProof), 0xFAEE099C6F890BB8> SET_ENTITY_PROOFS;
		static GameNative<void(Entity entity, float x, float y, float z, float w), 0x77B21BE7AC540F07> SET_ENTITY_QUATERNION;
		static GameNative<void(Entity entity, BOOL toggle), 0x0A50A1EEDAD01E65> SET_ENTITY_RECORDS_COLLISIONS;
		static GameNative<void(Entity entity, float pitch, float roll, float yaw, int rotationOrder, BOOL p5), 0x8524A8B0171D5E07> SET_ENTITY_ROTATION;
		static GameNative<void(Entity entity, BOOL toggle, BOOL unk), 0xEA1C610A04DB6BBB> SET_ENTITY_VISIBLE;
		static GameNative<void(Entity entity, float x, float y, float z), 0x1C99BB7B6E96D16F> SET_ENTITY_VELOCITY;
		static GameNative<void(Entity entity, BOOL toggle), 0x4A4722448F18EEF5> SET_ENTITY_HAS_GRAVITY;
		static GameNative<void(Entity entity, int value), 0x5927F96A78577363> SET_ENTITY_LOD_DIST;
		static GameNative<int(Entity entity), 0x4159C2762B5791D6> GET_ENTITY_LOD_DIST;
		static GameNative<void(Entity entity, int alphaLevel, BOOL unk), 0x44A0870B7E92D7C0> SET_ENTITY_ALPHA;
		static GameNative<int(Entity entity), 0x5A47B3B5E63E94C6> GET_ENTITY_ALPHA;
		static GameNative<void(Entity entity), 0x9B1E824FFBB7027A> RESET_ENTITY_ALPHA;
		static GameNative<void(Entity entity, float p1), 0x5C3B791D580E0BC2> _0x5C3B791D580E0BC2;
		static GameNative<void(Entity entity, BOOL toggle), 0xACAD101E1FB66689> SET_ENTITY_ALWAYS_PRERENDER;
		static GameNative<void(Entity entity, BOOL toggle), 0x730F5F8D3F0F2050> SET_ENTITY_RENDER_SCORCHED;
		static GameNative<void(Entity entity, int state), 0x57C5DB656185EAC4> SET_ENTITY_TRAFFICLIGHT_OVERRIDE;
		static GameNative<void(Entity entity), 0x78E8E3A640178255> _0x78E8E3A640178255;
		static GameNative<void(float x, float y, float z, float radius, Hash originalModel, Hash newModel, BOOL p6), 0x92C47782FDA8B2A3> CREATE_MODEL_SWAP;
		static GameNative<void(float x, float y, float z, float radius, Hash originalModel, Hash newModel, BOOL p6), 0x033C0F9A64E229AE> REMOVE_MODEL_SWAP;
		static GameNative<void(float x, float y, float z, float radius, Hash model, BOOL p5), 0x8A97BCA30A0CE478> CREATE_MODEL_HIDE;
		static GameNative<void(float x, float y, float z, float radius, Hash model, BOOL p5), 0x3A52AE588830BF7F> CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS;
		static GameNative<void(float x, float y, float z, float radius, Hash model, BOOL p5), 0xD9E3006FB3CBD765> REMOVE_MODEL_HIDE;
		static GameNative<void(float x, float y, float z, Any p3, Hash modelHash, BOOL p5), 0x150E808B375A385A> CREATE_FORCED_OBJECT;
		static GameNative<void(float posX, float posY, float posZ, float unk, Hash modelHash), 0x61B6775E83C0DB6F> REMOVE_FORCED_OBJECT;
		static GameNative<void(Entity entity1, Entity entity2, BOOL unknown), 0xA53ED5520C07654A> SET_ENTITY_NO_COLLISION_ENTITY;
		static GameNative<void(Entity entity, BOOL toggle), 0x295D82A8559F9150> SET_ENTITY_MOTION_BLUR;
		static GameNative<void(Entity entity, BOOL p1), 0xE12ABE5E3A389A6C> _0xE12ABE5E3A389A6C;
		static GameNative<void(Entity entity, BOOL p1), 0xA80AE305E0A3044F> _0xA80AE305E0A3044F;
		static GameNative<void(Entity entity, BOOL p1), 0xDC6F8601FAF2E893> _0xDC6F8601FAF2E893;
		static GameNative<void(Entity entity, BOOL p1), 0x2C2E3DC128F44309> _0x2C2E3DC128F44309;
		static GameNative<void(Entity entity, BOOL p1), 0x1A092BB0C3808B96> _0x1A092BB0C3808B96;
	};
};