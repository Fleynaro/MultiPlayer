#pragma once



#include "../IGameNativeGroup.h"


namespace SE {
	class AI : public IGameNativeGroup<AI>
	{
	public:
		static GameNative<void(Ped ped, int time), 0xE73A266DB0CA9042> TASK_PAUSE;
		static GameNative<void(Ped ped, int time), 0x919BE13EED931959> TASK_STAND_STILL;
		static GameNative<void(Ped ped, BOOL unused), 0x0AE4086104E067B1> TASK_JUMP;
		static GameNative<void(Ped ped, int duration), 0x3EB1FE9E8E908E15> TASK_COWER;
		static GameNative<void(Ped ped, int duration, Ped facingPed, int p3, BOOL p4), 0xF2EAB31979A7F910> TASK_HANDS_UP;
		static GameNative<void(Ped ped, int duration), 0xA98FCAFD7893C834> UPDATE_TASK_HANDS_UP_DURATION;
		static GameNative<void(Ped ped, Vehicle vehicle, int timeOut, int doorIndex, float speed), 0x965791A9A488A062> TASK_OPEN_VEHICLE_DOOR;
		static GameNative<void(Ped ped, Vehicle vehicle, int timeout, int seat, float speed, int flag, Any p6), 0xC20E50AA46D09CA8> TASK_ENTER_VEHICLE;
		static GameNative<void(Ped ped, Vehicle vehicle, int flags), 0xD3DBCE61A490BE02> TASK_LEAVE_VEHICLE;
		static GameNative<void(Ped ped, Vehicle boat), 0x9C00E77AF14B2DFF> _TASK_GET_OFF_BOAT;
		static GameNative<void(Ped ped), 0x601736CFE536B0A0> TASK_SKY_DIVE;
		static GameNative<void(Ped ped, BOOL p1), 0xD2F1C53C97EE81AB> TASK_PARACHUTE;
		static GameNative<void(Ped ped, float x, float y, float z), 0xB33E291AFA6BD03A> TASK_PARACHUTE_TO_TARGET;
		static GameNative<void(Ped ped, float x, float y, float z), 0xC313379AF0FCEDA7> SET_PARACHUTE_TASK_TARGET;
		static GameNative<void(Ped ped, float thrust), 0x0729BAC1B8C64317> SET_PARACHUTE_TASK_THRUST;
		static GameNative<void(Ped ped, int unused), 0x09693B0312F91649> TASK_RAPPEL_FROM_HELI;
		static GameNative<void(Ped ped, Vehicle vehicle, float x, float y, float z, float speed, Any p6, Hash vehicleModel, int drivingMode, float stopRange, float p10), 0xE2A2AA2F659D77A7> TASK_VEHICLE_DRIVE_TO_COORD;
		static GameNative<void(Ped ped, Vehicle vehicle, float x, float y, float z, float speed, int driveMode, float stopRange), 0x158BB33F920D360C> TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE;
		static GameNative<void(Ped ped, Vehicle vehicle, float speed, int drivingStyle), 0x480142959D337D00> TASK_VEHICLE_DRIVE_WANDER;
		static GameNative<void(Ped ped, Entity entity, float offsetX, float offsetY, float offsetZ, float movementSpeed, int timeout, float stoppingRange, BOOL persistFollowing), 0x304AE42E357B8C7E> TASK_FOLLOW_TO_OFFSET_OF_ENTITY;
		static GameNative<void(Ped ped, float x, float y, float z, float speed, int timeout, float targetHeading, float distanceToSlide), 0xD76B57B44F1E6F8B> TASK_GO_STRAIGHT_TO_COORD;
		static GameNative<void(Entity entity1, Entity entity2, float p2, float p3, float p4, float p5, Any p6), 0x61E360B7E040D12E> TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY;
		static GameNative<void(Ped ped, float heading, int timeout), 0x93B93A37987F1F3D> TASK_ACHIEVE_HEADING;
		static GameNative<void(), 0x841142A1376E9006> TASK_FLUSH_ROUTE;
		static GameNative<void(float x, float y, float z), 0x1E7889778264843A> TASK_EXTEND_ROUTE;
		static GameNative<void(Ped ped, float speed, int unknown), 0x595583281858626E> TASK_FOLLOW_POINT_ROUTE;
		static GameNative<void(Entity entity, Entity target, int duration, float distance, float speed, float p5, int p6), 0x6A071245EB0D1882> TASK_GO_TO_ENTITY;
		static GameNative<void(Ped ped, float x, float y, float z, float distance, int time, BOOL p6, BOOL p7), 0x94587F17E9C365D5> TASK_SMART_FLEE_COORD;
		static GameNative<void(Ped ped, Ped fleeTarget, float distance, Any fleeTime, BOOL p4, BOOL p5), 0x22B0D0E37CCB840D> TASK_SMART_FLEE_PED;
		static GameNative<void(Ped ped, Ped fleeTarget), 0x72C896464915D1B1> TASK_REACT_AND_FLEE_PED;
		static GameNative<void(Ped ped, int eventHandle), 0x452419CBD838065B> TASK_SHOCKING_EVENT_REACT;
		static GameNative<void(Ped ped, float x, float y, float z, float radius, float minimalLength, float timeBetweenWalks), 0xE054346CA3A0F315> TASK_WANDER_IN_AREA;
		static GameNative<void(Ped ped, float p1, int p2), 0xBB9CE077274F6A1B> TASK_WANDER_STANDARD;
		static GameNative<void(Ped ped, Vehicle vehicle, float x, float y, float z, float heading, int mode, float radius, BOOL keepEngineOn), 0x0F3E34E968EA374E> TASK_VEHICLE_PARK;
		static GameNative<void(Ped killer, Ped target, Hash actionType, float p3, Any p4), 0xAA5DC05579D60BD9> TASK_STEALTH_KILL;
		static GameNative<void(Ped ped, float x, float y, float z, float heading), 0x965FEC691D55E9BF> TASK_PLANT_BOMB;
		static GameNative<void(Ped ped, float x, float y, float z, float speed, int timeout, float stoppingRange, BOOL persistFollowing, float unk), 0x15D3A79D4E44B913> TASK_FOLLOW_NAV_MESH_TO_COORD;
		static GameNative<void(Ped ped, float x, float y, float z, float speed, int timeout, float unkFloat, int unkInt, float unkX, float unkY, float unkZ, float unk_40000f), 0x17F58B88D085DBAC> TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED;
		static GameNative<void(Ped ped, BOOL Toggle), 0x8E06A6FE76C9EFF4> SET_PED_PATH_CAN_USE_CLIMBOVERS;
		static GameNative<void(Ped ped, BOOL Toggle), 0x77A5B103C87F476E> SET_PED_PATH_CAN_USE_LADDERS;
		static GameNative<void(Ped ped, BOOL Toggle), 0xE361C5C71C431A4F> SET_PED_PATH_CAN_DROP_FROM_HEIGHT;
		static GameNative<void(Ped ped, float p1), 0x88E32DB8C1A4AA4B> _0x88E32DB8C1A4AA4B;
		static GameNative<void(Ped ped, BOOL mayEnterWater), 0xF35425A4204367EC> SET_PED_PATHS_WIDTH_PLANT;
		static GameNative<void(Ped ped, BOOL avoidWater), 0x38FE1EC73743793C> SET_PED_PATH_PREFER_TO_AVOID_WATER;
		static GameNative<void(Ped ped, BOOL avoidFire), 0x4455517B28441E60> SET_PED_PATH_AVOID_FIRE;
		static GameNative<void(float height), 0x6C6B148586F934F7> SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT;
		static GameNative<int(Ped ped, float* distRemaining, BOOL* isPathReady), 0xC6F5C0BCDC74D62D> GET_NAVMESH_ROUTE_DISTANCE_REMAINING;
		static GameNative<int(Ped ped), 0x632E831F382A0FA8> GET_NAVMESH_ROUTE_RESULT;
		static GameNative<BOOL(Ped ped), 0x3E38E28A1D80DDF6> _0x3E38E28A1D80DDF6;
		static GameNative<void(Ped ped, float x, float y, float z, float speed, Any p5, BOOL p6, int walkingStyle, float p8), 0x5BC448CB78FA3E88> TASK_GO_TO_COORD_ANY_MEANS;
		static GameNative<void(Ped ped, float x, float y, float z, float speed, Any p5, BOOL p6, int walkingStyle, float p8, Any p9, Any p10, Any p11), 0x1DD45F9ECFDB1BC9> TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS;
		static GameNative<void(Ped ped, float x, float y, float z, float speed, Any p5, BOOL p6, int walkingStyle, float p8, Any p9, Any p10, Any p11, Any p12), 0xB8ECD61F531A7B02> TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED;
		static GameNative<void(Ped ped, const char* animDictionary, const char* animationName, float speed, float speedMultiplier, int duration, int flag, float playbackRate, BOOL lockX, BOOL lockY, BOOL lockZ), 0xEA47FE3719165B94> TASK_PLAY_ANIM;
		static GameNative<void(Ped ped, const char* animDict, const char* animName, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float speed, float speedMultiplier, int duration, Any flag, float animTime, int p14, int p15), 0x83CDB10EA29B370B> TASK_PLAY_ANIM_ADVANCED;
		static GameNative<void(Ped ped, const char* animDictionary, const char* animationName, float p3), 0x97FF36A1D40EA00A> STOP_ANIM_TASK;
		static GameNative<void(Ped ped, Any* p1, Any* p2, Any* p3, float p4, float p5), 0x126EF75F1E17ABE5> TASK_SCRIPTED_ANIMATION;
		static GameNative<void(Any p0, Any* p1, Any* p2, Any* p3, float p4, float p5), 0x77A1EEC547E7FCF1> PLAY_ENTITY_SCRIPTED_ANIM;
		static GameNative<void(Ped ped, int p1, BOOL p2), 0xEE08C992D238C5D1> STOP_ANIM_PLAYBACK;
		static GameNative<void(Any p0, float p1, Any p2, Any p3, BOOL p4), 0x207F1A47C0342F48> SET_ANIM_WEIGHT;
		static GameNative<void(Any p0, float p1, Any p2, BOOL p3), 0x032D49C5E359C847> SET_ANIM_RATE;
		static GameNative<void(Any p0, BOOL p1, Any p2, BOOL p3), 0x70033C3CC29A1FF4> SET_ANIM_LOOPED;
		static GameNative<void(Ped ped, const char* animDict, const char* animation, const char* boneMaskType, float p4, float p5, BOOL p6, BOOL p7), 0x8FBB6758B3B3E9EC> TASK_PLAY_PHONE_GESTURE_ANIMATION;
		static GameNative<void(Ped ped), 0x3FA00D4F4641BFAE> _TASK_STOP_PHONE_GESTURE_ANIMATION;
		static GameNative<BOOL(Ped ped), 0xB8EBB1E9D3588C10> IS_PLAYING_PHONE_GESTURE_ANIM;
		static GameNative<float(Ped ped), 0x47619ABE8B268C60> GET_PHONE_GESTURE_ANIM_CURRENT_TIME;
		static GameNative<float(Ped ped), 0x1EE0F68A7C25DEC6> GET_PHONE_GESTURE_ANIM_TOTAL_TIME;
		static GameNative<void(Vehicle vehicle, const char* animation_set, const char* animation_name), 0x69F5C3BD0F3EBD89> TASK_VEHICLE_PLAY_ANIM;
		static GameNative<void(Entity entity, float x, float y, float z, float duration, Any p5, Any p6), 0x6FA46612594F7973> TASK_LOOK_AT_COORD;
		static GameNative<void(Ped ped, Entity lookAt, int duration, int unknown1, int unknown2), 0x69F4BE8C8CC4796C> TASK_LOOK_AT_ENTITY;
		static GameNative<void(Ped ped), 0x0F804F1DB19B9689> TASK_CLEAR_LOOK_AT;
		static GameNative<void(Object* taskSequence), 0xE8854A4326B9E12B> OPEN_SEQUENCE_TASK;
		static GameNative<void(Object taskSequence), 0x39E72BC99E6360CB> CLOSE_SEQUENCE_TASK;
		static GameNative<void(Ped ped, Object taskSequence), 0x5ABA3986D90D8A3B> TASK_PERFORM_SEQUENCE;
		static GameNative<void(Object* taskSequence), 0x3841422E9C488D8C> CLEAR_SEQUENCE_TASK;
		static GameNative<void(Object taskSequence, BOOL repeat), 0x58C70CF3A41E4AE7> SET_SEQUENCE_TO_REPEAT;
		static GameNative<int(Ped ped), 0x00A9010CFE1E3533> GET_SEQUENCE_PROGRESS;
		static GameNative<BOOL(Ped ped, int taskNumber), 0xB0760331C7AA4155> GET_IS_TASK_ACTIVE;
		static GameNative<int(Ped targetPed, Hash taskHash), 0x77F1BEB8863288D5> GET_SCRIPT_TASK_STATUS;
		static GameNative<int(Vehicle veh), 0x534AEBA6E5ED4CAB> GET_ACTIVE_VEHICLE_MISSION_TYPE;
		static GameNative<void(Ped ped, int p1, int p2), 0x504D54DF3F6F2247> TASK_LEAVE_ANY_VEHICLE;
		static GameNative<void(Ped ped, Hash scriptTask, BOOL p2, BOOL p3), 0x7A192BE16D373D00> TASK_AIM_GUN_SCRIPTED;
		static GameNative<void(Any p0, Any p1, float p2, float p3, float p4, Any p5, BOOL p6, BOOL p7), 0x8605AF0DE8B3A5AC> TASK_AIM_GUN_SCRIPTED_WITH_TARGET;
		static GameNative<void(Ped p0, Ped p1, float p2, float p3, float p4, BOOL p5), 0x9724FB59A3E72AD0> UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET;
		static GameNative<const char* (int p0), 0x3A8CADC7D37AACC5> GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK;
		static GameNative<void(Ped ped, Entity entity, int duration, BOOL unk), 0x9B53BB6E8943AF53> TASK_AIM_GUN_AT_ENTITY;
		static GameNative<void(Ped ped, Entity entity, int duration), 0x5AD23D40115353AC> TASK_TURN_PED_TO_FACE_ENTITY;
		static GameNative<void(Ped ped, float x, float y, float z, int time, BOOL p5, BOOL p6), 0x6671F3EEC681BDA1> TASK_AIM_GUN_AT_COORD;
		static GameNative<void(Ped ped, float x, float y, float z, int duration, Hash firingPattern), 0x46A6CC01E0826106> TASK_SHOOT_AT_COORD;
		static GameNative<void(Ped ped, Vehicle vehicle), 0x7AA80209BDA643EB> TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT;
		static GameNative<void(Ped ped), 0xE1EF3C1216AFF2CD> CLEAR_PED_TASKS;
		static GameNative<void(Ped ped), 0x176CECF6F920D707> CLEAR_PED_SECONDARY_TASK;
		static GameNative<void(Vehicle vehicle), 0x7F93691AB4B92272> TASK_EVERYONE_LEAVE_VEHICLE;
		static GameNative<void(Ped ped, Any p1, Any p2, float x, float y, float z, int duration), 0xE39B4FF4FDEBDE27> TASK_GOTO_ENTITY_OFFSET;
		static GameNative<void(Ped ped, Entity entity, int duration, float xOffset, float yOffset, float zOffset, float moveBlendRatio, BOOL useNavmesh), 0x338E7EF52B6095A9> TASK_GOTO_ENTITY_OFFSET_XY;
		static GameNative<void(Ped ped, float x, float y, float z, int duration), 0x1DDA930A0AC38571> TASK_TURN_PED_TO_FACE_COORD;
		static GameNative<void(Ped driver, Vehicle vehicle, int action, int time), 0xC429DCEEB339E129> TASK_VEHICLE_TEMP_ACTION;
		static GameNative<void(int p0, int p1, Vehicle veh, Any p3, float p4, Any p5, float p6, float p7, BOOL p8), 0x659427E0EF36BCDE> TASK_VEHICLE_MISSION;
		static GameNative<void(Ped ped, Vehicle vehicle, Ped pedTarget, int mode, float maxSpeed, int drivingStyle, float minDistance, float p7, BOOL p8), 0x9454528DF15D657A> TASK_VEHICLE_MISSION_PED_TARGET;
		static GameNative<void(Ped ped, Vehicle vehicle, float x, float y, float z, int p5, int p6, int p7, float p8, float p9, BOOL p10), 0xF0AF20AA7731F8C3> TASK_VEHICLE_MISSION_COORS_TARGET;
		static GameNative<void(Ped ped, Vehicle vehicle, Vehicle targetVehicle, int mode, float speed, int drivingStyle, float minDistance, int p7, float noRoadsDistance), 0x0FA6E4B75F302400> TASK_VEHICLE_ESCORT;
		static GameNative<void(Ped driver, Vehicle vehicle, Entity targetEntity, float speed, int drivingStyle, int minDistance), 0xFC545A9F0626E3B6> _TASK_VEHICLE_FOLLOW;
		static GameNative<void(Ped driver, Entity targetEnt), 0x3C08A8E30363B353> TASK_VEHICLE_CHASE;
		static GameNative<void(Ped pilot, Vehicle vehicle, Entity entityToFollow, float targetSpeed, int p4, float radius, int altitude, int p7), 0x1E09C32048FEFD1C> TASK_VEHICLE_HELI_PROTECT;
		static GameNative<void(Ped ped, int flag, BOOL set), 0xCC665AAC360D31E7> SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG;
		static GameNative<void(Ped ped, float distance), 0x639B642FACBE4EDD> SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE;
		static GameNative<void(Ped pilot, Entity entityToFollow, float x, float y, float z), 0xAC83B1DB38D0ADA0> TASK_HELI_CHASE;
		static GameNative<void(Ped pilot, Entity entityToFollow, float x, float y, float z), 0x2D2386F273FF7A25> TASK_PLANE_CHASE;
		static GameNative<void(Ped pilot, Vehicle plane, float runwayStartX, float runwayStartY, float runwayStartZ, float runwayEndX, float runwayEndY, float runwayEndZ), 0xBF19721FA34D32C0> TASK_PLANE_LAND;
		static GameNative<void(Ped pilot, Vehicle aircraft, Vehicle targetVehicle, Ped targetPed, float destinationX, float destinationY, float destinationZ, int missionFlag, float maxSpeed, float landingRadius, float targetHeading, int unk1, int unk2, Hash unk3, int landingFlags), 0xDAD029E187A2BEB4> TASK_HELI_MISSION;
		static GameNative<void(Ped pilot, Vehicle aircraft, Vehicle targetVehicle, Ped targetPed, float destinationX, float destinationY, float destinationZ, int missionFlag, float angularDrag, float unk, float targetHeading, float maxZ, float minZ), 0x23703CD154E83B88> TASK_PLANE_MISSION;
		static GameNative<void(Ped pedDriver, Vehicle boat, Any p2, Any p3, float x, float y, float z, Any p7, float maxSpeed, int drivingStyle, float p10, Any p11), 0x15C86013127CE63F> TASK_BOAT_MISSION;
		static GameNative<void(Ped driverPed, Ped targetPed, Vehicle targetVehicle, float targetX, float targetY, float targetZ, float distanceToShoot, int pedAccuracy, BOOL p8, Hash firingPattern), 0x2F8AF0E82773A171> TASK_DRIVE_BY;
		static GameNative<void(Ped shootingPed, Ped targetPed, Vehicle targetVehicle, float x, float y, float z), 0xE5B302114D8162EE> SET_DRIVEBY_TASK_TARGET;
		static GameNative<void(Ped ped), 0xC35B5CDB2824CF69> CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK;
		static GameNative<BOOL(Ped ped), 0x8785E6E40C7A8818> IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK;
		static GameNative<BOOL(Ped ped), 0xDCFE42068FE0135A> CONTROL_MOUNTED_WEAPON;
		static GameNative<void(Ped shootingPed, Ped targetPed, Vehicle targetVehicle, float x, float y, float z), 0xCCD892192C6D2BB9> SET_MOUNTED_WEAPON_TARGET;
		static GameNative<BOOL(Ped ped), 0xA320EF046186FA3B> IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK;
		static GameNative<void(Ped ped, int p1), 0xBD2A8EC3AF4DE7DB> TASK_USE_MOBILE_PHONE;
		static GameNative<void(Ped ped, int duration), 0x5EE02954A14C69DB> TASK_USE_MOBILE_PHONE_TIMED;
		static GameNative<void(Ped ped, Ped target, int p2, float p3, float p4, float p5, float p6, float p7), 0x8C338E0263E4FD19> TASK_CHAT_TO_PED;
		static GameNative<void(Ped ped, Vehicle vehicle, int seat), 0x9A7D091411C5F684> TASK_WARP_PED_INTO_VEHICLE;
		static GameNative<void(Entity entity, Entity target, int duration, Hash firingPattern), 0x08DA95E8298AE772> TASK_SHOOT_AT_ENTITY;
		static GameNative<void(Ped ped, BOOL unused), 0x89D9FCC2435112F1> TASK_CLIMB;
		static GameNative<void(Ped ped, int p1), 0xB6C987F9285A3814> TASK_CLIMB_LADDER;
		static GameNative<void(Ped ped), 0xAAA34F8A7CB32098> CLEAR_PED_TASKS_IMMEDIATELY;
		static GameNative<void(Ped ped, Object taskSequence, int currentProgress, int progressToSetTo), 0x89221B16730234F0> TASK_PERFORM_SEQUENCE_FROM_PROGRESS;
		static GameNative<void(float p0), 0xF1B9F16E89E2C93A> SET_NEXT_DESIRED_MOVE_STATE;
		static GameNative<void(Ped ped, float p1), 0x1E982AC8716912C5> SET_PED_DESIRED_MOVE_BLEND_RATIO;
		static GameNative<float(Ped ped), 0x8517D4A6CA8513ED> GET_PED_DESIRED_MOVE_BLEND_RATIO;
		static GameNative<void(Ped ped, Entity target, float distanceToStopAt, float StartAimingDist), 0xA9DA48FAB8A76C12> TASK_GOTO_ENTITY_AIMING;
		static GameNative<void(Ped p0, Hash p1), 0xEB8517DDA73720DA> TASK_SET_DECISION_MAKER;
		static GameNative<void(Any p0, float p1, float p2, float p3, float p4), 0x933C06518B52A9A4> TASK_SET_SPHERE_DEFENSIVE_AREA;
		static GameNative<void(Any p0), 0x95A6C46A31D1917D> TASK_CLEAR_DEFENSIVE_AREA;
		static GameNative<void(Ped ped, float x, float y, float z, float heading, float duration), 0xD04FE6765D990A06> TASK_PED_SLIDE_TO_COORD;
		static GameNative<void(Ped ped, float x, float y, float z, float heading, float p5, float p6), 0x5A4A6A6D3DC64F52> TASK_PED_SLIDE_TO_COORD_HDG_RATE;
		static GameNative<Any(float posX, float posY, float posZ, float heading, BOOL p4, int p5, BOOL p6, BOOL p7), 0xD5C12A75C7B9497F> ADD_COVER_POINT;
		static GameNative<void(ScrHandle coverpoint), 0xAE287C923D891715> REMOVE_COVER_POINT;
		static GameNative<BOOL(float x, float y, float z), 0xA98B8E3C088E5A31> DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS;
		static GameNative<Vector3(ScrHandle coverpoint), 0x594A1028FC2A3E85> GET_SCRIPTED_COVER_POINT_COORDS;
		static GameNative<void(Ped ped, Ped targetPed, int p2, int p3), 0xF166E48407BAC484> TASK_COMBAT_PED;
		static GameNative<void(Any p0, Ped ped, int duration, Any p3), 0x944F30DCB7096BDE> TASK_COMBAT_PED_TIMED;
		static GameNative<void(Ped ped, float x, float y, float z, int duration, BOOL p5), 0x75AC2B60386D89F2> TASK_SEEK_COVER_FROM_POS;
		static GameNative<void(Ped ped, Ped target, int duration, BOOL p3), 0x84D32B3BEC531324> TASK_SEEK_COVER_FROM_PED;
		static GameNative<void(Any p0, Any p1, float p2, float p3, float p4, Any p5, BOOL p6), 0xD43D95C7A869447F> TASK_SEEK_COVER_TO_COVER_POINT;
		static GameNative<void(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, Any p7, BOOL p8), 0x39246A6958EF072C> TASK_SEEK_COVER_TO_COORDS;
		static GameNative<void(Ped ped, float x, float y, float z, Any timeout, BOOL p5, float p6, BOOL p7, BOOL p8, Any p9, BOOL p10), 0x4172393E6BE1FECE> TASK_PUT_PED_DIRECTLY_INTO_COVER;
		static GameNative<void(Ped ped, int p1, float posX, float posY, float posZ), 0x79B258E397854D29> TASK_EXIT_COVER;
		static GameNative<void(Ped ped, Ped target, float p2, float p3, float p4, float flag), 0x1C6CD14A876FFE39> TASK_PUT_PED_DIRECTLY_INTO_MELEE;
		static GameNative<void(BOOL p0, BOOL p1), 0xAC96609B9995EDF8> TASK_TOGGLE_DUCK;
		static GameNative<void(Ped p0, float p1, float p2, BOOL p3), 0x4A58A47A72E3FCB4> TASK_GUARD_CURRENT_POSITION;
		static GameNative<void(Any p0, float p1, float p2, float p3, float p4, float p5, Any p6), 0xD2A207EEBDF9889B> TASK_GUARD_ASSIGNED_DEFENSIVE_AREA;
		static GameNative<void(Ped p0, float p1, float p2, float p3, float p4, float p5, Any p6, float p7, float p8, float p9, float p10), 0xC946FE14BE0EB5E2> TASK_GUARD_SPHERE_DEFENSIVE_AREA;
		static GameNative<void(Ped ped, float x, float y, float z, float heading, const char* scenarioName), 0xAE032F8BBA959E90> TASK_STAND_GUARD;
		static GameNative<void(Ped driver, float cruiseSpeed), 0x5C9B84BD7D31D908> SET_DRIVE_TASK_CRUISE_SPEED;
		static GameNative<void(Any p0, float p1), 0x404A5AA9B9F0B746> SET_DRIVE_TASK_MAX_CRUISE_SPEED;
		static GameNative<void(Ped ped, int drivingStyle), 0xDACE1BE37D88AF67> SET_DRIVE_TASK_DRIVING_STYLE;
		static GameNative<void(float playerX, float playerY, float playerZ, float radiusX, float radiusY, float radiusZ, BOOL p6, BOOL p7, BOOL p8, BOOL p9), 0x45C597097DD7CB81> ADD_COVER_BLOCKING_AREA;
		static GameNative<void(), 0xDB6708C0B46F56D8> REMOVE_ALL_COVER_BLOCKING_AREAS;
		static GameNative<void(Ped ped, const char* scenarioName, int unkDelay, BOOL playEnterAnim), 0x142A02425FF02BD9> TASK_START_SCENARIO_IN_PLACE;
		static GameNative<void(Ped ped, const char* scenarioName, float x, float y, float z, float heading, int duration, BOOL sittingScenario, BOOL teleport), 0xFA4EFC79F69D4F07> TASK_START_SCENARIO_AT_POSITION;
		static GameNative<void(Ped ped, float x, float y, float z, float distance, int duration), 0x277F471BA9DB000B> TASK_USE_NEAREST_SCENARIO_TO_COORD;
		static GameNative<void(Ped ped, float x, float y, float z, float radius, Any p5), 0x58E2E0F23F6B76C3> TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP;
		static GameNative<void(Any p0, float p1, float p2, float p3, float p4, Any p5), 0x9FDA1B3D7E7028B3> TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD;
		static GameNative<void(Any p0, float p1, float p2, float p3, float p4, Any p5), 0x97A28E63F0BA5631> TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP;
		static GameNative<BOOL(float x, float y, float z, float radius, BOOL b), 0x5A59271FFADD33C1> DOES_SCENARIO_EXIST_IN_AREA;
		static GameNative<BOOL(float p0, float p1, float p2, Any* p3, float p4, BOOL p5), 0x0A9D0C2A3BBC86C1> DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA;
		static GameNative<BOOL(float x, float y, float z, float radius, BOOL p4), 0x788756D73AC2E07C> IS_SCENARIO_OCCUPIED;
		static GameNative<BOOL(Ped ped), 0x295E3CCEC879CCD7> PED_HAS_USE_SCENARIO_TASK;
		static GameNative<void(Ped ped, const char* animDict, const char* animName), 0x748040460F8DF5DC> PLAY_ANIM_ON_RUNNING_SCENARIO;
		static GameNative<BOOL(const char* scenarioGroup), 0xF9034C136C9E00D3> DOES_SCENARIO_GROUP_EXIST;
		static GameNative<BOOL(const char* scenarioGroup), 0x367A09DED4E05B99> IS_SCENARIO_GROUP_ENABLED;
		static GameNative<void(const char* scenarioGroup, BOOL p1), 0x02C8E5B49848664E> SET_SCENARIO_GROUP_ENABLED;
		static GameNative<void(), 0xDD902D0349AFAD3A> RESET_SCENARIO_GROUPS_ENABLED;
		static GameNative<void(const char* scenarioGroup), 0x535E97E1F7FC0C6A> SET_EXCLUSIVE_SCENARIO_GROUP;
		static GameNative<void(), 0x4202BBCB8684563D> RESET_EXCLUSIVE_SCENARIO_GROUP;
		static GameNative<BOOL(const char* scenarioType), 0x3A815DB3EA088722> IS_SCENARIO_TYPE_ENABLED;
		static GameNative<void(const char* scenarioType, BOOL toggle), 0xEB47EC4E34FB7EE1> SET_SCENARIO_TYPE_ENABLED;
		static GameNative<void(), 0x0D40EE2A7F2B2D6D> RESET_SCENARIO_TYPES_ENABLED;
		static GameNative<BOOL(Ped ped), 0xAA135F9482C82CC3> IS_PED_ACTIVE_IN_SCENARIO;
		static GameNative<BOOL(Ped ped), 0x621C6E4729388E41> _0x621C6E4729388E41;
		static GameNative<void(Ped ped, BOOL p1, BOOL p2), 0x8FD89A6240813FD0> _0x8FD89A6240813FD0;
		static GameNative<void(Ped ped, float x, float y, float z, float radius, Any p5), 0x4CF5F55DAC3280A0> TASK_COMBAT_HATED_TARGETS_IN_AREA;
		static GameNative<void(Ped ped, float radius, int p2), 0x7BF835BB9E2698C8> TASK_COMBAT_HATED_TARGETS_AROUND_PED;
		static GameNative<void(Ped ped, float radius, int duration, BOOL unk), 0x2BBA30B854534A0C> TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED;
		static GameNative<void(int ped, float x, float y, float z), 0x7285951DBF6B5A51> TASK_THROW_PROJECTILE;
		static GameNative<void(Ped ped, BOOL p1), 0xA21C51255B205245> TASK_SWAP_WEAPON;
		static GameNative<void(Ped ped, BOOL unused), 0x62D2916F56B9CD2D> TASK_RELOAD_WEAPON;
		static GameNative<BOOL(Ped ped), 0x2A74E1D5F2F00EEC> IS_PED_GETTING_UP;
		static GameNative<void(Ped ped, Ped target, int time, int p3), 0xCDDC2B77CE54AC6E> TASK_WRITHE;
		static GameNative<BOOL(Ped ped), 0xDEB6D52126E7D640> IS_PED_IN_WRITHE;
		static GameNative<void(const char* patrolRoute), 0xA36BFB5EE89F3D82> OPEN_PATROL_ROUTE;
		static GameNative<void(), 0xB043ECA801B8CBC1> CLOSE_PATROL_ROUTE;
		static GameNative<void(int p0, const char* p1, float x1, float y1, float z1, float x2, float y2, float z2, int p8), 0x8EDF950167586B7C> ADD_PATROL_ROUTE_NODE;
		static GameNative<void(Any p0, Any p1), 0x23083260DEC3A551> ADD_PATROL_ROUTE_LINK;
		static GameNative<void(), 0xAF8A443CCC8018DC> CREATE_PATROL_ROUTE;
		static GameNative<void(const char* patrolRoute), 0x7767DD9D65E91319> DELETE_PATROL_ROUTE;
		static GameNative<void(Ped ped, const char* p1, Any p2, BOOL p3, BOOL p4), 0xBDA5DF49D080FE4E> TASK_PATROL;
		static GameNative<void(Ped ped), 0xE5DA8615A6180789> TASK_STAY_IN_COVER;
		static GameNative<void(Ped ped, float x, float y, float z), 0x5CF0D8F9BBA0DD75> ADD_VEHICLE_SUBTASK_ATTACK_COORD;
		static GameNative<void(Ped ped, Ped ped2), 0x85F462BADC7DA47F> ADD_VEHICLE_SUBTASK_ATTACK_PED;
		static GameNative<void(Ped ped, Ped target, float flag), 0x10AB107B887214D8> TASK_VEHICLE_SHOOT_AT_PED;
		static GameNative<void(Ped ped, Ped target), 0xE41885592B08B097> TASK_VEHICLE_AIM_AT_PED;
		static GameNative<void(Ped ped, float x, float y, float z, float p4), 0x5190796ED39C9B6D> TASK_VEHICLE_SHOOT_AT_COORD;
		static GameNative<void(Ped ped, float x, float y, float z), 0x447C1E9EF844BC0F> TASK_VEHICLE_AIM_AT_COORD;
		static GameNative<void(Ped ped, Vehicle vehicle, float x, float y, float z, float speed, int behaviorFlag, float stoppingRange), 0x195AEEB13CEFE2EE> TASK_VEHICLE_GOTO_NAVMESH;
		static GameNative<void(Ped ped, float x, float y, float z, float aimAtX, float aimAtY, float aimAtZ, float moveSpeed, BOOL p8, float p9, float p10, BOOL p11, Any flags, BOOL p13, Hash firingPattern), 0x11315AB3385B8AC0> TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD;
		static GameNative<void(Any p0, float p1, float p2, float p3, Any p4, float p5, BOOL p6, float p7, float p8, BOOL p9, Any p10, BOOL p11, Any p12, Any p13), 0xB2A16444EAD9AE47> TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY;
		static GameNative<void(Ped pedHandle, float goToLocationX, float goToLocationY, float goToLocationZ, float focusLocationX, float focusLocationY, float focusLocationZ, float speed, BOOL shootAtEnemies, float distanceToStopAt, float noRoadsDistance, BOOL unkTrue, int unkFlag, int aimingFlag, Hash firingPattern), 0xA55547801EB331FC> TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD;
		static GameNative<void(Any p0, Any p1, float p2, float p3, float p4, float p5, BOOL p6, float p7, float p8, BOOL p9, BOOL p10, Any p11), 0x04701832B739DCE5> TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD;
		static GameNative<void(Ped ped, Entity entityToWalkTo, Entity entityToAimAt, float speed, BOOL shootatEntity, float p5, float p6, BOOL p7, BOOL p8, Hash firingPattern), 0x97465886D35210E9> TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY;
		static GameNative<void(Ped ped, Any p1, Any p2, Any p3), 0x8C825BDC7741D37C> SET_HIGH_FALL_TASK;
		static GameNative<void(const char* name), 0x9EEFB62EB27B5792> REQUEST_WAYPOINT_RECORDING;
		static GameNative<BOOL(const char* name), 0xCB4E8BE8A0063C5D> GET_IS_WAYPOINT_RECORDING_LOADED;
		static GameNative<void(const char* name), 0xFF1B8B4AA1C25DC8> REMOVE_WAYPOINT_RECORDING;
		static GameNative<BOOL(const char* name, int* points), 0x5343532C01A07234> WAYPOINT_RECORDING_GET_NUM_POINTS;
		static GameNative<BOOL(const char* name, int point, Vector3* coord), 0x2FB897405C90B361> WAYPOINT_RECORDING_GET_COORD;
		static GameNative<float(const char* name, int point), 0x005622AEBC33ACA9> WAYPOINT_RECORDING_GET_SPEED_AT_POINT;
		static GameNative<BOOL(const char* name, float x, float y, float z, int* point), 0xB629A298081F876F> WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT;
		static GameNative<void(Any p0, Any p1, Any p2, Any p3, Any p4), 0x0759591819534F7B> TASK_FOLLOW_WAYPOINT_RECORDING;
		static GameNative<BOOL(Any p0), 0xE03B3F2D3DC59B64> IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED;
		static GameNative<int(Ped ped), 0x2720AAA75001E094> GET_PED_WAYPOINT_PROGRESS;
		static GameNative<float(Ped ped), 0xE6A877C64CAF1BC5> GET_PED_WAYPOINT_DISTANCE;
		static GameNative<Any(Ped ped, float offsetX, float offsetY, float offsetZ), 0xED98E10B0AFCE4B4> SET_PED_WAYPOINT_ROUTE_OFFSET;
		static GameNative<float(const char* p0, int p1), 0xA5B769058763E497> GET_WAYPOINT_DISTANCE_ALONG_ROUTE;
		static GameNative<BOOL(Any p0), 0x701375A7D43F01CB> WAYPOINT_PLAYBACK_GET_IS_PAUSED;
		static GameNative<void(Any p0, BOOL p1, BOOL p2), 0x0F342546AA06FED5> WAYPOINT_PLAYBACK_PAUSE;
		static GameNative<void(Any p0, BOOL p1, Any p2, Any p3), 0x244F70C84C547D2D> WAYPOINT_PLAYBACK_RESUME;
		static GameNative<void(Any p0, float p1, BOOL p2), 0x7D7D2B47FA788E85> WAYPOINT_PLAYBACK_OVERRIDE_SPEED;
		static GameNative<void(Any p0), 0x6599D834B12D0800> WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED;
		static GameNative<void(Any* p0, BOOL p1, float p2, float p3), 0x5A353B8E6B1095B5> USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE;
		static GameNative<void(Any p0, Any p1, BOOL p2), 0x20E330937C399D29> WAYPOINT_PLAYBACK_START_AIMING_AT_PED;
		static GameNative<void(Any p0, float p1, float p2, float p3, BOOL p4), 0x8968400D900ED8B3> WAYPOINT_PLAYBACK_START_AIMING_AT_COORD;
		static GameNative<void(Any p0, Any p1, BOOL p2, Any p3), 0xE70BA7B90F8390DC> _WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED;
		static GameNative<void(Any p0, float p1, float p2, float p3, BOOL p4, Any p5), 0x057A25CFCC9DB671> WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD;
		static GameNative<void(Any p0), 0x47EFA040EBB8E2EA> WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING;
		static GameNative<void(const char* route), 0x817268968605947A> ASSISTED_MOVEMENT_REQUEST_ROUTE;
		static GameNative<void(const char* route), 0x3548536485DD792B> ASSISTED_MOVEMENT_REMOVE_ROUTE;
		static GameNative<BOOL(const char* route), 0x60F9A4393A21F741> ASSISTED_MOVEMENT_IS_ROUTE_LOADED;
		static GameNative<void(const char* route, int props), 0xD5002D78B7162E1B> ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES;
		static GameNative<void(float dist), 0x13945951E16EF912> ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME;
		static GameNative<void(Ped ped, Vehicle vehicle, const char* WPRecording, int p3, int p4, int p5, int p6, float p7, BOOL p8, float p9), 0x3123FAA6DB1CF7ED> TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING;
		static GameNative<BOOL(Any p0), 0xF5134943EA29868C> IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE;
		static GameNative<int(Vehicle vehicle), 0x9824CFF8FC66E159> GET_VEHICLE_WAYPOINT_PROGRESS;
		static GameNative<Any(Ped ped), 0x416B62AC8B9E5BBD> GET_VEHICLE_WAYPOINT_TARGET_POINT;
		static GameNative<void(Any p0), 0x8A4E6AC373666BC5> VEHICLE_WAYPOINT_PLAYBACK_PAUSE;
		static GameNative<void(Any p0), 0xDC04FCAA7839D492> VEHICLE_WAYPOINT_PLAYBACK_RESUME;
		static GameNative<void(Any p0), 0x5CEB25A7D2848963> VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED;
		static GameNative<void(Any p0, float p1), 0x121F0593E0A431D7> VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED;
		static GameNative<void(Ped ped, BOOL toggle), 0x90D2156198831D69> TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS;
		static GameNative<void(Ped ped, Hash state, BOOL p2), 0x4F056E1AFFEF17AB> TASK_FORCE_MOTION_STATE;
		static GameNative<void(Ped ped, const char* task, float multiplier, BOOL p3, const char* animDict, int flags), 0x2D537BA194896636> _TASK_MOVE_NETWORK;
		static GameNative<void(Ped ped, const char* p1, float p2, float p3, float p4, float p5, float p6, float p7, Any p8, float p9, BOOL p10, const char* animDict, int flags), 0xD5B35BEA41919ACB> _TASK_MOVE_NETWORK_ADVANCED;
		static GameNative<BOOL(Ped handle), 0x921CE12C489C4C41> _IS_TASK_MOVE_SCRIPTED_ACTIVE;
		static GameNative<BOOL(Any p0), 0x30ED88D5E0C56A37> _0x30ED88D5E0C56A37;
		static GameNative<Any(Ped ped, const char* p1), 0xD01015C7316AE176> _SET_NETWORK_TASK_ACTION;
		static GameNative<Any(Ped ped, const char* unk), 0xAB13A5565480B6D9> _0xAB13A5565480B6D9;
		static GameNative<const char* (Ped ped), 0x717E4D1F2048376D> _GET_PED_NETWORK_TASK_PHASE;
		static GameNative<void(Ped ped, const char* p1, float p2), 0xD5BB4025AE449A4E> _SET_NETWORK_TASK_PARAM_FLOAT;
		static GameNative<void(Ped ped, const char* p1, BOOL p2), 0xB0A6CFD2C69C1088> _SET_NETWORK_TASK_PARAM_BOOL;
		static GameNative<BOOL(Ped ped, const char* p1), 0xA7FFBA498E4AAF67> _0xA7FFBA498E4AAF67;
		static GameNative<BOOL(Ped ped, const char* p1), 0xB4F47213DF45A64C> _0xB4F47213DF45A64C;
		static GameNative<BOOL(Ped ped), 0x349CE7B56DAFD95C> IS_MOVE_BLEND_RATIO_STILL;
		static GameNative<BOOL(Ped ped), 0xF133BBBE91E1691F> IS_MOVE_BLEND_RATIO_WALKING;
		static GameNative<BOOL(Ped ped), 0xD4D8636C0199A939> IS_MOVE_BLEND_RATIO_RUNNING;
		static GameNative<BOOL(Ped ped), 0x24A2AD74FA9814E2> IS_MOVE_BLEND_RATIO_SPRINTING;
		static GameNative<BOOL(Ped ped), 0xAC29253EEF8F0180> IS_PED_STILL;
		static GameNative<BOOL(Ped ped), 0xDE4C184B2B9B071A> IS_PED_WALKING;
		static GameNative<BOOL(Ped ped), 0xC5286FFC176F28A2> IS_PED_RUNNING;
		static GameNative<BOOL(Ped ped), 0x57E457CD2C0FC168> IS_PED_SPRINTING;
		static GameNative<BOOL(Ped ped), 0xE45B7F222DE47E09> IS_PED_STRAFING;
		static GameNative<void(Ped ped, int scene, const char* animDictionary, const char* animationName, float speed, float speedMultiplier, int headingFlag, int flag, float playbackRate, Any p9), 0xEEA929141F699854> TASK_SYNCHRONIZED_SCENE;
		static GameNative<void(Ped ped, const char* animDict, const char* animName1, const char* animName2, const char* animName3, int duration, Entity entity, float p7, float p8), 0x2047C02158D6405A> TASK_SWEEP_AIM_ENTITY;
		static GameNative<void(Ped ped, Entity entity), 0xE4973DBDBE6E44B3> UPDATE_TASK_SWEEP_AIM_ENTITY;
		static GameNative<void(Ped ped, const char* animDict, const char* animName1, const char* animName2, const char* animName3, int timeout, float X, float Y, float Z, float unk, float flag), 0x7AFE8FDC10BC07D2> TASK_SWEEP_AIM_POSITION;
		static GameNative<void(Ped ped, float X, float Y, float Z), 0xBB106883F5201FC4> UPDATE_TASK_SWEEP_AIM_POSITION;
		static GameNative<void(Ped ped, Ped target), 0xF3B9A78A178572B1> TASK_ARREST_PED;
		static GameNative<BOOL(Ped ped), 0x3DC52677769B4AE0> IS_PED_RUNNING_ARREST_TASK;
		static GameNative<BOOL(Ped ped), 0x90A09F3A45FED688> IS_PED_BEING_ARRESTED;
		static GameNative<void(Ped ped), 0x67406F2C8F87FC4F> UNCUFF_PED;
		static GameNative<BOOL(Ped ped), 0x74E559B3BC910685> IS_PED_CUFFED;
	};
};