SAMPLE 0 <----                                                                                                         ЫП ­
call [0x00000233CF1218D8]
mov eax, eax
cvtsi2ss xmm0, rax
movss [rsp+0x20], xmm0
call [0x00000233CF1218D8]
mov eax, eax
cvtsi2ss xmm0, rax
movss [rsp+0x24], xmm0
movss xmm0, dword ptr [0x00000233CF1B0374]
comiss xmm0, [rsp+0x20]
jbe 0x00000233CF00E8A7
movss xmm0, dword ptr [rsp+0x20]
addss xmm0, [0x00000233CF1B0328]
movss [rsp+0x20], xmm0
movss xmm0, dword ptr [rsp+0x20]
ucomiss xmm0, [rsp+0x24]
jp 0x00000233CF00E7C9
jnz 0x00000233CF00E7C9
movss xmm0, dword ptr [rsp+0x20]
subss xmm0, [0x00000233CF1B0328]
movss [rsp+0x20], xmm0
jmp 0x00000233CF00E8A7
movss xmm0, dword ptr [rsp+0x24]
addss xmm0, [0x00000233CF1B0328]
movss xmm1, dword ptr [rsp+0x20]
ucomiss xmm1, xmm0
jp 0x00000233CF00E80E
jnz 0x00000233CF00E80E
movss xmm0, dword ptr [0x00000233CF1B03B8]
comiss xmm0, [rsp+0x20]
jbe 0x00000233CF00E809
movss xmm0, dword ptr [rsp+0x20]
addss xmm0, [0x00000233CF1B0328]
movss [rsp+0x20], xmm0
jmp 0x00000233CF00E7E4
jmp 0x00000233CF00E77A
movss xmm0, dword ptr [rsp+0x24]
addss xmm0, [0x00000233CF1B0338]
movss xmm1, dword ptr [rsp+0x20]
ucomiss xmm1, xmm0
jp 0x00000233CF00E82B
jnz 0x00000233CF00E82B
jmp 0x00000233CF00E8A7
movss xmm0, dword ptr [rsp+0x24]
addss xmm0, [0x00000233CF1B0374]
movss xmm1, dword ptr [rsp+0x20]
ucomiss xmm1, xmm0
jp 0x00000233CF00E85F
jnz 0x00000233CF00E85F
movss xmm0, dword ptr [rsp+0x20]
subss xmm0, [0x00000233CF1B0328]
movss [rsp+0x20], xmm0
jmp 0x00000233CF00E77A
movss xmm0, dword ptr [rsp+0x24]
addss xmm0, [0x00000233CF1B0354]
movss xmm1, dword ptr [rsp+0x20]
ucomiss xmm1, xmm0
jp 0x00000233CF00E88E
jnz 0x00000233CF00E88E
movss xmm0, dword ptr [rsp+0x20]
addss xmm0, [0x00000233CF1B0338]
movss [rsp+0x20], xmm0
movss xmm0, dword ptr [rsp+0x20]
addss xmm0, [0x00000233CF1B0328]
movss [rsp+0x20], xmm0
jmp 0x00000233CF00E77A
cvttss2si eax, [rsp+0x20]
add rsp, 0x38
ret
********************* BEFORE OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 0, backOrderId: 5, linearLevel: 1, refCount: 0)
0x0 sub rsp, 0x38
0x4 call [0x00000233CF1218D8]
0xa mov eax, eax
0xc cvtsi2ss xmm0, rax
0x11 movss [rsp+0x20], xmm0
0x17 call [0x00000233CF1218D8]
0x1d mov eax, eax
0x1f cvtsi2ss xmm0, rax
0x24 movss [rsp+0x24], xmm0
------------
[mem_1_64] = *(uint_64t*)([reg_rip:8] +.8 0x11317e{1126782})
[funcVar_1_32] = fun_50000000([reg_rcx:4], [reg_rdx:4], [reg_r8:4], [reg_r9:Da])
*(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) = TOFLOAT([funcVar_1_32])
[mem_2_64] = *(uint_64t*)([reg_rip:8] +.8 0x11316b{1126763})
[funcVar_2_32] = fun_50000000([reg_rcx:4], [reg_rdx:4], [reg_r8:4], [reg_r9:Da])
*(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x24{36}) = TOFLOAT([funcVar_2_32])
do {
        //block 2a (level: 2, maxHeight: 0, backOrderId: 4, linearLevel: 2, refCount: 4)
        0x2a movss xmm0, dword ptr [0x00000233CF1B0374]
        0x32 comiss xmm0, [rsp+0x20]
        0x37 jbe 0x00000233CF00E8A7
        ------------
        [mem_3_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1bf2{1711090})
        [mem_4_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32})
        if(!((((([mem_3_32] == NaN) || ([mem_4_32] == NaN)) || ([mem_3_32] < [mem_4_32])) || ((([mem_3_32] == NaN) || ([mem_4_32] == NaN)) || ([mem_3_32] == [mem_4_32]))))) {
                //block 3d (level: 3, maxHeight: 0, backOrderId: 10, linearLevel: 3, refCount: 1)
                0x3d movss xmm0, dword ptr [rsp+0x20]
                0x43 addss xmm0, [0x00000233CF1B0328]
                0x4b movss [rsp+0x20], xmm0
                0x51 movss xmm0, dword ptr [rsp+0x20]
                0x57 ucomiss xmm0, [rsp+0x24]
                0x5c jp 0x00000233CF00E7C9
                ------------
                [mem_5_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32})
                [mem_6_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1b8d{1710989})
                *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) = ([mem_5_32] +.4f [mem_6_32])
                [mem_7_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32})
                [mem_8_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x24{36})
                if(!((([mem_7_32] == NaN) || ([mem_8_32] == NaN)))) {
                        //block 5e (level: 4, maxHeight: 0, backOrderId: 10, linearLevel: 4, refCount: 1)
                        0x5e jnz 0x00000233CF00E7C9
                        ------------
                        if(!(!((((([mem_7_32] == NaN) || ([mem_8_32] == NaN)) || ([mem_7_32] == [mem_8_32])) != 0x0{0})))) {
                                //block 60 (level: 5, maxHeight: 0, backOrderId: 11, linearLevel: 5, refCount: 1)
                                0x60 movss xmm0, dword ptr [rsp+0x20]
                                0x66 subss xmm0, [0x00000233CF1B0328]
                                0x6e movss [rsp+0x20], xmm0
                                0x74 jmp 0x00000233CF00E8A7
                                ------------
                                [mem_9_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32})
                                [mem_a_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1b6a{1710954})
                                *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) = ([mem_9_32] +.4f ([mem_a_32] *.4f 0xbf800000{-1082130432}))
                                //goto to block 157 (backOrderId: 9; minLinLevel: 5, maxLinLevel: 6) [break]
                        } else {
                                //goto to block 79 (backOrderId: 9; minLinLevel: 6, maxLinLevel: 6) [None]
                        }
                        //goto is null (backOrderId: 9; minLinLevel: 4, maxLinLevel: 6)
                } else {
                        //goto to block 79 (backOrderId: 9; minLinLevel: 6, maxLinLevel: 6) [None]
                }
                //block 79 (level: 5, maxHeight: 0, backOrderId: 9, linearLevel: 6, refCount: 2)
                0x79 movss xmm0, dword ptr [rsp+0x24]
                0x7f addss xmm0, [0x00000233CF1B0328]
                0x87 movss xmm1, dword ptr [rsp+0x20]
                0x8d ucomiss xmm1, xmm0
                0x90 jp 0x00000233CF00E80E
                ------------
                [mem_b_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x24{36})
                [mem_c_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1b51{1710929})
                [mem_d_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32})
                if(!((([mem_d_32] == NaN) || (([mem_b_32] +.4f [mem_c_32]) == NaN)))) {
                        //block 92 (level: 6, maxHeight: 0, backOrderId: 9, linearLevel: 7, refCount: 1)
                        0x92 jnz 0x00000233CF00E80E
                        ------------
                        if(!(!((((([mem_d_32] == NaN) || (([mem_b_32] +.4f [mem_c_32]) == NaN)) || ([mem_d_32] == ([mem_b_32] +.4f [mem_c_32]))) != 0x0{0})))) {
                                do {
                                        //block 94 (level: 7, maxHeight: 0, backOrderId: 11, linearLevel: 8, refCount: 2)
                                        0x94 movss xmm0, dword ptr [0x00000233CF1B03B8]
                                        0x9c comiss xmm0, [rsp+0x20]
                                        0xa1 jbe 0x00000233CF00E809
                                        ------------
                                        [mem_e_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1bcc{1711052})
                                        [mem_f_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32})
                                        if((((([mem_e_32] == NaN) || ([mem_f_32] == NaN)) || ([mem_e_32] < [mem_f_32])) || ((([mem_e_32] == NaN) || ([mem_f_32] == NaN)) || ([mem_e_32] == [mem_f_32])))) {
                                                //goto to block b9 (backOrderId: 10; minLinLevel: 9, maxLinLevel: 9) [!!!Normal!!!]
                                        } else {
                                                //goto to block a3 (backOrderId: 10; minLinLevel: 9, maxLinLevel: 9) [None]
                                        }
                                        //goto is null (backOrderId: 10; minLinLevel: 8, maxLinLevel: 9)
                                        //block a3 (level: 8, maxHeight: 0, backOrderId: 10, linearLevel: 9, refCount: 1)
                                        0xa3 movss xmm0, dword ptr [rsp+0x20]
                                        0xa9 addss xmm0, [0x00000233CF1B0328]
                                        0xb1 movss [rsp+0x20], xmm0
                                        0xb7 jmp 0x00000233CF00E7E4
                                        ------------
                                        [mem_10_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32})
                                        [mem_11_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1b27{1710887})
                                        *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) = ([mem_10_32] +.4f [mem_11_32])
                                } while(true);
                                //goto to block b9 (backOrderId: 8; minLinLevel: 8, maxLinLevel: 10) [!!!Normal!!!]
                        } else {
                                //goto to block be (backOrderId: 8; minLinLevel: 10, maxLinLevel: 10) [None]
                        }
                        //goto is null (backOrderId: 8; minLinLevel: 7, maxLinLevel: 10)
                } else {
                        //goto to block be (backOrderId: 8; minLinLevel: 10, maxLinLevel: 10) [None]
                }
                //block be (level: 7, maxHeight: 0, backOrderId: 8, linearLevel: 10, refCount: 2)
                0xbe movss xmm0, dword ptr [rsp+0x24]
                0xc4 addss xmm0, [0x00000233CF1B0338]
                0xcc movss xmm1, dword ptr [rsp+0x20]
                0xd2 ucomiss xmm1, xmm0
                0xd5 jp 0x00000233CF00E82B
                ------------
                [mem_12_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x24{36})
                [mem_13_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1b1c{1710876})
                [mem_14_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32})
                if(!((([mem_14_32] == NaN) || (([mem_12_32] +.4f [mem_13_32]) == NaN)))) {
                        //block d7 (level: 8, maxHeight: 0, backOrderId: 8, linearLevel: 11, refCount: 1)
                        0xd7 jnz 0x00000233CF00E82B
                        ------------
                        if(!(!((((([mem_14_32] == NaN) || (([mem_12_32] +.4f [mem_13_32]) == NaN)) || ([mem_14_32] == ([mem_12_32] +.4f [mem_13_32]))) != 0x0{0})))) {
                                //block d9 (level: 9, maxHeight: 0, backOrderId: 9, linearLevel: 12, refCount: 1)
                                0xd9 jmp 0x00000233CF00E8A7
                                ------------
                                //goto to block 157 (backOrderId: 7; minLinLevel: 12, maxLinLevel: 13) [break]
                        } else {
                                //goto to block db (backOrderId: 7; minLinLevel: 13, maxLinLevel: 13) [None]
                        }
                        //goto is null (backOrderId: 7; minLinLevel: 11, maxLinLevel: 13)
                } else {
                        //goto to block db (backOrderId: 7; minLinLevel: 13, maxLinLevel: 13) [None]
                }
                //block db (level: 9, maxHeight: 0, backOrderId: 7, linearLevel: 13, refCount: 2)
                0xdb movss xmm0, dword ptr [rsp+0x24]
                0xe1 addss xmm0, [0x00000233CF1B0374]
                0xe9 movss xmm1, dword ptr [rsp+0x20]
                0xef ucomiss xmm1, xmm0
                0xf2 jp 0x00000233CF00E85F
                ------------
                [mem_15_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x24{36})
                [mem_16_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1b3b{1710907})
                [mem_17_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32})
                if(!((([mem_17_32] == NaN) || (([mem_15_32] +.4f [mem_16_32]) == NaN)))) {
                        //block f4 (level: 10, maxHeight: 0, backOrderId: 7, linearLevel: 14, refCount: 1)
                        0xf4 jnz 0x00000233CF00E85F
                        ------------
                        if(!(!((((([mem_17_32] == NaN) || (([mem_15_32] +.4f [mem_16_32]) == NaN)) || ([mem_17_32] == ([mem_15_32] +.4f [mem_16_32]))) != 0x0{0})))) {
                                //block f6 (level: 11, maxHeight: 0, backOrderId: 8, linearLevel: 15, refCount: 1)
                                0xf6 movss xmm0, dword ptr [rsp+0x20]
                                0xfc subss xmm0, [0x00000233CF1B0328]
                                0x104 movss [rsp+0x20], xmm0
                                0x10a jmp 0x00000233CF00E77A
                                ------------
                                [mem_18_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32})
                                [mem_19_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1ad4{1710804})
                                *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) = ([mem_18_32] +.4f ([mem_19_32] *.4f 0xbf800000{-1082130432}))
                                //goto to block 2a (backOrderId: 6; minLinLevel: 15, maxLinLevel: 16) [continue]
                        } else {
                                //goto to block 10f (backOrderId: 6; minLinLevel: 16, maxLinLevel: 16) [None]
                        }
                        //goto is null (backOrderId: 6; minLinLevel: 14, maxLinLevel: 16)
                } else {
                        //goto to block 10f (backOrderId: 6; minLinLevel: 16, maxLinLevel: 16) [None]
                }
                //block 10f (level: 11, maxHeight: 0, backOrderId: 6, linearLevel: 16, refCount: 2)
                0x10f movss xmm0, dword ptr [rsp+0x24]
                0x115 addss xmm0, [0x00000233CF1B0354]
                0x11d movss xmm1, dword ptr [rsp+0x20]
                0x123 ucomiss xmm1, xmm0
                0x126 jp 0x00000233CF00E88E
                ------------
                [mem_1a_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x24{36})
                [mem_1b_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1ae7{1710823})
                [mem_1c_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32})
                if(!((([mem_1c_32] == NaN) || (([mem_1a_32] +.4f [mem_1b_32]) == NaN)))) {
                        //block 128 (level: 12, maxHeight: 0, backOrderId: 6, linearLevel: 17, refCount: 1)
                        0x128 jnz 0x00000233CF00E88E
                        ------------
                        if(!(!((((([mem_1c_32] == NaN) || (([mem_1a_32] +.4f [mem_1b_32]) == NaN)) || ([mem_1c_32] == ([mem_1a_32] +.4f [mem_1b_32]))) != 0x0{0})))) {
                                //block 12a (level: 13, maxHeight: 0, backOrderId: 6, linearLevel: 18, refCount: 1)
                                0x12a movss xmm0, dword ptr [rsp+0x20]
                                0x130 addss xmm0, [0x00000233CF1B0338]
                                0x138 movss [rsp+0x20], xmm0
                                ------------
                                [mem_1d_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32})
                                [mem_1e_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1ab0{1710768})
                                *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) = ([mem_1d_32] +.4f [mem_1e_32])
                                //goto to block 13e (backOrderId: 5; minLinLevel: 18, maxLinLevel: 19) [None]
                        } else {
                                //goto to block 13e (backOrderId: 5; minLinLevel: 19, maxLinLevel: 19) [None]
                        }
                        //goto is null (backOrderId: 5; minLinLevel: 17, maxLinLevel: 19)
                } else {
                        //goto to block 13e (backOrderId: 5; minLinLevel: 19, maxLinLevel: 19) [None]
                }
                //block 13e (level: 14, maxHeight: 0, backOrderId: 5, linearLevel: 19, refCount: 3)
                0x13e movss xmm0, dword ptr [rsp+0x20]
                0x144 addss xmm0, [0x00000233CF1B0328]
                0x14c movss [rsp+0x20], xmm0
                0x152 jmp 0x00000233CF00E77A
                ------------
                [mem_1f_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32})
                [mem_20_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1a8c{1710732})
                *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) = ([mem_1f_32] +.4f [mem_20_32])
                //goto to block 2a (backOrderId: 3; minLinLevel: 3, maxLinLevel: 20) [continue]
        } else {
                //goto to block 157 (backOrderId: 3; minLinLevel: 20, maxLinLevel: 20) [break]
        }
        //goto is null (backOrderId: 3; minLinLevel: 2, maxLinLevel: 20)
        //block b9 (level: 8, maxHeight: 0, backOrderId: 3, linearLevel: 20, refCount: 1)
        0xb9 jmp 0x00000233CF00E77A
        ------------
} while(true);
//block 157 (level: 10, maxHeight: 0, backOrderId: 2, linearLevel: 21, refCount: 3)
0x157 cvttss2si eax, [rsp+0x20]
0x15d add rsp, 0x38
0x161 ret
------------
[mem_21_64] = *(uint_64t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32})
[mem_22_64] = *(uint_64t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x38{56})
return TOINT([mem_21_64])
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 22)



********************* AFTER OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 31, backOrderId: 5, linearLevel: 1, refCount: 0)
0x0 sub rsp, 0x38
0x4 call [0x00000233CF1218D8]
0xa mov eax, eax
0xc cvtsi2ss xmm0, rax
0x11 movss [rsp+0x20], xmm0
0x17 call [0x00000233CF1218D8]
0x1d mov eax, eax
0x1f cvtsi2ss xmm0, rax
0x24 movss [rsp+0x24], xmm0
------------
[mem_1_64] = *(uint_64t*)([reg_rip:8] +.8 0x11317e{1126782})
[funcVar_1_32] = fun_50000000([reg_rcx:4], [reg_rdx:4], [reg_r8:4], [reg_r9:Da])
*(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24}) = TOFLOAT([funcVar_1_32])
[mem_2_64] = *(uint_64t*)([reg_rip:8] +.8 0x11316b{1126763})
[funcVar_2_32] = fun_50000000([reg_rcx:4], [reg_rdx:4], [reg_r8:4], [reg_r9:Da])
*(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffec{-20}) = TOFLOAT([funcVar_2_32])
do {
        //block 2a (level: 2, maxHeight: 25, backOrderId: 4, linearLevel: 2, refCount: 4)
        0x2a movss xmm0, dword ptr [0x00000233CF1B0374]
        0x32 comiss xmm0, [rsp+0x20]
        0x37 jbe 0x00000233CF00E8A7
        ------------
        [mem_3_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1bf2{1711090})
        [mem_4_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24})
        if(([mem_3_32] > [mem_4_32])) {
                //block 3d (level: 3, maxHeight: 23, backOrderId: 4, linearLevel: 3, refCount: 1)
                0x3d movss xmm0, dword ptr [rsp+0x20]
                0x43 addss xmm0, [0x00000233CF1B0328]
                0x4b movss [rsp+0x20], xmm0
                0x51 movss xmm0, dword ptr [rsp+0x20]
                0x57 ucomiss xmm0, [rsp+0x24]
                0x5c jp 0x00000233CF00E7C9
                ------------
                [mem_5_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24})
                [mem_6_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1b8d{1710989})
                *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24}) = ([mem_5_32] +.4f [mem_6_32])
                [mem_7_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24})
                [mem_8_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffec{-20})
                if(([mem_7_32] != [mem_8_32])) {
                        //block 79 (level: 4, maxHeight: 18, backOrderId: 9, linearLevel: 4, refCount: 1)
                        0x79 movss xmm0, dword ptr [rsp+0x24]
                        0x7f addss xmm0, [0x00000233CF1B0328]
                        0x87 movss xmm1, dword ptr [rsp+0x20]
                        0x8d ucomiss xmm1, xmm0
                        0x90 jp 0x00000233CF00E80E
                        ------------
                        [mem_b_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffec{-20})
                        [mem_c_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1b51{1710929})
                        [mem_d_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24})
                        if(([mem_d_32] == ([mem_b_32] +.4f [mem_c_32]))) {
                                do {
                                        //block 94 (level: 5, maxHeight: 5, backOrderId: 11, linearLevel: 5, refCount: 2)
                                        0x94 movss xmm0, dword ptr [0x00000233CF1B03B8]
                                        0x9c comiss xmm0, [rsp+0x20]
                                        0xa1 jbe 0x00000233CF00E809
                                        ------------
                                        [mem_e_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1bcc{1711052})
                                        [mem_f_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24})
                                        if(([mem_e_32] <= [mem_f_32])) {
                                                //goto to block b9 (backOrderId: 10; minLinLevel: 6, maxLinLevel: 6) [!!!Normal!!!]
                                        } else {
                                                //goto to block a3 (backOrderId: 10; minLinLevel: 6, maxLinLevel: 6) [None]
                                        }
                                        //goto is null (backOrderId: 10; minLinLevel: 5, maxLinLevel: 6)
                                        //block a3 (level: 6, maxHeight: 3, backOrderId: 10, linearLevel: 6, refCount: 1)
                                        0xa3 movss xmm0, dword ptr [rsp+0x20]
                                        0xa9 addss xmm0, [0x00000233CF1B0328]
                                        0xb1 movss [rsp+0x20], xmm0
                                        0xb7 jmp 0x00000233CF00E7E4
                                        ------------
                                        [mem_10_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24})
                                        [mem_11_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1b27{1710887})
                                        *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24}) = ([mem_10_32] +.4f [mem_11_32])
                                } while(true);
                                //goto to block b9 (backOrderId: 8; minLinLevel: 5, maxLinLevel: 7) [!!!Normal!!!]
                        } else {
                                //goto to block be (backOrderId: 8; minLinLevel: 7, maxLinLevel: 7) [None]
                        }
                        //block be (level: 5, maxHeight: 15, backOrderId: 8, linearLevel: 7, refCount: 1)
                        0xbe movss xmm0, dword ptr [rsp+0x24]
                        0xc4 addss xmm0, [0x00000233CF1B0338]
                        0xcc movss xmm1, dword ptr [rsp+0x20]
                        0xd2 ucomiss xmm1, xmm0
                        0xd5 jp 0x00000233CF00E82B
                        ------------
                        [mem_12_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffec{-20})
                        [mem_13_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1b1c{1710876})
                        [mem_14_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24})
                        if(([mem_14_32] == ([mem_12_32] +.4f [mem_13_32]))) {
                                //block d9 (level: 6, maxHeight: 2, backOrderId: 9, linearLevel: 8, refCount: 1)
                                0xd9 jmp 0x00000233CF00E8A7
                                ------------
                                //goto to block 157 (backOrderId: 7; minLinLevel: 8, maxLinLevel: 9) [break]
                        } else {
                                //goto to block db (backOrderId: 7; minLinLevel: 9, maxLinLevel: 9) [None]
                        }
                        //block db (level: 6, maxHeight: 12, backOrderId: 7, linearLevel: 9, refCount: 1)
                        0xdb movss xmm0, dword ptr [rsp+0x24]
                        0xe1 addss xmm0, [0x00000233CF1B0374]
                        0xe9 movss xmm1, dword ptr [rsp+0x20]
                        0xef ucomiss xmm1, xmm0
                        0xf2 jp 0x00000233CF00E85F
                        ------------
                        [mem_15_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffec{-20})
                        [mem_16_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1b3b{1710907})
                        [mem_17_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24})
                        if(([mem_17_32] == ([mem_15_32] +.4f [mem_16_32]))) {
                                //block f6 (level: 7, maxHeight: 3, backOrderId: 8, linearLevel: 10, refCount: 1)
                                0xf6 movss xmm0, dword ptr [rsp+0x20]
                                0xfc subss xmm0, [0x00000233CF1B0328]
                                0x104 movss [rsp+0x20], xmm0
                                0x10a jmp 0x00000233CF00E77A
                                ------------
                                [mem_18_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24})
                                [mem_19_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1ad4{1710804})
                                *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24}) = (([mem_19_32] *.4f 0xbf800000{-1082130432}) +.4f [mem_18_32])
                                //goto to block 2a (backOrderId: 6; minLinLevel: 10, maxLinLevel: 11) [continue]
                        } else {
                                //goto to block 10f (backOrderId: 6; minLinLevel: 11, maxLinLevel: 11) [None]
                        }
                        //block 10f (level: 7, maxHeight: 9, backOrderId: 6, linearLevel: 11, refCount: 1)
                        0x10f movss xmm0, dword ptr [rsp+0x24]
                        0x115 addss xmm0, [0x00000233CF1B0354]
                        0x11d movss xmm1, dword ptr [rsp+0x20]
                        0x123 ucomiss xmm1, xmm0
                        0x126 jp 0x00000233CF00E88E
                        ------------
                        [mem_1a_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffec{-20})
                        [mem_1b_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1ae7{1710823})
                        [mem_1c_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24})
                        if(([mem_1c_32] == ([mem_1a_32] +.4f [mem_1b_32]))) {
                                //block 12a (level: 8, maxHeight: 6, backOrderId: 6, linearLevel: 12, refCount: 1)
                                0x12a movss xmm0, dword ptr [rsp+0x20]
                                0x130 addss xmm0, [0x00000233CF1B0338]
                                0x138 movss [rsp+0x20], xmm0
                                ------------
                                [mem_1d_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24})
                                [mem_1e_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1ab0{1710768})
                                *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24}) = ([mem_1d_32] +.4f [mem_1e_32])
                                //goto to block 13e (backOrderId: 5; minLinLevel: 12, maxLinLevel: 13) [None]
                        } else {
                                //goto to block 13e (backOrderId: 5; minLinLevel: 13, maxLinLevel: 13) [None]
                        }
                        //block 13e (level: 9, maxHeight: 3, backOrderId: 5, linearLevel: 13, refCount: 2)
                        0x13e movss xmm0, dword ptr [rsp+0x20]
                        0x144 addss xmm0, [0x00000233CF1B0328]
                        0x14c movss [rsp+0x20], xmm0
                        0x152 jmp 0x00000233CF00E77A
                        ------------
                        [mem_1f_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24})
                        [mem_20_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1a8c{1710732})
                        *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24}) = ([mem_1f_32] +.4f [mem_20_32])
                        //goto to block 2a (backOrderId: 3; minLinLevel: 4, maxLinLevel: 14) [continue]
                } else {
                        //block 60 (level: 4, maxHeight: 5, backOrderId: 5, linearLevel: 14, refCount: 1)
                        0x60 movss xmm0, dword ptr [rsp+0x20]
                        0x66 subss xmm0, [0x00000233CF1B0328]
                        0x6e movss [rsp+0x20], xmm0
                        0x74 jmp 0x00000233CF00E8A7
                        ------------
                        [mem_9_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24})
                        [mem_a_32] = *(uint_32t*)([reg_rip:8] +.8 0x1a1b6a{1710954})
                        *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24}) = (([mem_a_32] *.4f 0xbf800000{-1082130432}) +.4f [mem_9_32])
                        //goto to block 157 (backOrderId: 3; minLinLevel: 14, maxLinLevel: 15) [break]
                }
                //goto is null (backOrderId: 3; minLinLevel: 3, maxLinLevel: 15)
        } else {
                //goto to block 157 (backOrderId: 3; minLinLevel: 15, maxLinLevel: 15) [break]
        }
        //goto is null (backOrderId: 3; minLinLevel: 2, maxLinLevel: 15)
        //block b9 (level: 6, maxHeight: 0, backOrderId: 3, linearLevel: 15, refCount: 1)
        0xb9 jmp 0x00000233CF00E77A
        ------------
} while(true);
//block 157 (level: 7, maxHeight: 2, backOrderId: 2, linearLevel: 16, refCount: 3)
0x157 cvttss2si eax, [rsp+0x20]
0x15d add rsp, 0x38
0x161 ret
------------
[mem_21_64] = *(uint_64t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24})
[mem_22_64] = *(uint_64t*)[reg_rsp:8]
return TOINT([mem_21_64])
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 17)





SAMPLE 7 <----                                                                                                         ЫП ­
mov rbx, 0x10000010
cmp rax, rbx
cmovz rax, rbx
mov [rsp+0x30], rax
********************* BEFORE OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 0, backOrderId: 3, linearLevel: 1, refCount: 0)
0x0 mov rax, 0x10235555
0x7 mov rbx, 0x10000010
0xe cmp rax, rbx
0x11 cmovz rax, rbx
------------
<Symbol assignments>:
- [var_1_64] = 0x10235555{270751061}
if(!(!(((0x10235555{270751061} +.8 (0x10000010{268435472} *.8 0xffffffffffffffff{-1})) == 0x0{0})))) {
        //block 11 (level: 2, maxHeight: 0, backOrderId: 3, linearLevel: 2, refCount: 1)
        ------------
        <Symbol assignments>:
        - [var_1_64] = 0x10000010{268435472}
        //goto to block 15 (backOrderId: 2; minLinLevel: 2, maxLinLevel: 3) [None]
} else {
        //goto to block 15 (backOrderId: 2; minLinLevel: 3, maxLinLevel: 3) [None]
}
//block 15 (level: 3, maxHeight: 0, backOrderId: 2, linearLevel: 3, refCount: 2)
0x15 mov [rsp+0x30], rax
------------
*(uint_64t*)([reg_rsp:8] +.8 0x30{48}) = [var_1_64]
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 4)



********************* AFTER OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 3, backOrderId: 3, linearLevel: 1, refCount: 0)
0x0 mov rax, 0x10235555
0x7 mov rbx, 0x10000010
0xe cmp rax, rbx
0x11 cmovz rax, rbx
------------
[var_1_64] = 0x10235555{270751061}
if((0x235545{2315589} == 0x0{0})) {
        //block 11 (level: 2, maxHeight: 2, backOrderId: 3, linearLevel: 2, refCount: 1)
        ------------
        [var_1_64] = 0x10000010{268435472}
        //goto to block 15 (backOrderId: 2; minLinLevel: 2, maxLinLevel: 3) [None]
} else {
        //goto to block 15 (backOrderId: 2; minLinLevel: 3, maxLinLevel: 3) [None]
}
//block 15 (level: 3, maxHeight: 1, backOrderId: 2, linearLevel: 3, refCount: 2)
0x15 mov [rsp+0x30], rax
------------
*(uint_64t*)([reg_rsp:8] +.8 0x30{48}) = [var_1_64]
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 4)





SAMPLE 25 <----                                                                                                        ЫП ­
mov ebx, edx
cmp eax, 0x00
jnl 0x00000233CF00C6BB
neg eax
cmp ebx, 0x00
jnl 0x00000233CF00C6C2
neg ebx
cmp eax, ebx
jnl 0x00000233CF00C6C7
xchg ebx, eax
cmp ebx, 0x00
jz 0x00000233CF00C6D0
sub eax, ebx
jmp 0x00000233CF00C6C2
mov [rsp], eax
mov [rsp], ebx
********************* BEFORE OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 0, backOrderId: 7, linearLevel: 1, refCount: 0)
0x0 mov eax, ecx
0x2 mov ebx, edx
0x4 cmp eax, 0x00
0x7 jnl 0x00000233CF00C6BB
------------
<Symbol assignments>:
- [var_6_32] = [reg_rcx:4]
if(!((SBORROW([reg_rcx:4], 0x0{0}) == (([reg_rcx:4] +.4 (0x0{0} *.4 0xffffffff{-1})) < 0x0{0})))) {
        //block 9 (level: 2, maxHeight: 0, backOrderId: 7, linearLevel: 2, refCount: 1)
        0x9 neg eax
        ------------
        <Symbol assignments>:
        - [var_6_32] = ([reg_rcx:4] *.4 0xffffffff{-1})
        //goto to block b (backOrderId: 6; minLinLevel: 2, maxLinLevel: 3) [None]
} else {
        //goto to block b (backOrderId: 6; minLinLevel: 3, maxLinLevel: 3) [None]
}
//block b (level: 3, maxHeight: 0, backOrderId: 6, linearLevel: 3, refCount: 2)
0xb cmp ebx, 0x00
0xe jnl 0x00000233CF00C6C2
------------
<Symbol assignments>:
- [var_4_32] = [reg_rdx:4]
if(!((SBORROW([reg_rdx:4], 0x0{0}) == (([reg_rdx:4] +.4 (0x0{0} *.4 0xffffffff{-1})) < 0x0{0})))) {
        //block 10 (level: 4, maxHeight: 0, backOrderId: 6, linearLevel: 4, refCount: 1)
        0x10 neg ebx
        ------------
        <Symbol assignments>:
        - [var_4_32] = ([reg_rdx:4] *.4 0xffffffff{-1})
        //goto to block 12 (backOrderId: 5; minLinLevel: 4, maxLinLevel: 5) [None]
} else {
        //goto to block 12 (backOrderId: 5; minLinLevel: 5, maxLinLevel: 5) [None]
}
do {
        //block 12 (level: 5, maxHeight: 0, backOrderId: 5, linearLevel: 5, refCount: 3)
        0x12 cmp eax, ebx
        0x14 jnl 0x00000233CF00C6C7
        ------------
        if(!((SBORROW([var_6_32], [var_4_32]) == (([var_6_32] +.4 ([var_4_32] *.4 0xffffffff{-1})) < 0x0{0})))) {
                //block 16 (level: 6, maxHeight: 0, backOrderId: 5, linearLevel: 6, refCount: 1)
                0x16 xchg ebx, eax
                ------------
                <Symbol assignments>:
                - [var_6_32] = [var_4_32]
                - [var_4_32] = [var_6_32]
                //goto to block 17 (backOrderId: 4; minLinLevel: 6, maxLinLevel: 7) [None]
        } else {
                //goto to block 17 (backOrderId: 4; minLinLevel: 7, maxLinLevel: 7) [None]
        }
        //block 17 (level: 7, maxHeight: 0, backOrderId: 4, linearLevel: 7, refCount: 2)
        0x17 cmp ebx, 0x00
        0x1a jz 0x00000233CF00C6D0
        ------------
        if((([var_4_32] +.4 (0x0{0} *.4 0xffffffff{-1})) == 0x0{0})) {
                //goto to block 20 (backOrderId: 3; minLinLevel: 8, maxLinLevel: 8) [break]
        } else {
                //goto to block 1c (backOrderId: 3; minLinLevel: 8, maxLinLevel: 8) [None]
        }
        //goto is null (backOrderId: 3; minLinLevel: 5, maxLinLevel: 8)
        //block 1c (level: 8, maxHeight: 0, backOrderId: 3, linearLevel: 8, refCount: 1)
        0x1c sub eax, ebx
        0x1e jmp 0x00000233CF00C6C2
        ------------
        <Symbol assignments>:
        - [var_6_32] = ([var_6_32] +.4 ([var_4_32] *.4 0xffffffff{-1}))
} while(true);
//block 20 (level: 8, maxHeight: 0, backOrderId: 2, linearLevel: 9, refCount: 1)
0x20 mov [rsp], eax
0x23 mov [rsp], ebx
------------
*(uint_32t*)[reg_rsp:8] = [var_6_32]
*(uint_32t*)[reg_rsp:8] = [var_4_32]
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 10)



********************* AFTER OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 9, backOrderId: 7, linearLevel: 1, refCount: 0)
0x0 mov eax, ecx
0x2 mov ebx, edx
0x4 cmp eax, 0x00
0x7 jnl 0x00000233CF00C6BB
------------
[var_6_32] = [reg_rcx:4]
if(([reg_rcx:4] < 0x0{0})) {
        //block 9 (level: 2, maxHeight: 8, backOrderId: 7, linearLevel: 2, refCount: 1)
        0x9 neg eax
        ------------
        [var_6_32] = ([reg_rcx:4] *.4 0xffffffff{-1})
        //goto to block b (backOrderId: 6; minLinLevel: 2, maxLinLevel: 3) [None]
} else {
        //goto to block b (backOrderId: 6; minLinLevel: 3, maxLinLevel: 3) [None]
}
//block b (level: 3, maxHeight: 7, backOrderId: 6, linearLevel: 3, refCount: 2)
0xb cmp ebx, 0x00
0xe jnl 0x00000233CF00C6C2
------------
[var_4_32] = [reg_rdx:4]
if(([reg_rdx:4] < 0x0{0})) {
        //block 10 (level: 4, maxHeight: 6, backOrderId: 6, linearLevel: 4, refCount: 1)
        0x10 neg ebx
        ------------
        [var_4_32] = ([reg_rdx:4] *.4 0xffffffff{-1})
        //goto to block 12 (backOrderId: 5; minLinLevel: 4, maxLinLevel: 5) [None]
} else {
        //goto to block 12 (backOrderId: 5; minLinLevel: 5, maxLinLevel: 5) [None]
}
do {
        //block 12 (level: 5, maxHeight: 5, backOrderId: 5, linearLevel: 5, refCount: 3)
        0x12 cmp eax, ebx
        0x14 jnl 0x00000233CF00C6C7
        ------------
        if(([var_6_32] < [var_4_32])) {
                //block 16 (level: 6, maxHeight: 5, backOrderId: 5, linearLevel: 6, refCount: 1)
                0x16 xchg ebx, eax
                ------------
                [var_7_32] = [var_6_32]
                [var_6_32] = [var_4_32]
                [var_4_32] = [var_7_32]
                //goto to block 17 (backOrderId: 4; minLinLevel: 6, maxLinLevel: 7) [None]
        } else {
                //goto to block 17 (backOrderId: 4; minLinLevel: 7, maxLinLevel: 7) [None]
        }
        //block 17 (level: 7, maxHeight: 2, backOrderId: 4, linearLevel: 7, refCount: 2)
        0x17 cmp ebx, 0x00
        0x1a jz 0x00000233CF00C6D0
        ------------
        if(([var_4_32] == 0x0{0})) {
                //goto to block 20 (backOrderId: 3; minLinLevel: 8, maxLinLevel: 8) [break]
        } else {
                //goto to block 1c (backOrderId: 3; minLinLevel: 8, maxLinLevel: 8) [None]
        }
        //goto is null (backOrderId: 3; minLinLevel: 5, maxLinLevel: 8)
        //block 1c (level: 8, maxHeight: 1, backOrderId: 3, linearLevel: 8, refCount: 1)
        0x1c sub eax, ebx
        0x1e jmp 0x00000233CF00C6C2
        ------------
        [var_6_32] = ([var_6_32] +.4 ([var_4_32] *.4 0xffffffff{-1}))
} while(true);
//block 20 (level: 8, maxHeight: 2, backOrderId: 2, linearLevel: 9, refCount: 1)
0x20 mov [rsp], eax
0x23 mov [rsp], ebx
------------
*(uint_32t*)[reg_rsp:8] = [var_6_32]
*(uint_32t*)[reg_rsp:8] = [var_4_32]
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 10)





SAMPLE 100 <----                                                                                                       ЫП ­
sub rsp, 0x20
mov ebx, edx
cmp edx, 0x0A
jle 0x00000233CF00D0AD
lea eax, [rdx-0x0B]
cmp eax, 0x0D
jnbe 0x00000233CF00D0AA
add ebx, 0x19
jmp 0x00000233CF00D0AD
sub ebx, 0x0E
call 0x00000233CEFF9AF8
test rax, rax
jz 0x00000233CF00D0E3
cmp ebx, 0x31
jnbe 0x00000233CF00D0E3
mov rdx, 0x343FFFFFFFFFF
bt rdx, rbx
jnb 0x00000233CF00D0E3
mov rcx, [rax+0x48]
mov r8, rax
mov edx, ebx
add rcx, 0x40
add rsp, 0x20
pop rbx
jmp 0x00000233CE91E0F0
xor eax, eax
add rsp, 0x20
pop rbx
ret
int3
********************* BEFORE OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 0, backOrderId: 4, linearLevel: 1, refCount: 0)
0x0 push rbx
0x2 sub rsp, 0x20
0x6 mov ebx, edx
0x8 cmp edx, 0x0A
0xb jle 0x00000233CF00D0AD
------------
*(uint_64t*)([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) = [reg_rbx:8]
<Symbol assignments>:
- [var_9_64] = [reg_rdx:4]
if(!(((([reg_rdx:4] +.4 (0xa{10} *.4 0xffffffff{-1})) == 0x0{0}) || (SBORROW([reg_rdx:4], 0xa{10}) != (([reg_rdx:4] +.4 (0xa{10} *.4 0xffffffff{-1})) < 0x0{0}))))) {
        //block d (level: 2, maxHeight: 0, backOrderId: 4, linearLevel: 2, refCount: 1)
        0xd lea eax, [rdx-0x0B]
        0x10 cmp eax, 0x0D
        0x13 jnbe 0x00000233CF00D0AA
        ------------
        if(!(!(((([reg_rdx:4] +.4 0xfffffff5{-11}) < 0xd{13}) || ((([reg_rdx:4] +.4 0xfffffff5{-11}) +.4 (0xd{13} *.4 0xffffffff{-1})) == 0x0{0}))))) {
                //block 15 (level: 3, maxHeight: 0, backOrderId: 4, linearLevel: 3, refCount: 1)
                0x15 add ebx, 0x19
                0x18 jmp 0x00000233CF00D0AD
                ------------
                <Symbol assignments>:
                - [var_9_64] = ([reg_rdx:4] +.4 0x19{25})
                //goto to block 1d (backOrderId: 3; minLinLevel: 3, maxLinLevel: 4) [None]
        } else {
                //block 1a (level: 3, maxHeight: 0, backOrderId: 4, linearLevel: 4, refCount: 1)
                0x1a sub ebx, 0x0E
                ------------
                <Symbol assignments>:
                - [var_9_64] = ([reg_rdx:4] +.4 (0xe{14} *.4 0xffffffff{-1}))
                //goto to block 1d (backOrderId: 3; minLinLevel: 4, maxLinLevel: 5) [None]
        }
        //goto is null (backOrderId: 3; minLinLevel: 2, maxLinLevel: 5)
} else {
        //goto to block 1d (backOrderId: 3; minLinLevel: 5, maxLinLevel: 5) [None]
}
//block 1d (level: 4, maxHeight: 0, backOrderId: 3, linearLevel: 5, refCount: 3)
0x1d call 0x00000233CEFF9AF8
0x22 test rax, rax
0x25 jz 0x00000233CF00D0E3
------------
[funcVar_3_32] = fun_49920744([reg_rcx:4], [reg_rdx:4], [reg_r8:4], [reg_r9:Da])
if(!((([funcVar_3_32] &.8 [funcVar_3_32]) == 0x0{0}))) {
        //block 27 (level: 5, maxHeight: 0, backOrderId: 3, linearLevel: 6, refCount: 1)
        0x27 cmp ebx, 0x31
        0x2a jnbe 0x00000233CF00D0E3
        ------------
        if(!(!((([var_9_64] < 0x31{49}) || (([var_9_64] +.4 (0x31{49} *.4 0xffffffff{-1})) == 0x0{0}))))) {
                //block 2c (level: 6, maxHeight: 0, backOrderId: 3, linearLevel: 7, refCount: 1)
                0x2c mov rdx, 0x343FFFFFFFFFF
                0x36 bt rdx, rbx
                0x3a jnb 0x00000233CF00D0E3
                ------------
                if(!(!((((0x343ffffffffff{-1} >>.8 ([var_9_64] &.8 0x3f{63})) &.8 0x1{1}) != 0x0{0})))) {
                        //block 3c (level: 7, maxHeight: 0, backOrderId: 3, linearLevel: 8, refCount: 1)
                        0x3c mov rcx, [rax+0x48]
                        0x40 mov r8, rax
                        0x43 mov edx, ebx
                        0x45 add rcx, 0x40
                        0x49 add rsp, 0x20
                        0x4d pop rbx
                        0x4e jmp 0x00000233CE91E0F0
                        ------------
                        [mem_23_64] = *(uint_64t*)([funcVar_3_32] +.8 0x48{72})
                        [mem_24_64] = *(uint_64t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x20{32} *.8 0xffffffffffffffff{-1})) +.8 0x20{32})
                        //goto is null (backOrderId: 2; minLinLevel: 8, maxLinLevel: 9)
                } else {
                        //goto to block 53 (backOrderId: 2; minLinLevel: 9, maxLinLevel: 9) [None]
                }
                //goto is null (backOrderId: 2; minLinLevel: 7, maxLinLevel: 9)
        } else {
                //goto to block 53 (backOrderId: 2; minLinLevel: 9, maxLinLevel: 9) [None]
        }
        //goto is null (backOrderId: 2; minLinLevel: 6, maxLinLevel: 9)
} else {
        //goto to block 53 (backOrderId: 2; minLinLevel: 9, maxLinLevel: 9) [None]
}
//block 53 (level: 7, maxHeight: 0, backOrderId: 2, linearLevel: 9, refCount: 3)
0x53 xor eax, eax
0x55 add rsp, 0x20
0x59 pop rbx
0x5a ret
------------
[mem_25_64] = *(uint_64t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x20{32} *.8 0xffffffffffffffff{-1})) +.8 0x20{32})
[mem_26_64] = *(uint_64t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x20{32} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) +.8 0x8{8})
return ([funcVar_3_32] ^.4 [funcVar_3_32])
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 10)



********************* AFTER OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 5, backOrderId: 4, linearLevel: 1, refCount: 0)
0x0 push rbx
0x2 sub rsp, 0x20
0x6 mov ebx, edx
0x8 cmp edx, 0x0A
0xb jle 0x00000233CF00D0AD
------------
[var_9_64] = [reg_rdx:4]
if(([reg_rdx:4] > 0xa{10})) {
        //block d (level: 2, maxHeight: 4, backOrderId: 4, linearLevel: 2, refCount: 1)
        0xd lea eax, [rdx-0x0B]
        0x10 cmp eax, 0x0D
        0x13 jnbe 0x00000233CF00D0AA
        ------------
        if(([reg_rdx:4] <= 0x18{24})) {
                //block 15 (level: 3, maxHeight: 4, backOrderId: 4, linearLevel: 3, refCount: 1)
                0x15 add ebx, 0x19
                0x18 jmp 0x00000233CF00D0AD
                ------------
                [var_9_64] = ([reg_rdx:4] +.4 0x19{25})
                //goto to block 1d (backOrderId: 3; minLinLevel: 3, maxLinLevel: 4) [None]
        } else {
                //block 1a (level: 3, maxHeight: 4, backOrderId: 4, linearLevel: 4, refCount: 1)
                0x1a sub ebx, 0x0E
                ------------
                [var_9_64] = ([reg_rdx:4] +.4 0xfffffff2{-14})
                //goto to block 1d (backOrderId: 3; minLinLevel: 4, maxLinLevel: 5) [None]
        }
        //goto is null (backOrderId: 3; minLinLevel: 2, maxLinLevel: 5)
} else {
        //goto to block 1d (backOrderId: 3; minLinLevel: 5, maxLinLevel: 5) [None]
}
//block 1d (level: 4, maxHeight: 3, backOrderId: 3, linearLevel: 5, refCount: 3)
0x1d call 0x00000233CEFF9AF8
0x22 test rax, rax
0x25 jz 0x00000233CF00D0E3
------------
[funcVar_3_32] = fun_49920744([reg_rcx:4], [reg_rdx:4], [reg_r8:4], [reg_r9:Da])
if((((((0x343ffffffffff{-1} >>.8 ([var_9_64] &.8 0x3f{63})) &.8 0x1{1}) == 0x0{0}) || ([var_9_64] > 0x31{49})) || ([funcVar_3_32] == 0x0{0}))) {
        //block 53 (level: 5, maxHeight: 2, backOrderId: 3, linearLevel: 6, refCount: 1)
        0x53 xor eax, eax
        0x55 add rsp, 0x20
        0x59 pop rbx
        0x5a ret
        ------------
        [mem_25_64] = *(uint_64t*)([reg_rsp:8] +.8 0xfffffffffffffff8{-8})
        [mem_26_64] = *(uint_64t*)[reg_rsp:8]
        return 0x0{0}
        //goto is null (backOrderId: 2; minLinLevel: 6, maxLinLevel: 7)
} else {
        //goto to block 3c (backOrderId: 2; minLinLevel: 7, maxLinLevel: 7) [None]
}
//block 3c (level: 5, maxHeight: 2, backOrderId: 2, linearLevel: 7, refCount: 1)
0x3c mov rcx, [rax+0x48]
0x40 mov r8, rax
0x43 mov edx, ebx
0x45 add rcx, 0x40
0x49 add rsp, 0x20
0x4d pop rbx
0x4e jmp 0x00000233CE91E0F0
------------
[mem_23_64] = *(uint_64t*)([funcVar_3_32] +.8 0x48{72})
[mem_24_64] = *(uint_64t*)([reg_rsp:8] +.8 0xfffffffffffffff8{-8})
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 8)





SAMPLE 101 <----                                                                                                       ЫП ­
call 0x00000233CEFF7904
test rax, rax
jz 0x00000233CF00C6FC
mov rax, [rax+0x20]
movzx eax, byte ptr [rax+0x518]
and eax, 0x1F
add rsp, 0x28
ret
nop
mov ebp, ebp
********************* BEFORE OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 0, backOrderId: 3, linearLevel: 1, refCount: 0)
0x0 sub rsp, 0x28
0x4 call 0x00000233CEFF7904
0x9 test rax, rax
0xc jz 0x00000233CF00C6FC
------------
[funcVar_4_32] = fun_49914532([reg_rcx:4], [reg_rdx:4], [reg_r8:4], [reg_r9:Da])
<Symbol assignments>:
- [var_a_32] = [funcVar_4_32]
if(!((([funcVar_4_32] &.8 [funcVar_4_32]) == 0x0{0}))) {
        //block e (level: 2, maxHeight: 0, backOrderId: 3, linearLevel: 2, refCount: 1)
        0xe mov rax, [rax+0x20]
        0x12 movzx eax, byte ptr [rax+0x518]
        0x19 and eax, 0x1F
        ------------
        [mem_27_64] = *(uint_64t*)([funcVar_4_32] +.8 0x20{32})
        [mem_28_8] = *(uint_8t*)([mem_27_64] +.8 0x518{1304})
        <Symbol assignments>:
        - [var_a_32] = ([mem_28_8] &.4 0x1f{31})
        //goto to block 1c (backOrderId: 2; minLinLevel: 2, maxLinLevel: 3) [None]
} else {
        //goto to block 1c (backOrderId: 2; minLinLevel: 3, maxLinLevel: 3) [None]
}
//block 1c (level: 3, maxHeight: 0, backOrderId: 2, linearLevel: 3, refCount: 2)
0x1c add rsp, 0x28
0x20 ret
0x22 mov ebp, ebp
------------
[mem_29_64] = *(uint_64t*)(([reg_rsp:8] +.8 (0x28{40} *.8 0xffffffffffffffff{-1})) +.8 0x28{40})
return [var_a_32]
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 4)



********************* AFTER OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 6, backOrderId: 3, linearLevel: 1, refCount: 0)
0x0 sub rsp, 0x28
0x4 call 0x00000233CEFF7904
0x9 test rax, rax
0xc jz 0x00000233CF00C6FC
------------
[funcVar_4_32] = fun_49914532([reg_rcx:4], [reg_rdx:4], [reg_r8:4], [reg_r9:Da])
[var_a_32] = [funcVar_4_32]
if(([funcVar_4_32] != 0x0{0})) {
        //block e (level: 2, maxHeight: 4, backOrderId: 3, linearLevel: 2, refCount: 1)
        0xe mov rax, [rax+0x20]
        0x12 movzx eax, byte ptr [rax+0x518]
        0x19 and eax, 0x1F
        ------------
        [mem_27_64] = *(uint_64t*)([funcVar_4_32] +.8 0x20{32})
        [mem_28_8] = *(uint_8t*)([mem_27_64] +.8 0x518{1304})
        [var_a_32] = ([mem_28_8] &.4 0x1f{31})
        //goto to block 1c (backOrderId: 2; minLinLevel: 2, maxLinLevel: 3) [None]
} else {
        //goto to block 1c (backOrderId: 2; minLinLevel: 3, maxLinLevel: 3) [None]
}
//block 1c (level: 3, maxHeight: 1, backOrderId: 2, linearLevel: 3, refCount: 2)
0x1c add rsp, 0x28
0x20 ret
0x22 mov ebp, ebp
------------
[mem_29_64] = *(uint_64t*)[reg_rsp:8]
return [var_a_32]
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 4)





SAMPLE 102 <----                                                                                                       ЫП ­
mov eax, [rsp+0x38]
lea rdx, [rsp+0x40]
mov dword ptr [rsp+0x40], 0xFFFF
or eax, 0xFFFFFFF
and eax, 0xFFFFFFF
mov [rsp+0x38], eax
call 0x00000233CF8C6078
movzx ecx, word ptr [rsp+0x40]
mov [rsp+0x38], cx
mov ecx, [rsp+0x38]
mov r8, rax
or ecx, 0xFFF0000
xor eax, eax
btr ecx, 0x1C
cmp cx, 0xFFFF
jz 0x00000233CF00D15C
test r8, r8
jz 0x00000233CF00D15C
movzx eax, byte ptr [r8+0x518]
and eax, 0x1F
add rsp, 0x28
ret
int3
push rsp
********************* BEFORE OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 0, backOrderId: 3, linearLevel: 1, refCount: 0)
0x0 sub rsp, 0x28
0x4 mov eax, [rsp+0x38]
0x8 lea rdx, [rsp+0x40]
0xd mov dword ptr [rsp+0x40], 0xFFFF
0x15 or eax, 0xFFFFFFF
0x1a and eax, 0xFFFFFFF
0x1f mov [rsp+0x38], eax
0x23 call 0x00000233CF8C6078
0x28 movzx ecx, word ptr [rsp+0x40]
0x2d mov [rsp+0x38], cx
0x32 mov ecx, [rsp+0x38]
0x36 mov r8, rax
0x39 or ecx, 0xFFF0000
0x3f xor eax, eax
0x41 btr ecx, 0x1C
0x45 cmp cx, 0xFFFF
0x4a jz 0x00000233CF00D15C
------------
[mem_2a_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x28{40} *.8 0xffffffffffffffff{-1})) +.8 0x38{56})
*(uint_32t*)(([reg_rsp:8] +.8 (0x28{40} *.8 0xffffffffffffffff{-1})) +.8 0x40{64}) = 0xffff{65535}
*(uint_32t*)(([reg_rsp:8] +.8 (0x28{40} *.8 0xffffffffffffffff{-1})) +.8 0x38{56}) = (([mem_2a_32] |.4 0xfffffff{268435455}) &.4 0xfffffff{268435455})
[funcVar_5_32] = fun_59146232([reg_rcx:4], ((([reg_rsp:8] +.8 (0x28{40} *.8 0xffffffffffffffff{-1})) +.8 0x40{64}) &.0 0xffffffff{-1}), [reg_r8:4], [reg_r9:Da])
[mem_2b_16] = *(uint_16t*)(([reg_rsp:8] +.8 (0x28{40} *.8 0xffffffffffffffff{-1})) +.8 0x40{64})
*(uint_16t*)(([reg_rsp:8] +.8 (0x28{40} *.8 0xffffffffffffffff{-1})) +.8 0x38{56}) = ([mem_2b_16] &.0 0xffff{65535})
[mem_2c_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x28{40} *.8 0xffffffffffffffff{-1})) +.8 0x38{56})
<Symbol assignments>:
- [var_b_32] = ([funcVar_5_32] ^.4 [funcVar_5_32])
if(!(((((([mem_2c_32] |.4 0xfff0000{268369920}) &.4 ~(0x1{1} <<.8 (0x1c{28} &.8 0x3f{63}))) &.0 0xffff{65535}) +.2 (0xffff{65535} *.2 0xffff{65535})) == 0x0{0}))) {
        //block 4c (level: 2, maxHeight: 0, backOrderId: 3, linearLevel: 2, refCount: 1)
        0x4c test r8, r8
        0x4f jz 0x00000233CF00D15C
        ------------
        if(!((([funcVar_5_32] &.8 [funcVar_5_32]) == 0x0{0}))) {
                //block 51 (level: 3, maxHeight: 0, backOrderId: 3, linearLevel: 3, refCount: 1)
                0x51 movzx eax, byte ptr [r8+0x518]
                0x59 and eax, 0x1F
                ------------
                [mem_2d_8] = *(uint_8t*)([funcVar_5_32] +.8 0x518{1304})
                <Symbol assignments>:
                - [var_b_32] = ([mem_2d_8] &.4 0x1f{31})
                //goto to block 5c (backOrderId: 2; minLinLevel: 3, maxLinLevel: 4) [None]
        } else {
                //goto to block 5c (backOrderId: 2; minLinLevel: 4, maxLinLevel: 4) [None]
        }
        //goto is null (backOrderId: 2; minLinLevel: 2, maxLinLevel: 4)
} else {
        //goto to block 5c (backOrderId: 2; minLinLevel: 4, maxLinLevel: 4) [None]
}
//block 5c (level: 4, maxHeight: 0, backOrderId: 2, linearLevel: 4, refCount: 3)
0x5c add rsp, 0x28
0x60 ret
0x62 push rsp
------------
[mem_2e_64] = *(uint_64t*)(([reg_rsp:8] +.8 (0x28{40} *.8 0xffffffffffffffff{-1})) +.8 0x28{40})
*(uint_64t*)(((([reg_rsp:8] +.8 (0x28{40} *.8 0xffffffffffffffff{-1})) +.8 0x28{40}) +.8 0x8{8}) +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) = (((([reg_rsp:8] +.8 (0x28{40} *.8 0xffffffffffffffff{-1})) +.8 0x28{40}) +.8 0x8{8}) +.8 (0x8{8} *.8 0xffffffffffffffff{-1}))
return [var_b_32]
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 5)



********************* AFTER OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 12, backOrderId: 3, linearLevel: 1, refCount: 0)
0x0 sub rsp, 0x28
0x4 mov eax, [rsp+0x38]
0x8 lea rdx, [rsp+0x40]
0xd mov dword ptr [rsp+0x40], 0xFFFF
0x15 or eax, 0xFFFFFFF
0x1a and eax, 0xFFFFFFF
0x1f mov [rsp+0x38], eax
0x23 call 0x00000233CF8C6078
0x28 movzx ecx, word ptr [rsp+0x40]
0x2d mov [rsp+0x38], cx
0x32 mov ecx, [rsp+0x38]
0x36 mov r8, rax
0x39 or ecx, 0xFFF0000
0x3f xor eax, eax
0x41 btr ecx, 0x1C
0x45 cmp cx, 0xFFFF
0x4a jz 0x00000233CF00D15C
------------
[mem_2a_32] = *(uint_32t*)([reg_rsp:8] +.8 0x10{16})
*(uint_32t*)([reg_rsp:8] +.8 0x18{24}) = 0xffff{65535}
*(uint_32t*)([reg_rsp:8] +.8 0x10{16}) = (([mem_2a_32] |.4 0xfffffff{268435455}) &.4 0xfffffff{268435455})
[funcVar_5_32] = fun_59146232([reg_rcx:4], (([reg_rsp:8] +.8 0x18{24}) &.4 0xffffffff{-1}), [reg_r8:4], [reg_r9:Da])
[mem_2b_16] = *(uint_16t*)([reg_rsp:8] +.8 0x18{24})
*(uint_16t*)([reg_rsp:8] +.8 0x10{16}) = [mem_2b_16]
[mem_2c_32] = *(uint_32t*)([reg_rsp:8] +.8 0x10{16})
[var_b_32] = 0x0{0}
if(((([mem_2c_32] &.4 0xffff{65535}) != 0xffff{65535}) && ([funcVar_5_32] != 0x0{0}))) {
        //block 51 (level: 2, maxHeight: 4, backOrderId: 3, linearLevel: 2, refCount: 1)
        0x51 movzx eax, byte ptr [r8+0x518]
        0x59 and eax, 0x1F
        ------------
        [mem_2d_8] = *(uint_8t*)([funcVar_5_32] +.8 0x518{1304})
        [var_b_32] = ([mem_2d_8] &.4 0x1f{31})
        //goto to block 5c (backOrderId: 2; minLinLevel: 2, maxLinLevel: 3) [None]
} else {
        //goto to block 5c (backOrderId: 2; minLinLevel: 3, maxLinLevel: 3) [None]
}
//block 5c (level: 3, maxHeight: 2, backOrderId: 2, linearLevel: 3, refCount: 2)
0x5c add rsp, 0x28
0x60 ret
0x62 push rsp
------------
[mem_2e_64] = *(uint_64t*)[reg_rsp:8]
*(uint_64t*)[reg_rsp:8] = [reg_rsp:8]
return [var_b_32]
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 4)





SAMPLE 202 <----                                                                                                       ЫП ­
sub rsp, 0x50
movaps [rsp+0x40], xmm6
movss xmm6, dword ptr [0x00000233D0F817A4]
mov rbx, rcx
movaps [rsp+0x30], xmm7
movss xmm7, dword ptr [0x00000233D0F817A8]
mov ecx, edx
movaps [rsp+0x20], xmm8
movss xmm8, dword ptr [0x00000233D0F817AC]
call 0x00000233CEFEB208
test rax, rax
jz 0x00000233CF00D1C2
movaps xmm6, [rax+0x70]
movaps xmm7, xmm6
movaps xmm8, xmm6
shufps xmm7, xmm6, 0x55
shufps xmm8, xmm6, 0xAA
movss [rbx], xmm6
movaps xmm6, [rsp+0x40]
movss [rbx+0x08], xmm7
movaps xmm7, [rsp+0x30]
mov rax, rbx
movss [rbx+0x10], xmm8
movaps xmm8, [rsp+0x20]
add rsp, 0x50
pop rbx
ret
nop
********************* BEFORE OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 0, backOrderId: 3, linearLevel: 1, refCount: 0)
0x0 push rbx
0x2 sub rsp, 0x50
0x6 movaps [rsp+0x40], xmm6
0xb movss xmm6, dword ptr [0x00000233D0F817A4]
0x13 mov rbx, rcx
0x16 movaps [rsp+0x30], xmm7
0x1b movss xmm7, dword ptr [0x00000233D0F817A8]
0x23 mov ecx, edx
0x25 movaps [rsp+0x20], xmm8
0x2b movss xmm8, dword ptr [0x00000233D0F817AC]
0x34 call 0x00000233CEFEB208
0x39 test rax, rax
0x3c jz 0x00000233CF00D1C2
------------
*(uint_64t*)([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) = [reg_rbx:8]
*(uint_32t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x40{64}) = [reg_zmm6:Da]
*(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x40{64}) +.8 0x4{4}) = [reg_zmm6:Db]
*(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x40{64}) +.8 0x8{8}) = [reg_zmm6:Dc]
*(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x40{64}) +.8 0xc{12}) = [reg_zmm6:Dd]
[mem_2f_32] = *(uint_32t*)([reg_rip:8] +.8 0x1f74621{32982561})
*(uint_32t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x30{48}) = [reg_zmm7:Da]
*(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x30{48}) +.8 0x4{4}) = [reg_zmm7:Db]
*(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x30{48}) +.8 0x8{8}) = [reg_zmm7:Dc]
*(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x30{48}) +.8 0xc{12}) = [reg_zmm7:Dd]
[mem_30_32] = *(uint_32t*)([reg_rip:8] +.8 0x1f74615{32982549})
*(uint_32t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) = [reg_zmm8:Da]
*(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) +.8 0x4{4}) = [reg_zmm8:Db]
*(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) +.8 0x8{8}) = [reg_zmm8:Dc]
*(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) +.8 0xc{12}) = [reg_zmm8:Dd]
[mem_31_32] = *(uint_32t*)([reg_rip:8] +.8 0x1f74608{32982536})
[funcVar_6_32] = fun_49860888([reg_rdx:4], [reg_rdx:4], [reg_r8:4], [reg_r9:Da])
<Symbol assignments>:
- [var_c_32] = [mem_2f_32]
- [var_d_32] = [mem_30_32]
- [var_e_32] = [mem_31_32]
if(!((([funcVar_6_32] &.8 [funcVar_6_32]) == 0x0{0}))) {
        //block 3e (level: 2, maxHeight: 0, backOrderId: 3, linearLevel: 2, refCount: 1)
        0x3e movaps xmm6, [rax+0x70]
        0x42 movaps xmm7, xmm6
        0x45 movaps xmm8, xmm6
        0x49 shufps xmm7, xmm6, 0x55
        0x4d shufps xmm8, xmm6, 0xAA
        ------------
        [mem_32_32] = *(uint_32t*)([funcVar_6_32] +.8 0x70{112})
        [mem_33_32] = *(uint_32t*)(([funcVar_6_32] +.8 0x70{112}) +.8 0x4{4})
        [mem_34_32] = *(uint_32t*)(([funcVar_6_32] +.8 0x70{112}) +.8 0x8{8})
        [mem_35_32] = *(uint_32t*)(([funcVar_6_32] +.8 0x70{112}) +.8 0xc{12})
        <Symbol assignments>:
        - [var_c_32] = [mem_32_32]
        - [var_d_32] = [mem_33_32]
        - [var_e_32] = [mem_34_32]
        //goto to block 52 (backOrderId: 2; minLinLevel: 2, maxLinLevel: 3) [None]
} else {
        //goto to block 52 (backOrderId: 2; minLinLevel: 3, maxLinLevel: 3) [None]
}
//block 52 (level: 3, maxHeight: 0, backOrderId: 2, linearLevel: 3, refCount: 2)
0x52 movss [rbx], xmm6
0x56 movaps xmm6, [rsp+0x40]
0x5b movss [rbx+0x08], xmm7
0x60 movaps xmm7, [rsp+0x30]
0x65 mov rax, rbx
0x68 movss [rbx+0x10], xmm8
0x6e movaps xmm8, [rsp+0x20]
0x74 add rsp, 0x50
0x78 pop rbx
0x79 ret
------------
*(uint_32t*)[reg_rcx:8] = [var_c_32]
[mem_36_32] = *(uint_32t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x40{64})
[mem_37_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x40{64}) +.8 0x4{4})
[mem_38_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x40{64}) +.8 0x8{8})
[mem_39_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x40{64}) +.8 0xc{12})
*(uint_32t*)([reg_rcx:8] +.8 0x8{8}) = [var_d_32]
[mem_3a_32] = *(uint_32t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x30{48})
[mem_3b_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x30{48}) +.8 0x4{4})
[mem_3c_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x30{48}) +.8 0x8{8})
[mem_3d_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x30{48}) +.8 0xc{12})
*(uint_32t*)([reg_rcx:8] +.8 0x10{16}) = [var_e_32]
[mem_3e_32] = *(uint_32t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x20{32})
[mem_3f_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) +.8 0x4{4})
[mem_40_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) +.8 0x8{8})
[mem_41_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) +.8 0xc{12})
[mem_42_64] = *(uint_64t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x50{80})
[mem_43_64] = *(uint_64t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x50{80}) +.8 0x8{8})
return ([reg_rcx:8] &.0 0xffffffff{-1})
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 4)



********************* AFTER OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 31, backOrderId: 3, linearLevel: 1, refCount: 0)
0x0 push rbx
0x2 sub rsp, 0x50
0x6 movaps [rsp+0x40], xmm6
0xb movss xmm6, dword ptr [0x00000233D0F817A4]
0x13 mov rbx, rcx
0x16 movaps [rsp+0x30], xmm7
0x1b movss xmm7, dword ptr [0x00000233D0F817A8]
0x23 mov ecx, edx
0x25 movaps [rsp+0x20], xmm8
0x2b movss xmm8, dword ptr [0x00000233D0F817AC]
0x34 call 0x00000233CEFEB208
0x39 test rax, rax
0x3c jz 0x00000233CF00D1C2
------------
[mem_2f_32] = *(uint_32t*)([reg_rip:8] +.8 0x1f74621{32982561})
[mem_30_32] = *(uint_32t*)([reg_rip:8] +.8 0x1f74615{32982549})
[mem_31_32] = *(uint_32t*)([reg_rip:8] +.8 0x1f74608{32982536})
[funcVar_6_32] = fun_49860888([reg_rdx:4], [reg_rdx:4], [reg_r8:4], [reg_r9:Da])
[var_c_32] = [mem_2f_32]
[var_d_32] = [mem_30_32]
[var_e_32] = [mem_31_32]
if(([funcVar_6_32] != 0x0{0})) {
        //block 3e (level: 2, maxHeight: 24, backOrderId: 3, linearLevel: 2, refCount: 1)
        0x3e movaps xmm6, [rax+0x70]
        0x42 movaps xmm7, xmm6
        0x45 movaps xmm8, xmm6
        0x49 shufps xmm7, xmm6, 0x55
        0x4d shufps xmm8, xmm6, 0xAA
        ------------
        [mem_32_32] = *(uint_32t*)([funcVar_6_32] +.8 0x70{112})
        [mem_33_32] = *(uint_32t*)([funcVar_6_32] +.8 0x74{116})
        [mem_34_32] = *(uint_32t*)([funcVar_6_32] +.8 0x78{120})
        [mem_35_32] = *(uint_32t*)([funcVar_6_32] +.8 0x7c{124})
        [var_c_32] = [mem_32_32]
        [var_d_32] = [mem_33_32]
        [var_e_32] = [mem_34_32]
        //goto to block 52 (backOrderId: 2; minLinLevel: 2, maxLinLevel: 3) [None]
} else {
        //goto to block 52 (backOrderId: 2; minLinLevel: 3, maxLinLevel: 3) [None]
}
//block 52 (level: 3, maxHeight: 17, backOrderId: 2, linearLevel: 3, refCount: 2)
0x52 movss [rbx], xmm6
0x56 movaps xmm6, [rsp+0x40]
0x5b movss [rbx+0x08], xmm7
0x60 movaps xmm7, [rsp+0x30]
0x65 mov rax, rbx
0x68 movss [rbx+0x10], xmm8
0x6e movaps xmm8, [rsp+0x20]
0x74 add rsp, 0x50
0x78 pop rbx
0x79 ret
------------
*(uint_32t*)[reg_rcx:8] = [var_c_32]
[mem_36_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24})
[mem_37_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffec{-20})
[mem_38_32] = *(uint_32t*)([reg_rsp:8] +.8 0xfffffffffffffff0{-16})
[mem_39_32] = *(uint_32t*)([reg_rsp:8] +.8 0xfffffffffffffff4{-12})
*(uint_32t*)([reg_rcx:8] +.8 0x8{8}) = [var_d_32]
[mem_3a_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffd8{-40})
[mem_3b_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffdc{-36})
[mem_3c_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe0{-32})
[mem_3d_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe4{-28})
*(uint_32t*)([reg_rcx:8] +.8 0x10{16}) = [var_e_32]
[mem_3e_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffc8{-56})
[mem_3f_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffcc{-52})
[mem_40_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffd0{-48})
[mem_41_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffd4{-44})
[mem_42_64] = *(uint_64t*)([reg_rsp:8] +.8 0xfffffffffffffff8{-8})
[mem_43_64] = *(uint_64t*)[reg_rsp:8]
return ([reg_rcx:8] &.4 0xffffffff{-1})
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 4)





SAMPLE 205 <----                                                                                                       ЫП ­
mov [rax+0x08], rbx
mov [rax+0x10], rsi
push rdi
sub rsp, 0x60
movaps [rax-0x18], xmm6
movss xmm6, dword ptr [0x00000233D0F81700]
movaps [rax-0x28], xmm7
movss xmm7, dword ptr [0x00000233D0F81704]
mov rbx, rcx
mov ecx, edx
mov sil, r8b
movaps [rax-0x38], xmm8
movaps [rax-0x48], xmm9
movss xmm9, dword ptr [0x00000233D0F816FC]
call 0x00000233CEFEB194
mov rdi, rax
test rax, rax
jz 0x00000233CF00E21A
mov rdx, [rax]
mov rcx, rax
call [rdx+0x368]
movss xmm9, dword ptr [rax]
movss xmm6, dword ptr [rax+0x04]
movss xmm7, dword ptr [rax+0x08]
test sil, sil
jz 0x00000233CF00E21A
mov rax, [rdi]
mov rcx, rdi
call [rax+0x368]
movaps xmm8, [rdi+0x60]
movaps xmm7, [rdi+0x70]
movaps xmm5, [rdi+0x80]
xorps xmm6, xmm6
pshufd xmm1, [rax], 0x00
pshufd xmm0, [rax], 0x55
pshufd xmm3, [rax], 0xAA
movaps xmm4, xmm8
movaps xmm2, xmm7
unpckhps xmm7, xmm6
unpckhps xmm8, xmm5
unpcklps xmm2, xmm6
unpcklps xmm4, xmm5
unpcklps xmm8, xmm7
movaps xmm9, xmm4
unpckhps xmm9, xmm2
unpcklps xmm4, xmm2
mulps xmm8, xmm3
mulps xmm9, xmm0
mulps xmm4, xmm1
addps xmm9, xmm4
addps xmm9, xmm8
movaps xmm6, xmm9
movaps xmm7, xmm9
shufps xmm6, xmm9, 0x55
shufps xmm7, xmm9, 0xAA
mov rsi, [rsp+0x78]
movaps xmm8, [rsp+0x30]
movss [rbx], xmm9
movaps xmm9, [rsp+0x20]
movss [rbx+0x08], xmm6
movaps xmm6, [rsp+0x50]
movss [rbx+0x10], xmm7
mov rax, rbx
mov rbx, [rsp+0x70]
movaps xmm7, [rsp+0x40]
add rsp, 0x60
pop rdi
ret
********************* BEFORE OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 0, backOrderId: 3, linearLevel: 1, refCount: 0)
0x0 mov rax, rsp
0x3 mov [rax+0x08], rbx
0x7 mov [rax+0x10], rsi
0xb push rdi
0xc sub rsp, 0x60
0x10 movaps [rax-0x18], xmm6
0x14 movss xmm6, dword ptr [0x00000233D0F81700]
0x1c movaps [rax-0x28], xmm7
0x20 movss xmm7, dword ptr [0x00000233D0F81704]
0x28 mov rbx, rcx
0x2b mov ecx, edx
0x2d mov sil, r8b
0x30 movaps [rax-0x38], xmm8
0x35 movaps [rax-0x48], xmm9
0x3a movss xmm9, dword ptr [0x00000233D0F816FC]
0x43 call 0x00000233CEFEB194
0x48 mov rdi, rax
0x4b test rax, rax
0x4e jz 0x00000233CF00E21A
------------
*(uint_64t*)([reg_rsp:8] +.8 0x8{8}) = [reg_rbx:8]
*(uint_64t*)([reg_rsp:8] +.8 0x10{16}) = [reg_rsi:8]
*(uint_64t*)([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) = [reg_rdi:8]
*(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24}) = [reg_zmm6:Da]
*(uint_32t*)(([reg_rsp:8] +.8 0xffffffffffffffe8{-24}) +.8 0x4{4}) = [reg_zmm6:Db]
*(uint_32t*)(([reg_rsp:8] +.8 0xffffffffffffffe8{-24}) +.8 0x8{8}) = [reg_zmm6:Dc]
*(uint_32t*)(([reg_rsp:8] +.8 0xffffffffffffffe8{-24}) +.8 0xc{12}) = [reg_zmm6:Dd]
[mem_44_32] = *(uint_32t*)([reg_rip:8] +.8 0x1f735b4{32978356})
*(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffd8{-40}) = [reg_zmm7:Da]
*(uint_32t*)(([reg_rsp:8] +.8 0xffffffffffffffd8{-40}) +.8 0x4{4}) = [reg_zmm7:Db]
*(uint_32t*)(([reg_rsp:8] +.8 0xffffffffffffffd8{-40}) +.8 0x8{8}) = [reg_zmm7:Dc]
*(uint_32t*)(([reg_rsp:8] +.8 0xffffffffffffffd8{-40}) +.8 0xc{12}) = [reg_zmm7:Dd]
[mem_45_32] = *(uint_32t*)([reg_rip:8] +.8 0x1f735ac{32978348})
*(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffc8{-56}) = [reg_zmm8:Da]
*(uint_32t*)(([reg_rsp:8] +.8 0xffffffffffffffc8{-56}) +.8 0x4{4}) = [reg_zmm8:Db]
*(uint_32t*)(([reg_rsp:8] +.8 0xffffffffffffffc8{-56}) +.8 0x8{8}) = [reg_zmm8:Dc]
*(uint_32t*)(([reg_rsp:8] +.8 0xffffffffffffffc8{-56}) +.8 0xc{12}) = [reg_zmm8:Dd]
*(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffb8{-72}) = [reg_zmm9:Da]
*(uint_32t*)(([reg_rsp:8] +.8 0xffffffffffffffb8{-72}) +.8 0x4{4}) = [reg_zmm9:Db]
*(uint_32t*)(([reg_rsp:8] +.8 0xffffffffffffffb8{-72}) +.8 0x8{8}) = [reg_zmm9:Dc]
*(uint_32t*)(([reg_rsp:8] +.8 0xffffffffffffffb8{-72}) +.8 0xc{12}) = [reg_zmm9:Dd]
[mem_46_32] = *(uint_32t*)([reg_rip:8] +.8 0x1f73589{32978313})
[funcVar_7_32] = fun_49856740([reg_rdx:4], [reg_rdx:4], [reg_r8:1], [reg_r9:Da])
<Symbol assignments>:
- [var_10_32] = [mem_44_32]
- [var_11_32] = [mem_45_32]
- [var_f_32] = [mem_46_32]
if(!((([funcVar_7_32] &.8 [funcVar_7_32]) == 0x0{0}))) {
        //block 54 (level: 2, maxHeight: 0, backOrderId: 3, linearLevel: 2, refCount: 1)
        0x54 mov rdx, [rax]
        0x57 mov rcx, rax
        0x5a call [rdx+0x368]
        0x60 movss xmm9, dword ptr [rax]
        0x65 movss xmm6, dword ptr [rax+0x04]
        0x6a movss xmm7, dword ptr [rax+0x08]
        0x6f test sil, sil
        0x72 jz 0x00000233CF00E21A
        ------------
        [mem_47_64] = *(uint_64t*)[funcVar_7_32]
        [mem_48_64] = *(uint_64t*)([mem_47_64] +.8 0x368{872})
        [funcVar_8_32] = fun_50000000(([funcVar_7_32] &.0 0xffffffff{-1}), ([mem_47_64] &.0 0xffffffff{-1}), [reg_r8:1], [reg_r9:Da])
        [mem_49_32] = *(uint_32t*)[funcVar_8_32]
        [mem_4a_32] = *(uint_32t*)([funcVar_8_32] +.8 0x4{4})
        [mem_4b_32] = *(uint_32t*)([funcVar_8_32] +.8 0x8{8})
        <Symbol assignments>:
        - [var_10_32] = [mem_4a_32]
        - [var_11_32] = [mem_4b_32]
        - [var_f_32] = [mem_49_32]
        if(!((([reg_r8:1] &.1 [reg_r8:1]) == 0x0{0}))) {
                //block 74 (level: 3, maxHeight: 0, backOrderId: 3, linearLevel: 3, refCount: 1)
                0x74 mov rax, [rdi]
                0x77 mov rcx, rdi
                0x7a call [rax+0x368]
                0x80 movaps xmm8, [rdi+0x60]
                0x85 movaps xmm7, [rdi+0x70]
                0x89 movaps xmm5, [rdi+0x80]
                0x90 xorps xmm6, xmm6
                0x93 pshufd xmm1, [rax], 0x00
                0x98 pshufd xmm0, [rax], 0x55
                0x9d pshufd xmm3, [rax], 0xAA
                0xa2 movaps xmm4, xmm8
                0xa6 movaps xmm2, xmm7
                0xa9 unpckhps xmm7, xmm6
                0xac unpckhps xmm8, xmm5
                0xb0 unpcklps xmm2, xmm6
                0xb3 unpcklps xmm4, xmm5
                0xb6 unpcklps xmm8, xmm7
                0xba movaps xmm9, xmm4
                0xbe unpckhps xmm9, xmm2
                0xc2 unpcklps xmm4, xmm2
                0xc5 mulps xmm8, xmm3
                0xc9 mulps xmm9, xmm0
                0xcd mulps xmm4, xmm1
                0xd0 addps xmm9, xmm4
                0xd4 addps xmm9, xmm8
                0xd8 movaps xmm6, xmm9
                0xdc movaps xmm7, xmm9
                0xe0 shufps xmm6, xmm9, 0x55
                0xe5 shufps xmm7, xmm9, 0xAA
                ------------
                [mem_4c_64] = *(uint_64t*)[funcVar_7_32]
                [mem_4d_64] = *(uint_64t*)([mem_4c_64] +.8 0x368{872})
                [funcVar_9_32] = fun_50000000(([funcVar_7_32] &.0 0xffffffff{-1}), ([mem_47_64] &.0 0xffffffff{-1}), [reg_r8:1], [reg_r9:Da])
                [mem_4e_32] = *(uint_32t*)([funcVar_7_32] +.8 0x60{96})
                [mem_4f_32] = *(uint_32t*)(([funcVar_7_32] +.8 0x60{96}) +.8 0x4{4})
                [mem_50_32] = *(uint_32t*)(([funcVar_7_32] +.8 0x60{96}) +.8 0x8{8})
                [mem_51_32] = *(uint_32t*)(([funcVar_7_32] +.8 0x60{96}) +.8 0xc{12})
                [mem_52_32] = *(uint_32t*)([funcVar_7_32] +.8 0x70{112})
                [mem_53_32] = *(uint_32t*)(([funcVar_7_32] +.8 0x70{112}) +.8 0x4{4})
                [mem_54_32] = *(uint_32t*)(([funcVar_7_32] +.8 0x70{112}) +.8 0x8{8})
                [mem_55_32] = *(uint_32t*)(([funcVar_7_32] +.8 0x70{112}) +.8 0xc{12})
                [mem_56_32] = *(uint_32t*)([funcVar_7_32] +.8 0x80{128})
                [mem_57_32] = *(uint_32t*)(([funcVar_7_32] +.8 0x80{128}) +.8 0x4{4})
                [mem_58_32] = *(uint_32t*)(([funcVar_7_32] +.8 0x80{128}) +.8 0x8{8})
                [mem_59_32] = *(uint_32t*)(([funcVar_7_32] +.8 0x80{128}) +.8 0xc{12})
                [mem_5a_32] = *(uint_32t*)[funcVar_9_32]
                [mem_5b_32] = *(uint_32t*)[funcVar_9_32]
                [mem_5c_32] = *(uint_32t*)[funcVar_9_32]
                [mem_5d_32] = *(uint_32t*)[funcVar_9_32]
                [mem_5e_32] = *(uint_32t*)([funcVar_9_32] +.8 0x4{4})
                [mem_5f_32] = *(uint_32t*)([funcVar_9_32] +.8 0x4{4})
                [mem_60_32] = *(uint_32t*)([funcVar_9_32] +.8 0x4{4})
                [mem_61_32] = *(uint_32t*)([funcVar_9_32] +.8 0x4{4})
                [mem_62_32] = *(uint_32t*)([funcVar_9_32] +.8 0x8{8})
                [mem_63_32] = *(uint_32t*)([funcVar_9_32] +.8 0x8{8})
                [mem_64_32] = *(uint_32t*)([funcVar_9_32] +.8 0x8{8})
                [mem_65_32] = *(uint_32t*)([funcVar_9_32] +.8 0x8{8})
                <Symbol assignments>:
                - [var_10_32] = ((([mem_53_32] *.4f [mem_5f_32]) +.4f ([mem_52_32] *.4f [mem_5b_32])) +.4f ([mem_54_32] *.4f [mem_63_32]))
                - [var_11_32] = ((([mem_57_32] *.4f [mem_60_32]) +.4f ([mem_56_32] *.4f [mem_5c_32])) +.4f ([mem_58_32] *.4f [mem_64_32]))
                - [var_f_32] = ((([mem_4f_32] *.4f [mem_5e_32]) +.4f ([mem_4e_32] *.4f [mem_5a_32])) +.4f ([mem_50_32] *.4f [mem_62_32]))
                //goto to block ea (backOrderId: 2; minLinLevel: 3, maxLinLevel: 4) [None]
        } else {
                //goto to block ea (backOrderId: 2; minLinLevel: 4, maxLinLevel: 4) [None]
        }
        //goto is null (backOrderId: 2; minLinLevel: 2, maxLinLevel: 4)
} else {
        //goto to block ea (backOrderId: 2; minLinLevel: 4, maxLinLevel: 4) [None]
}
//block ea (level: 4, maxHeight: 0, backOrderId: 2, linearLevel: 4, refCount: 3)
0xea mov rsi, [rsp+0x78]
0xef movaps xmm8, [rsp+0x30]
0xf5 movss [rbx], xmm9
0xfa movaps xmm9, [rsp+0x20]
0x100 movss [rbx+0x08], xmm6
0x105 movaps xmm6, [rsp+0x50]
0x10a movss [rbx+0x10], xmm7
0x10f mov rax, rbx
0x112 mov rbx, [rsp+0x70]
0x117 movaps xmm7, [rsp+0x40]
0x11c add rsp, 0x60
0x120 pop rdi
0x121 ret
------------
[mem_66_64] = *(uint_64t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x60{96} *.8 0xffffffffffffffff{-1})) +.8 0x78{120})
[mem_67_32] = *(uint_32t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x60{96} *.8 0xffffffffffffffff{-1})) +.8 0x30{48})
[mem_68_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x60{96} *.8 0xffffffffffffffff{-1})) +.8 0x30{48}) +.8 0x4{4})
[mem_69_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x60{96} *.8 0xffffffffffffffff{-1})) +.8 0x30{48}) +.8 0x8{8})
[mem_6a_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x60{96} *.8 0xffffffffffffffff{-1})) +.8 0x30{48}) +.8 0xc{12})
*(uint_32t*)[reg_rcx:8] = [var_f_32]
[mem_6b_32] = *(uint_32t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x60{96} *.8 0xffffffffffffffff{-1})) +.8 0x20{32})
[mem_6c_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x60{96} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) +.8 0x4{4})
[mem_6d_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x60{96} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) +.8 0x8{8})
[mem_6e_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x60{96} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) +.8 0xc{12})
*(uint_32t*)([reg_rcx:8] +.8 0x8{8}) = [var_10_32]
[mem_6f_32] = *(uint_32t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x60{96} *.8 0xffffffffffffffff{-1})) +.8 0x50{80})
[mem_70_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x60{96} *.8 0xffffffffffffffff{-1})) +.8 0x50{80}) +.8 0x4{4})
[mem_71_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x60{96} *.8 0xffffffffffffffff{-1})) +.8 0x50{80}) +.8 0x8{8})
[mem_72_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x60{96} *.8 0xffffffffffffffff{-1})) +.8 0x50{80}) +.8 0xc{12})
*(uint_32t*)([reg_rcx:8] +.8 0x10{16}) = [var_11_32]
[mem_73_64] = *(uint_64t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x60{96} *.8 0xffffffffffffffff{-1})) +.8 0x70{112})
[mem_74_32] = *(uint_32t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x60{96} *.8 0xffffffffffffffff{-1})) +.8 0x40{64})
[mem_75_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x60{96} *.8 0xffffffffffffffff{-1})) +.8 0x40{64}) +.8 0x4{4})
[mem_76_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x60{96} *.8 0xffffffffffffffff{-1})) +.8 0x40{64}) +.8 0x8{8})
[mem_77_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x60{96} *.8 0xffffffffffffffff{-1})) +.8 0x40{64}) +.8 0xc{12})
[mem_78_64] = *(uint_64t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x60{96} *.8 0xffffffffffffffff{-1})) +.8 0x60{96})
[mem_79_64] = *(uint_64t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x60{96} *.8 0xffffffffffffffff{-1})) +.8 0x60{96}) +.8 0x8{8})
return ([reg_rcx:8] &.0 0xffffffff{-1})
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 5)



********************* AFTER OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 69, backOrderId: 3, linearLevel: 1, refCount: 0)
0x0 mov rax, rsp
0x3 mov [rax+0x08], rbx
0x7 mov [rax+0x10], rsi
0xb push rdi
0xc sub rsp, 0x60
0x10 movaps [rax-0x18], xmm6
0x14 movss xmm6, dword ptr [0x00000233D0F81700]
0x1c movaps [rax-0x28], xmm7
0x20 movss xmm7, dword ptr [0x00000233D0F81704]
0x28 mov rbx, rcx
0x2b mov ecx, edx
0x2d mov sil, r8b
0x30 movaps [rax-0x38], xmm8
0x35 movaps [rax-0x48], xmm9
0x3a movss xmm9, dword ptr [0x00000233D0F816FC]
0x43 call 0x00000233CEFEB194
0x48 mov rdi, rax
0x4b test rax, rax
0x4e jz 0x00000233CF00E21A
------------
[mem_44_32] = *(uint_32t*)([reg_rip:8] +.8 0x1f735b4{32978356})
[mem_45_32] = *(uint_32t*)([reg_rip:8] +.8 0x1f735ac{32978348})
[mem_46_32] = *(uint_32t*)([reg_rip:8] +.8 0x1f73589{32978313})
[funcVar_7_32] = fun_49856740([reg_rdx:4], [reg_rdx:4], [reg_r8:1], [reg_r9:Da])
[var_10_32] = [mem_44_32]
[var_11_32] = [mem_45_32]
[var_f_32] = [mem_46_32]
if(([funcVar_7_32] != 0x0{0})) {
        //block 54 (level: 2, maxHeight: 62, backOrderId: 3, linearLevel: 2, refCount: 1)
        0x54 mov rdx, [rax]
        0x57 mov rcx, rax
        0x5a call [rdx+0x368]
        0x60 movss xmm9, dword ptr [rax]
        0x65 movss xmm6, dword ptr [rax+0x04]
        0x6a movss xmm7, dword ptr [rax+0x08]
        0x6f test sil, sil
        0x72 jz 0x00000233CF00E21A
        ------------
        [mem_47_64] = *(uint_64t*)[funcVar_7_32]
        [mem_48_64] = *(uint_64t*)([mem_47_64] +.8 0x368{872})
        [funcVar_8_32] = fun_50000000([funcVar_7_32], ([mem_47_64] &.4 0xffffffff{-1}), [reg_r8:1], [reg_r9:Da])
        [mem_49_32] = *(uint_32t*)[funcVar_8_32]
        [mem_4a_32] = *(uint_32t*)([funcVar_8_32] +.8 0x4{4})
        [mem_4b_32] = *(uint_32t*)([funcVar_8_32] +.8 0x8{8})
        [var_10_32] = [mem_4a_32]
        [var_11_32] = [mem_4b_32]
        [var_f_32] = [mem_49_32]
        if(([reg_r8:1] != 0x0{0})) {
                //block 74 (level: 3, maxHeight: 53, backOrderId: 3, linearLevel: 3, refCount: 1)
                0x74 mov rax, [rdi]
                0x77 mov rcx, rdi
                0x7a call [rax+0x368]
                0x80 movaps xmm8, [rdi+0x60]
                0x85 movaps xmm7, [rdi+0x70]
                0x89 movaps xmm5, [rdi+0x80]
                0x90 xorps xmm6, xmm6
                0x93 pshufd xmm1, [rax], 0x00
                0x98 pshufd xmm0, [rax], 0x55
                0x9d pshufd xmm3, [rax], 0xAA
                0xa2 movaps xmm4, xmm8
                0xa6 movaps xmm2, xmm7
                0xa9 unpckhps xmm7, xmm6
                0xac unpckhps xmm8, xmm5
                0xb0 unpcklps xmm2, xmm6
                0xb3 unpcklps xmm4, xmm5
                0xb6 unpcklps xmm8, xmm7
                0xba movaps xmm9, xmm4
                0xbe unpckhps xmm9, xmm2
                0xc2 unpcklps xmm4, xmm2
                0xc5 mulps xmm8, xmm3
                0xc9 mulps xmm9, xmm0
                0xcd mulps xmm4, xmm1
                0xd0 addps xmm9, xmm4
                0xd4 addps xmm9, xmm8
                0xd8 movaps xmm6, xmm9
                0xdc movaps xmm7, xmm9
                0xe0 shufps xmm6, xmm9, 0x55
                0xe5 shufps xmm7, xmm9, 0xAA
                ------------
                [mem_4c_64] = *(uint_64t*)[funcVar_7_32]
                [mem_4d_64] = *(uint_64t*)([mem_4c_64] +.8 0x368{872})
                [funcVar_9_32] = fun_50000000([funcVar_7_32], ([mem_47_64] &.4 0xffffffff{-1}), [reg_r8:1], [reg_r9:Da])
                [mem_4e_32] = *(uint_32t*)([funcVar_7_32] +.8 0x60{96})
                [mem_4f_32] = *(uint_32t*)([funcVar_7_32] +.8 0x64{100})
                [mem_50_32] = *(uint_32t*)([funcVar_7_32] +.8 0x68{104})
                [mem_51_32] = *(uint_32t*)([funcVar_7_32] +.8 0x6c{108})
                [mem_52_32] = *(uint_32t*)([funcVar_7_32] +.8 0x70{112})
                [mem_53_32] = *(uint_32t*)([funcVar_7_32] +.8 0x74{116})
                [mem_54_32] = *(uint_32t*)([funcVar_7_32] +.8 0x78{120})
                [mem_55_32] = *(uint_32t*)([funcVar_7_32] +.8 0x7c{124})
                [mem_56_32] = *(uint_32t*)([funcVar_7_32] +.8 0x80{128})
                [mem_57_32] = *(uint_32t*)([funcVar_7_32] +.8 0x84{132})
                [mem_58_32] = *(uint_32t*)([funcVar_7_32] +.8 0x88{136})
                [mem_59_32] = *(uint_32t*)([funcVar_7_32] +.8 0x8c{140})
                [mem_5a_32] = *(uint_32t*)[funcVar_9_32]
                [mem_5b_32] = *(uint_32t*)[funcVar_9_32]
                [mem_5c_32] = *(uint_32t*)[funcVar_9_32]
                [mem_5d_32] = *(uint_32t*)[funcVar_9_32]
                [mem_5e_32] = *(uint_32t*)([funcVar_9_32] +.8 0x4{4})
                [mem_5f_32] = *(uint_32t*)([funcVar_9_32] +.8 0x4{4})
                [mem_60_32] = *(uint_32t*)([funcVar_9_32] +.8 0x4{4})
                [mem_61_32] = *(uint_32t*)([funcVar_9_32] +.8 0x4{4})
                [mem_62_32] = *(uint_32t*)([funcVar_9_32] +.8 0x8{8})
                [mem_63_32] = *(uint_32t*)([funcVar_9_32] +.8 0x8{8})
                [mem_64_32] = *(uint_32t*)([funcVar_9_32] +.8 0x8{8})
                [mem_65_32] = *(uint_32t*)([funcVar_9_32] +.8 0x8{8})
                [var_10_32] = ((([mem_53_32] *.4f [mem_5f_32]) +.4f ([mem_52_32] *.4f [mem_5b_32])) +.4f ([mem_54_32] *.4f [mem_63_32]))
                [var_11_32] = ((([mem_57_32] *.4f [mem_60_32]) +.4f ([mem_56_32] *.4f [mem_5c_32])) +.4f ([mem_58_32] *.4f [mem_64_32]))
                [var_f_32] = ((([mem_4f_32] *.4f [mem_5e_32]) +.4f ([mem_4e_32] *.4f [mem_5a_32])) +.4f ([mem_50_32] *.4f [mem_62_32]))
                //goto to block ea (backOrderId: 2; minLinLevel: 3, maxLinLevel: 4) [None]
        } else {
                //goto to block ea (backOrderId: 2; minLinLevel: 4, maxLinLevel: 4) [None]
        }
        //goto is null (backOrderId: 2; minLinLevel: 2, maxLinLevel: 4)
} else {
        //goto to block ea (backOrderId: 2; minLinLevel: 4, maxLinLevel: 4) [None]
}
//block ea (level: 4, maxHeight: 23, backOrderId: 2, linearLevel: 4, refCount: 3)
0xea mov rsi, [rsp+0x78]
0xef movaps xmm8, [rsp+0x30]
0xf5 movss [rbx], xmm9
0xfa movaps xmm9, [rsp+0x20]
0x100 movss [rbx+0x08], xmm6
0x105 movaps xmm6, [rsp+0x50]
0x10a movss [rbx+0x10], xmm7
0x10f mov rax, rbx
0x112 mov rbx, [rsp+0x70]
0x117 movaps xmm7, [rsp+0x40]
0x11c add rsp, 0x60
0x120 pop rdi
0x121 ret
------------
[mem_66_64] = *(uint_64t*)([reg_rsp:8] +.8 0x10{16})
[mem_67_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffc8{-56})
[mem_68_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffcc{-52})
[mem_69_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffd0{-48})
[mem_6a_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffd4{-44})
*(uint_32t*)[reg_rcx:8] = [var_f_32]
[mem_6b_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffb8{-72})
[mem_6c_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffbc{-68})
[mem_6d_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffc0{-64})
[mem_6e_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffc4{-60})
*(uint_32t*)([reg_rcx:8] +.8 0x8{8}) = [var_10_32]
[mem_6f_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24})
[mem_70_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffec{-20})
[mem_71_32] = *(uint_32t*)([reg_rsp:8] +.8 0xfffffffffffffff0{-16})
[mem_72_32] = *(uint_32t*)([reg_rsp:8] +.8 0xfffffffffffffff4{-12})
*(uint_32t*)([reg_rcx:8] +.8 0x10{16}) = [var_11_32]
[mem_73_64] = *(uint_64t*)([reg_rsp:8] +.8 0x8{8})
[mem_74_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffd8{-40})
[mem_75_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffdc{-36})
[mem_76_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe0{-32})
[mem_77_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe4{-28})
[mem_78_64] = *(uint_64t*)([reg_rsp:8] +.8 0xfffffffffffffff8{-8})
[mem_79_64] = *(uint_64t*)[reg_rsp:8]
return ([reg_rcx:8] &.4 0xffffffff{-1})
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 5)





SAMPLE 206 <----                                                                                                       ЫП ­
movaps [rsp+0x20], xmm6
movaps xmm6, xmm0
movaps xmm4, xmm1
mulss xmm1, xmm1
mulss xmm6, xmm6
mulss xmm4, xmm3
movaps xmm5, xmm2
addss xmm6, xmm1
mulss xmm0, xmm5
xorps xmm2, xmm2
comiss xmm6, xmm2
addss xmm0, xmm4
jbe 0x00000233CF00E29B
xorps xmm4, xmm4
sqrtss xmm4, xmm6
jmp 0x00000233CF00E29E
movaps xmm4, xmm2
mulss xmm5, xmm5
mulss xmm3, xmm3
addss xmm5, xmm3
comiss xmm5, xmm2
jbe 0x00000233CF00E2B8
xorps xmm1, xmm1
sqrtss xmm1, xmm5
jmp 0x00000233CF00E2BB
movaps xmm1, xmm2
movss xmm3, dword ptr [0x00000233CFE0A21C]
mulss xmm1, xmm4
divss xmm0, xmm1
comiss xmm0, xmm3
jnb 0x00000233CF00E2D3
movaps xmm0, xmm3
movss xmm1, dword ptr [0x00000233CFEC98B0]
comiss xmm0, xmm1
jbe 0x00000233CF00E2E3
movaps xmm0, xmm1
comiss xmm0, xmm3
jbe 0x00000233CF00E2F7
comiss xmm0, xmm1
jnb 0x00000233CF00E2FF
call 0x00000233CFCD3204
movaps xmm2, xmm0
jmp 0x00000233CF00E2FF
movss xmm2, dword ptr [0x00000233CFE0FBEC]
mulss xmm2, [0x00000233CFE0A1F8]
movaps xmm6, [rsp+0x20]
movaps xmm0, xmm2
add rsp, 0x38
ret
********************* BEFORE OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 0, backOrderId: 7, linearLevel: 1, refCount: 0)
0x0 sub rsp, 0x38
0x4 movaps [rsp+0x20], xmm6
0x9 movaps xmm6, xmm0
0xc movaps xmm4, xmm1
0xf mulss xmm1, xmm1
0x13 mulss xmm6, xmm6
0x17 mulss xmm4, xmm3
0x1b movaps xmm5, xmm2
0x1e addss xmm6, xmm1
0x22 mulss xmm0, xmm5
0x26 xorps xmm2, xmm2
0x29 comiss xmm6, xmm2
0x2c addss xmm0, xmm4
0x30 jbe 0x00000233CF00E29B
------------
*(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) = [reg_zmm6:Da]
*(uint_32t*)((([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) +.8 0x4{4}) = [reg_zmm6:Db]
*(uint_32t*)((([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) +.8 0x8{8}) = [reg_zmm6:Dc]
*(uint_32t*)((([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) +.8 0xc{12}) = [reg_zmm6:Dd]
if(!((((((([reg_zmm0:Da] *.4f [reg_zmm0:Da]) +.4f ([reg_zmm1:Da] *.4f [reg_zmm1:Da])) == NaN) || (([reg_zmm2:Da] ^.4 [reg_zmm2:Da]) == NaN)) || ((([reg_zmm0:Da] *.4f [reg_zmm0:Da]) +.4f ([reg_zmm1:Da] *.4f [reg_zmm1:Da])) < ([reg_zmm2:Da] ^.4 [reg_zmm2:Da]))) || ((((([reg_zmm0:Da] *.4f [reg_zmm0:Da]) +.4f ([reg_zmm1:Da] *.4f [reg_zmm1:Da])) == NaN) || (([reg_zmm2:Da] ^.4 [reg_zmm2:Da]) == NaN)) || ((([reg_zmm0:Da] *.4f [reg_zmm0:Da]) +.4f ([reg_zmm1:Da] *.4f [reg_zmm1:Da])) == ([reg_zmm2:Da] ^.4 [reg_zmm2:Da])))))) {
        //block 32 (level: 2, maxHeight: 0, backOrderId: 7, linearLevel: 2, refCount: 1)
        0x32 xorps xmm4, xmm4
        0x35 sqrtss xmm4, xmm6
        0x39 jmp 0x00000233CF00E29E
        ------------
        <Symbol assignments>:
        - [var_13_32] = FSQRT((([reg_zmm0:Da] *.4f [reg_zmm0:Da]) +.4f ([reg_zmm1:Da] *.4f [reg_zmm1:Da])))
        //goto to block 3e (backOrderId: 6; minLinLevel: 2, maxLinLevel: 3) [None]
} else {
        //block 3b (level: 2, maxHeight: 0, backOrderId: 7, linearLevel: 3, refCount: 1)
        0x3b movaps xmm4, xmm2
        ------------
        <Symbol assignments>:
        - [var_13_32] = ([reg_zmm2:Da] ^.4 [reg_zmm2:Da])
        //goto to block 3e (backOrderId: 6; minLinLevel: 3, maxLinLevel: 4) [None]
}
//block 3e (level: 3, maxHeight: 0, backOrderId: 6, linearLevel: 4, refCount: 2)
0x3e mulss xmm5, xmm5
0x42 mulss xmm3, xmm3
0x46 addss xmm5, xmm3
0x4a comiss xmm5, xmm2
0x4d jbe 0x00000233CF00E2B8
------------
<Symbol assignments>:
- [var_1c_32] = ([reg_zmm2:Da] ^.4 [reg_zmm2:Da])
if(!((((((([reg_zmm2:Da] *.4f [reg_zmm2:Da]) +.4f ([reg_zmm3:Da] *.4f [reg_zmm3:Da])) == NaN) || (([reg_zmm2:Da] ^.4 [reg_zmm2:Da]) == NaN)) || ((([reg_zmm2:Da] *.4f [reg_zmm2:Da]) +.4f ([reg_zmm3:Da] *.4f [reg_zmm3:Da])) < ([reg_zmm2:Da] ^.4 [reg_zmm2:Da]))) || ((((([reg_zmm2:Da] *.4f [reg_zmm2:Da]) +.4f ([reg_zmm3:Da] *.4f [reg_zmm3:Da])) == NaN) || (([reg_zmm2:Da] ^.4 [reg_zmm2:Da]) == NaN)) || ((([reg_zmm2:Da] *.4f [reg_zmm2:Da]) +.4f ([reg_zmm3:Da] *.4f [reg_zmm3:Da])) == ([reg_zmm2:Da] ^.4 [reg_zmm2:Da])))))) {
        //block 4f (level: 4, maxHeight: 0, backOrderId: 6, linearLevel: 5, refCount: 1)
        0x4f xorps xmm1, xmm1
        0x52 sqrtss xmm1, xmm5
        0x56 jmp 0x00000233CF00E2BB
        ------------
        <Symbol assignments>:
        - [var_12_32] = FSQRT((([reg_zmm2:Da] *.4f [reg_zmm2:Da]) +.4f ([reg_zmm3:Da] *.4f [reg_zmm3:Da])))
        //goto to block 5b (backOrderId: 5; minLinLevel: 5, maxLinLevel: 6) [None]
} else {
        //block 58 (level: 4, maxHeight: 0, backOrderId: 6, linearLevel: 6, refCount: 1)
        0x58 movaps xmm1, xmm2
        ------------
        <Symbol assignments>:
        - [var_12_32] = ([reg_zmm2:Da] ^.4 [reg_zmm2:Da])
        //goto to block 5b (backOrderId: 5; minLinLevel: 6, maxLinLevel: 7) [None]
}
//block 5b (level: 5, maxHeight: 0, backOrderId: 5, linearLevel: 7, refCount: 2)
0x5b movss xmm3, dword ptr [0x00000233CFE0A21C]
0x63 mulss xmm1, xmm4
0x67 divss xmm0, xmm1
0x6b comiss xmm0, xmm3
0x6e jnb 0x00000233CF00E2D3
------------
[mem_7a_32] = *(uint_32t*)([reg_rip:8] +.8 0xdfbf59{14663513})
<Symbol assignments>:
- [var_18_32] = ((([reg_zmm0:Da] *.4f [reg_zmm2:Da]) +.4f ([reg_zmm1:Da] *.4f [reg_zmm3:Da])) /.4f ([var_12_32] *.4f [var_13_32]))
if(!(!((((((([reg_zmm0:Da] *.4f [reg_zmm2:Da]) +.4f ([reg_zmm1:Da] *.4f [reg_zmm3:Da])) /.4f ([var_12_32] *.4f [var_13_32])) == NaN) || ([mem_7a_32] == NaN)) || (((([reg_zmm0:Da] *.4f [reg_zmm2:Da]) +.4f ([reg_zmm1:Da] *.4f [reg_zmm3:Da])) /.4f ([var_12_32] *.4f [var_13_32])) < [mem_7a_32]))))) {
        //block 70 (level: 6, maxHeight: 0, backOrderId: 5, linearLevel: 8, refCount: 1)
        0x70 movaps xmm0, xmm3
        ------------
        <Symbol assignments>:
        - [var_18_32] = [mem_7a_32]
        //goto to block 73 (backOrderId: 4; minLinLevel: 8, maxLinLevel: 9) [None]
} else {
        //goto to block 73 (backOrderId: 4; minLinLevel: 9, maxLinLevel: 9) [None]
}
//block 73 (level: 7, maxHeight: 0, backOrderId: 4, linearLevel: 9, refCount: 2)
0x73 movss xmm1, dword ptr [0x00000233CFEC98B0]
0x7b comiss xmm0, xmm1
0x7e jbe 0x00000233CF00E2E3
------------
[mem_7b_32] = *(uint_32t*)([reg_rip:8] +.8 0xebb5d5{15447509})
if(!((((([var_18_32] == NaN) || ([mem_7b_32] == NaN)) || ([var_18_32] < [mem_7b_32])) || ((([var_18_32] == NaN) || ([mem_7b_32] == NaN)) || ([var_18_32] == [mem_7b_32]))))) {
        //block 80 (level: 8, maxHeight: 0, backOrderId: 4, linearLevel: 10, refCount: 1)
        0x80 movaps xmm0, xmm1
        ------------
        <Symbol assignments>:
        - [var_18_32] = [mem_7b_32]
        //goto to block 83 (backOrderId: 3; minLinLevel: 10, maxLinLevel: 11) [None]
} else {
        //goto to block 83 (backOrderId: 3; minLinLevel: 11, maxLinLevel: 11) [None]
}
//block 83 (level: 9, maxHeight: 0, backOrderId: 3, linearLevel: 11, refCount: 2)
0x83 comiss xmm0, xmm3
0x86 jbe 0x00000233CF00E2F7
------------
if(!((((([var_18_32] == NaN) || ([mem_7a_32] == NaN)) || ([var_18_32] < [mem_7a_32])) || ((([var_18_32] == NaN) || ([mem_7a_32] == NaN)) || ([var_18_32] == [mem_7a_32]))))) {
        //block 88 (level: 10, maxHeight: 0, backOrderId: 3, linearLevel: 12, refCount: 1)
        0x88 comiss xmm0, xmm1
        0x8b jnb 0x00000233CF00E2FF
        ------------
        if(!(!(((([var_18_32] == NaN) || ([mem_7b_32] == NaN)) || ([var_18_32] < [mem_7b_32]))))) {
                //block 8d (level: 11, maxHeight: 0, backOrderId: 3, linearLevel: 13, refCount: 1)
                0x8d call 0x00000233CFCD3204
                0x92 movaps xmm2, xmm0
                0x95 jmp 0x00000233CF00E2FF
                ------------
                [funcVar_10_32] = fun_63389732([var_18_32], [mem_7b_32], ([reg_zmm2:Da] ^.4 [reg_zmm2:Da]), [mem_7a_32])
                <Symbol assignments>:
                - [var_1c_32] = [funcVar_10_32]
                //goto to block 9f (backOrderId: 2; minLinLevel: 13, maxLinLevel: 14) [None]
        } else {
                //goto to block 9f (backOrderId: 2; minLinLevel: 14, maxLinLevel: 14) [None]
        }
        //goto is null (backOrderId: 2; minLinLevel: 12, maxLinLevel: 14)
} else {
        //block 97 (level: 10, maxHeight: 0, backOrderId: 3, linearLevel: 14, refCount: 1)
        0x97 movss xmm2, dword ptr [0x00000233CFE0FBEC]
        ------------
        [mem_7c_32] = *(uint_32t*)([reg_rip:8] +.8 0xe018ed{14686445})
        <Symbol assignments>:
        - [var_1c_32] = [mem_7c_32]
        //goto to block 9f (backOrderId: 2; minLinLevel: 14, maxLinLevel: 15) [None]
}
//block 9f (level: 12, maxHeight: 0, backOrderId: 2, linearLevel: 15, refCount: 3)
0x9f mulss xmm2, [0x00000233CFE0A1F8]
0xa7 movaps xmm6, [rsp+0x20]
0xac movaps xmm0, xmm2
0xaf add rsp, 0x38
0xb3 ret
------------
[mem_7d_32] = *(uint_32t*)([reg_rip:8] +.8 0xdfbef1{14663409})
[mem_7e_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32})
[mem_7f_32] = *(uint_32t*)((([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) +.8 0x4{4})
[mem_80_32] = *(uint_32t*)((([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) +.8 0x8{8})
[mem_81_32] = *(uint_32t*)((([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) +.8 0xc{12})
[mem_82_64] = *(uint_64t*)(([reg_rsp:8] +.8 (0x38{56} *.8 0xffffffffffffffff{-1})) +.8 0x38{56})
return ([var_1c_32] *.4f [mem_7d_32])
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 16)



********************* AFTER OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 16, backOrderId: 7, linearLevel: 1, refCount: 0)
0x0 sub rsp, 0x38
0x4 movaps [rsp+0x20], xmm6
0x9 movaps xmm6, xmm0
0xc movaps xmm4, xmm1
0xf mulss xmm1, xmm1
0x13 mulss xmm6, xmm6
0x17 mulss xmm4, xmm3
0x1b movaps xmm5, xmm2
0x1e addss xmm6, xmm1
0x22 mulss xmm0, xmm5
0x26 xorps xmm2, xmm2
0x29 comiss xmm6, xmm2
0x2c addss xmm0, xmm4
0x30 jbe 0x00000233CF00E29B
------------
if(((([reg_zmm0:Da] *.4f [reg_zmm0:Da]) +.4f ([reg_zmm1:Da] *.4f [reg_zmm1:Da])) > 0x0{0})) {
        //block 32 (level: 2, maxHeight: 16, backOrderId: 7, linearLevel: 2, refCount: 1)
        0x32 xorps xmm4, xmm4
        0x35 sqrtss xmm4, xmm6
        0x39 jmp 0x00000233CF00E29E
        ------------
        [var_13_32] = FSQRT((([reg_zmm0:Da] *.4f [reg_zmm0:Da]) +.4f ([reg_zmm1:Da] *.4f [reg_zmm1:Da])))
        //goto to block 3e (backOrderId: 6; minLinLevel: 2, maxLinLevel: 3) [None]
} else {
        //block 3b (level: 2, maxHeight: 16, backOrderId: 7, linearLevel: 3, refCount: 1)
        0x3b movaps xmm4, xmm2
        ------------
        [var_13_32] = 0x0{0}
        //goto to block 3e (backOrderId: 6; minLinLevel: 3, maxLinLevel: 4) [None]
}
//block 3e (level: 3, maxHeight: 15, backOrderId: 6, linearLevel: 4, refCount: 2)
0x3e mulss xmm5, xmm5
0x42 mulss xmm3, xmm3
0x46 addss xmm5, xmm3
0x4a comiss xmm5, xmm2
0x4d jbe 0x00000233CF00E2B8
------------
[var_1c_32] = 0x0{0}
if(((([reg_zmm2:Da] *.4f [reg_zmm2:Da]) +.4f ([reg_zmm3:Da] *.4f [reg_zmm3:Da])) > 0x0{0})) {
        //block 4f (level: 4, maxHeight: 14, backOrderId: 6, linearLevel: 5, refCount: 1)
        0x4f xorps xmm1, xmm1
        0x52 sqrtss xmm1, xmm5
        0x56 jmp 0x00000233CF00E2BB
        ------------
        [var_12_32] = FSQRT((([reg_zmm2:Da] *.4f [reg_zmm2:Da]) +.4f ([reg_zmm3:Da] *.4f [reg_zmm3:Da])))
        //goto to block 5b (backOrderId: 5; minLinLevel: 5, maxLinLevel: 6) [None]
} else {
        //block 58 (level: 4, maxHeight: 14, backOrderId: 6, linearLevel: 6, refCount: 1)
        0x58 movaps xmm1, xmm2
        ------------
        [var_12_32] = 0x0{0}
        //goto to block 5b (backOrderId: 5; minLinLevel: 6, maxLinLevel: 7) [None]
}
//block 5b (level: 5, maxHeight: 13, backOrderId: 5, linearLevel: 7, refCount: 2)
0x5b movss xmm3, dword ptr [0x00000233CFE0A21C]
0x63 mulss xmm1, xmm4
0x67 divss xmm0, xmm1
0x6b comiss xmm0, xmm3
0x6e jnb 0x00000233CF00E2D3
------------
[mem_7a_32] = *(uint_32t*)([reg_rip:8] +.8 0xdfbf59{14663513})
[var_18_32] = ((([reg_zmm0:Da] *.4f [reg_zmm2:Da]) +.4f ([reg_zmm1:Da] *.4f [reg_zmm3:Da])) /.4f ([var_12_32] *.4f [var_13_32]))
if((((([reg_zmm0:Da] *.4f [reg_zmm2:Da]) +.4f ([reg_zmm1:Da] *.4f [reg_zmm3:Da])) /.4f ([var_12_32] *.4f [var_13_32])) < [mem_7a_32])) {
        //block 70 (level: 6, maxHeight: 11, backOrderId: 5, linearLevel: 8, refCount: 1)
        0x70 movaps xmm0, xmm3
        ------------
        [var_18_32] = [mem_7a_32]
        //goto to block 73 (backOrderId: 4; minLinLevel: 8, maxLinLevel: 9) [None]
} else {
        //goto to block 73 (backOrderId: 4; minLinLevel: 9, maxLinLevel: 9) [None]
}
//block 73 (level: 7, maxHeight: 10, backOrderId: 4, linearLevel: 9, refCount: 2)
0x73 movss xmm1, dword ptr [0x00000233CFEC98B0]
0x7b comiss xmm0, xmm1
0x7e jbe 0x00000233CF00E2E3
------------
[mem_7b_32] = *(uint_32t*)([reg_rip:8] +.8 0xebb5d5{15447509})
if(([var_18_32] > [mem_7b_32])) {
        //block 80 (level: 8, maxHeight: 9, backOrderId: 4, linearLevel: 10, refCount: 1)
        0x80 movaps xmm0, xmm1
        ------------
        [var_18_32] = [mem_7b_32]
        //goto to block 83 (backOrderId: 3; minLinLevel: 10, maxLinLevel: 11) [None]
} else {
        //goto to block 83 (backOrderId: 3; minLinLevel: 11, maxLinLevel: 11) [None]
}
//block 83 (level: 9, maxHeight: 8, backOrderId: 3, linearLevel: 11, refCount: 2)
0x83 comiss xmm0, xmm3
0x86 jbe 0x00000233CF00E2F7
------------
if(([var_18_32] > [mem_7a_32])) {
        //block 88 (level: 10, maxHeight: 8, backOrderId: 3, linearLevel: 12, refCount: 1)
        0x88 comiss xmm0, xmm1
        0x8b jnb 0x00000233CF00E2FF
        ------------
        if(([var_18_32] < [mem_7b_32])) {
                //block 8d (level: 11, maxHeight: 8, backOrderId: 3, linearLevel: 13, refCount: 1)
                0x8d call 0x00000233CFCD3204
                0x92 movaps xmm2, xmm0
                0x95 jmp 0x00000233CF00E2FF
                ------------
                [funcVar_10_32] = fun_63389732([var_18_32], [mem_7b_32], 0x0{0}, [mem_7a_32])
                [var_1c_32] = [funcVar_10_32]
                //goto to block 9f (backOrderId: 2; minLinLevel: 13, maxLinLevel: 14) [None]
        } else {
                //goto to block 9f (backOrderId: 2; minLinLevel: 14, maxLinLevel: 14) [None]
        }
        //goto is null (backOrderId: 2; minLinLevel: 12, maxLinLevel: 14)
} else {
        //block 97 (level: 10, maxHeight: 8, backOrderId: 3, linearLevel: 14, refCount: 1)
        0x97 movss xmm2, dword ptr [0x00000233CFE0FBEC]
        ------------
        [mem_7c_32] = *(uint_32t*)([reg_rip:8] +.8 0xe018ed{14686445})
        [var_1c_32] = [mem_7c_32]
        //goto to block 9f (backOrderId: 2; minLinLevel: 14, maxLinLevel: 15) [None]
}
//block 9f (level: 12, maxHeight: 6, backOrderId: 2, linearLevel: 15, refCount: 3)
0x9f mulss xmm2, [0x00000233CFE0A1F8]
0xa7 movaps xmm6, [rsp+0x20]
0xac movaps xmm0, xmm2
0xaf add rsp, 0x38
0xb3 ret
------------
[mem_7d_32] = *(uint_32t*)([reg_rip:8] +.8 0xdfbef1{14663409})
[mem_7e_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24})
[mem_7f_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffec{-20})
[mem_80_32] = *(uint_32t*)([reg_rsp:8] +.8 0xfffffffffffffff0{-16})
[mem_81_32] = *(uint_32t*)([reg_rsp:8] +.8 0xfffffffffffffff4{-12})
[mem_82_64] = *(uint_64t*)[reg_rsp:8]
return ([var_1c_32] *.4f [mem_7d_32])
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 16)





SAMPLE 300 <----                                                                                                       ЫП ­
mov [rax+0x08], rbx
mov [rax+0x10], rsi
mov [rax+0x18], rdi
mov [rax+0x20], r14
push rbp
mov rbp, rsp
sub rsp, 0x50
movaps [rax-0x18], xmm6
lea r9, [0x00000233CFEA9DE0]
mov rsi, r8
movaps xmm6, xmm3
mov r14, rdx
mov edi, ecx
call 0x00000233CF01B094
mov r9, rax
test rax, rax
jz 0x00000233CF00E3B8
mov rax, [rax+0x10]
test rax, rax
jz 0x00000233CF00E375
mov cl, [rax+0x214]
shr cl, 0x06
and cl, 0x01
jmp 0x00000233CF00E377
xor cl, cl
test cl, cl
jnz 0x00000233CF00E3B8
mov eax, [0x00000233D03CEF4C]
test al, 0x01
jnz 0x00000233CF00E39B
or eax, 0x01
mov [0x00000233D03CEF4C], eax
mov eax, 0x7E68C088
mov [0x00000233D03CEF48], eax
jmp 0x00000233CF00E3A1
mov eax, [0x00000233D03CEF48]
lea rdx, [rbp-0x20]
movaps xmm2, xmm6
mov rcx, r9
mov [rbp-0x20], eax
call 0x00000233CEE27E9C
jmp 0x00000233CF00E480
mov r8b, 0x01
mov r9d, 0x07
mov ecx, edi
mov dl, r8b
call 0x00000233CF01A528
mov rbx, rax
test rax, rax
jz 0x00000233CF00E418
mov rdx, rsi
xor ecx, ecx
call 0x00000233CF7EFB24
mov rdx, r14
xor ecx, ecx
mov [rbp-0x20], eax
call 0x00000233CF7EFB24
lea r9, [rbp-0x14]
mov [rbp-0x1C], eax
lea rax, [rbp-0x18]
lea r8, [rbp-0x20]
lea rdx, [rbp-0x1C]
mov rcx, rbx
mov [rsp+0x20], rax
call 0x00000233CF01A46C
test al, al
jz 0x00000233CF00E418
mov r9b, [rbp-0x18]
mov r8d, [rbp-0x14]
jmp 0x00000233CF00E475
mov r9d, 0x07
xor r8d, r8d
mov dl, 0x01
mov ecx, edi
call 0x00000233CF01A528
mov rbx, rax
test rax, rax
jz 0x00000233CF00E480
mov rdx, rsi
xor ecx, ecx
call 0x00000233CF7EFB24
mov rdx, r14
xor ecx, ecx
mov [rbp-0x14], eax
call 0x00000233CF7EFB24
lea r9, [rbp-0x20]
mov [rbp-0x18], eax
lea rax, [rbp-0x1C]
lea r8, [rbp-0x14]
lea rdx, [rbp-0x18]
mov rcx, rbx
mov [rsp+0x20], rax
call 0x00000233CF01A46C
test al, al
jz 0x00000233CF00E480
mov r9b, [rbp-0x1C]
mov r8d, [rbp-0x20]
movaps xmm1, xmm6
mov rcx, rbx
call 0x00000233CE8F4DF4
mov rbx, [rsp+0x60]
mov rsi, [rsp+0x68]
mov rdi, [rsp+0x70]
movaps xmm6, [rsp+0x40]
mov r14, [rsp+0x78]
add rsp, 0x50
pop rbp
ret
********************* BEFORE OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 0, backOrderId: 5, linearLevel: 1, refCount: 0)
0x0 mov rax, rsp
0x3 mov [rax+0x08], rbx
0x7 mov [rax+0x10], rsi
0xb mov [rax+0x18], rdi
0xf mov [rax+0x20], r14
0x13 push rbp
0x14 mov rbp, rsp
0x17 sub rsp, 0x50
0x1b movaps [rax-0x18], xmm6
0x1f lea r9, [0x00000233CFEA9DE0]
0x26 mov rsi, r8
0x29 movaps xmm6, xmm3
0x2c mov r14, rdx
0x2f mov edi, ecx
0x31 call 0x00000233CF01B094
0x36 mov r9, rax
0x39 test rax, rax
0x3c jz 0x00000233CF00E3B8
------------
*(uint_64t*)([reg_rsp:8] +.8 0x8{8}) = [reg_rbx:8]
*(uint_64t*)([reg_rsp:8] +.8 0x10{16}) = [reg_rsi:8]
*(uint_64t*)([reg_rsp:8] +.8 0x18{24}) = [reg_rdi:8]
*(uint_64t*)([reg_rsp:8] +.8 0x20{32}) = [reg_r14:8]
*(uint_64t*)([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) = [reg_rbp:8]
*(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24}) = [reg_zmm6:Da]
*(uint_32t*)(([reg_rsp:8] +.8 0xffffffffffffffe8{-24}) +.8 0x4{4}) = [reg_zmm6:Db]
*(uint_32t*)(([reg_rsp:8] +.8 0xffffffffffffffe8{-24}) +.8 0x8{8}) = [reg_zmm6:Dc]
*(uint_32t*)(([reg_rsp:8] +.8 0xffffffffffffffe8{-24}) +.8 0xc{12}) = [reg_zmm6:Dd]
[funcVar_11_32] = fun_50052596([reg_rcx:4], ([reg_rdx:8] &.0 0xffffffff{-1}), ([reg_r8:8] &.0 0xffffffff{-1}), (([reg_rip:8] +.8 0xe9ba9a{15317658}) &.0 0xffffffff{-1}))
<Symbol assignments>:
- [var_21_32] = (([reg_rdx:8] &.0 0xffffff00{-256}) |.0 ([var_21_32] &.0 0xff{255}))
- [var_22_32] = (([reg_r8:8] &.0 0xffffff00{-256}) |.0 ([var_22_32] &.0 0xff{255}))
if(!((([funcVar_11_32] &.8 [funcVar_11_32]) == 0x0{0}))) {
        //block 3e (level: 2, maxHeight: 0, backOrderId: 6, linearLevel: 2, refCount: 1)
        0x3e mov rax, [rax+0x10]
        0x42 test rax, rax
        0x45 jz 0x00000233CF00E375
        ------------
        [mem_83_64] = *(uint_64t*)([funcVar_11_32] +.8 0x10{16})
        if(!((([mem_83_64] &.8 [mem_83_64]) == 0x0{0}))) {
                //block 47 (level: 3, maxHeight: 0, backOrderId: 6, linearLevel: 3, refCount: 1)
                0x47 mov cl, [rax+0x214]
                0x4d shr cl, 0x06
                0x50 and cl, 0x01
                0x53 jmp 0x00000233CF00E377
                ------------
                [mem_84_8] = *(uint_8t*)([mem_83_64] +.8 0x214{532})
                <Symbol assignments>:
                - [var_1d_8] = (([mem_84_8] >>.1 (0x6{6} &.8 0x3f{63})) &.1 0x1{1})
                //goto to block 57 (backOrderId: 5; minLinLevel: 3, maxLinLevel: 4) [None]
        } else {
                //block 55 (level: 3, maxHeight: 0, backOrderId: 6, linearLevel: 4, refCount: 1)
                0x55 xor cl, cl
                ------------
                <Symbol assignments>:
                - [var_1d_8] = (([reg_rcx:4] &.0 0xff{255}) ^.1 ([reg_rcx:4] &.0 0xff{255}))
                //goto to block 57 (backOrderId: 5; minLinLevel: 4, maxLinLevel: 5) [None]
        }
        //block 57 (level: 4, maxHeight: 0, backOrderId: 5, linearLevel: 5, refCount: 2)
        0x57 test cl, cl
        0x59 jnz 0x00000233CF00E3B8
        ------------
        if(!(!((([var_1d_8] &.1 [var_1d_8]) == 0x0{0})))) {
                //block 5b (level: 5, maxHeight: 0, backOrderId: 7, linearLevel: 6, refCount: 1)
                0x5b mov eax, [0x00000233D03CEF4C]
                0x61 test al, 0x01
                0x63 jnz 0x00000233CF00E39B
                ------------
                [mem_85_32] = *(uint_32t*)([reg_rip:8] +.8 0x13c0bcb{20712395})
                if(!(!(((([mem_85_32] &.0 0xff{255}) &.1 0x1{1}) == 0x0{0})))) {
                        //block 65 (level: 6, maxHeight: 0, backOrderId: 7, linearLevel: 7, refCount: 1)
                        0x65 or eax, 0x01
                        0x68 mov [0x00000233D03CEF4C], eax
                        0x6e mov eax, 0x7E68C088
                        0x73 mov [0x00000233D03CEF48], eax
                        0x79 jmp 0x00000233CF00E3A1
                        ------------
                        *(uint_32t*)([reg_rip:8] +.8 0x13c0bbe{20712382}) = ([mem_85_32] |.4 0x1{1})
                        *(uint_32t*)([reg_rip:8] +.8 0x13c0baf{20712367}) = 0x7e68c088{2120794248}
                        <Symbol assignments>:
                        - [var_25_32] = 0x7e68c088{2120794248}
                        //goto to block 81 (backOrderId: 6; minLinLevel: 7, maxLinLevel: 8) [None]
                } else {
                        //block 7b (level: 6, maxHeight: 0, backOrderId: 7, linearLevel: 8, refCount: 1)
                        0x7b mov eax, [0x00000233D03CEF48]
                        ------------
                        [mem_86_32] = *(uint_32t*)([reg_rip:8] +.8 0x13c0ba7{20712359})
                        <Symbol assignments>:
                        - [var_25_32] = [mem_86_32]
                        //goto to block 81 (backOrderId: 6; minLinLevel: 8, maxLinLevel: 9) [None]
                }
                //block 81 (level: 7, maxHeight: 0, backOrderId: 6, linearLevel: 9, refCount: 2)
                0x81 lea rdx, [rbp-0x20]
                0x85 movaps xmm2, xmm6
                0x88 mov rcx, r9
                0x8b mov [rbp-0x20], eax
                0x8e call 0x00000233CEE27E9C
                0x93 jmp 0x00000233CF00E480
                ------------
                *(uint_32t*)(([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffe0{-32}) = [var_25_32]
                [funcVar_12_32] = fun_48008188(([funcVar_11_32] &.0 0xffffffff{-1}), ((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffe0{-32}) &.0 0xffffffff{-1}), ([reg_r8:8] &.0 0xffffffff{-1}), ([funcVar_11_32] &.0 0xffffffff{-1}))
                <Symbol assignments>:
                - [var_25_32] = [funcVar_12_32]
                //goto to block 160 (backOrderId: 4; minLinLevel: 6, maxLinLevel: 10) [!!!Normal!!!]
        } else {
                //goto to block 98 (backOrderId: 4; minLinLevel: 10, maxLinLevel: 10) [None]
        }
        //goto is null (backOrderId: 4; minLinLevel: 2, maxLinLevel: 10)
} else {
        //goto to block 98 (backOrderId: 4; minLinLevel: 10, maxLinLevel: 10) [None]
}
//block 98 (level: 5, maxHeight: 0, backOrderId: 4, linearLevel: 10, refCount: 2)
0x98 mov r8b, 0x01
0x9b mov r9d, 0x07
0xa1 mov ecx, edi
0xa3 mov dl, r8b
0xa6 call 0x00000233CF01A528
0xab mov rbx, rax
0xae test rax, rax
0xb1 jz 0x00000233CF00E418
------------
[funcVar_13_32] = fun_50049672([reg_rcx:4], (([reg_rdx:8] &.0 0xffffff00{-256}) |.0 0x1{1}), (([reg_r8:8] &.0 0xffffff00{-256}) |.0 0x1{1}), 0x7{7})
<Symbol assignments>:
- [var_20_64] = [funcVar_13_32]
- [var_22_32] = (([var_22_32] &.0 0xffffff00{-256}) |.0 0x1{1})
if(!((([funcVar_13_32] &.8 [funcVar_13_32]) == 0x0{0}))) {
        //block b3 (level: 6, maxHeight: 0, backOrderId: 4, linearLevel: 11, refCount: 1)
        0xb3 mov rdx, rsi
        0xb6 xor ecx, ecx
        0xb8 call 0x00000233CF7EFB24
        0xbd mov rdx, r14
        0xc0 xor ecx, ecx
        0xc2 mov [rbp-0x20], eax
        0xc5 call 0x00000233CF7EFB24
        0xca lea r9, [rbp-0x14]
        0xce mov [rbp-0x1C], eax
        0xd1 lea rax, [rbp-0x18]
        0xd5 lea r8, [rbp-0x20]
        0xd9 lea rdx, [rbp-0x1C]
        0xdd mov rcx, rbx
        0xe0 mov [rsp+0x20], rax
        0xe5 call 0x00000233CF01A46C
        0xea test al, al
        0xec jz 0x00000233CF00E418
        ------------
        [funcVar_14_32] = fun_58263684(([reg_rcx:4] ^.4 [reg_rcx:4]), ([reg_r8:8] &.0 0xffffffff{-1}), (([reg_r8:8] &.0 0xffffff00{-256}) |.0 0x1{1}), 0x7{7})
        *(uint_32t*)(([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffe0{-32}) = [funcVar_14_32]
        [funcVar_15_32] = fun_58263684((([reg_rcx:4] ^.4 [reg_rcx:4]) ^.4 ([reg_rcx:4] ^.4 [reg_rcx:4])), ([reg_rdx:8] &.0 0xffffffff{-1}), (([reg_r8:8] &.0 0xffffff00{-256}) |.0 0x1{1}), 0x7{7})
        *(uint_32t*)(([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffe4{-28}) = [funcVar_15_32]
        *(uint_64t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) = (([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffe8{-24})
        [funcVar_16_32] = fun_50049484(([funcVar_13_32] &.0 0xffffffff{-1}), ((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffe4{-28}) &.0 0xffffffff{-1}), ((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffe0{-32}) &.0 0xffffffff{-1}), ((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffec{-20}) &.0 0xffffffff{-1}))
        <Symbol assignments>:
        - [var_21_32] = ((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffe4{-28}) &.0 0xffffffff{-1})
        - [var_22_32] = ((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffe0{-32}) &.0 0xffffffff{-1})
        - [var_23_32] = (((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffec{-20}) &.0 0xffffff00{-256}) |.0 ([var_23_32] &.0 0xff{255}))
        if(!(((([funcVar_16_32] &.0 0xff{255}) &.1 ([funcVar_16_32] &.0 0xff{255})) == 0x0{0}))) {
                //block ee (level: 7, maxHeight: 0, backOrderId: 6, linearLevel: 12, refCount: 1)
                0xee mov r9b, [rbp-0x18]
                0xf2 mov r8d, [rbp-0x14]
                0xf6 jmp 0x00000233CF00E475
                ------------
                [mem_87_8] = *(uint_8t*)(([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffe8{-24})
                [mem_88_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffec{-20})
                <Symbol assignments>:
                - [var_22_32] = [mem_88_32]
                - [var_23_32] = (([var_23_32] &.0 0xffffff00{-256}) |.0 [mem_87_8])
                //block 155 (level: 10, maxHeight: 0, backOrderId: 5, linearLevel: 13, refCount: 2)
                0x155 movaps xmm1, xmm6
                0x158 mov rcx, rbx
                0x15b call 0x00000233CE8F4DF4
                ------------
                [funcVar_21_32] = fun_42556244(([var_20_64] &.0 0xffffffff{-1}), [var_21_32], [var_22_32], [var_23_32])
                <Symbol assignments>:
                - [var_25_32] = [funcVar_21_32]
                //goto to block 160 (backOrderId: 3; minLinLevel: 12, maxLinLevel: 14) [!!!Normal!!!]
        } else {
                //goto to block f8 (backOrderId: 3; minLinLevel: 14, maxLinLevel: 14) [None]
        }
        //goto is null (backOrderId: 3; minLinLevel: 11, maxLinLevel: 14)
} else {
        //goto to block f8 (backOrderId: 3; minLinLevel: 14, maxLinLevel: 14) [None]
}
//block f8 (level: 7, maxHeight: 0, backOrderId: 3, linearLevel: 14, refCount: 2)
0xf8 mov r9d, 0x07
0xfe xor r8d, r8d
0x101 mov dl, 0x01
0x103 mov ecx, edi
0x105 call 0x00000233CF01A528
0x10a mov rbx, rax
0x10d test rax, rax
0x110 jz 0x00000233CF00E480
------------
[funcVar_17_32] = fun_50049672([reg_rcx:4], (([var_21_32] <<.0 0x8{8}) |.0 0x1{1}), ([var_22_32] ^.4 [var_22_32]), 0x7{7})
<Symbol assignments>:
- [var_25_32] = [funcVar_17_32]
- [var_20_64] = [funcVar_17_32]
if(!((([funcVar_17_32] &.8 [funcVar_17_32]) == 0x0{0}))) {
        //block 112 (level: 8, maxHeight: 0, backOrderId: 3, linearLevel: 15, refCount: 1)
        0x112 mov rdx, rsi
        0x115 xor ecx, ecx
        0x117 call 0x00000233CF7EFB24
        0x11c mov rdx, r14
        0x11f xor ecx, ecx
        0x121 mov [rbp-0x14], eax
        0x124 call 0x00000233CF7EFB24
        0x129 lea r9, [rbp-0x20]
        0x12d mov [rbp-0x18], eax
        0x130 lea rax, [rbp-0x1C]
        0x134 lea r8, [rbp-0x14]
        0x138 lea rdx, [rbp-0x18]
        0x13c mov rcx, rbx
        0x13f mov [rsp+0x20], rax
        0x144 call 0x00000233CF01A46C
        0x149 test al, al
        0x14b jz 0x00000233CF00E480
        ------------
        [funcVar_18_32] = fun_58263684(([reg_rcx:4] ^.4 [reg_rcx:4]), ([reg_r8:8] &.0 0xffffffff{-1}), ([var_22_32] ^.4 [var_22_32]), 0x7{7})
        *(uint_32t*)(([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffec{-20}) = [funcVar_18_32]
        [funcVar_19_32] = fun_58263684((([reg_rcx:4] ^.4 [reg_rcx:4]) ^.4 ([reg_rcx:4] ^.4 [reg_rcx:4])), ([reg_rdx:8] &.0 0xffffffff{-1}), ([var_22_32] ^.4 [var_22_32]), 0x7{7})
        *(uint_32t*)(([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffe8{-24}) = [funcVar_19_32]
        *(uint_64t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) = (([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffe4{-28})
        [funcVar_20_32] = fun_50049484(([funcVar_17_32] &.0 0xffffffff{-1}), ((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffe8{-24}) &.0 0xffffffff{-1}), ((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffec{-20}) &.0 0xffffffff{-1}), ((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffe0{-32}) &.0 0xffffffff{-1}))
        <Symbol assignments>:
        - [var_25_32] = [funcVar_20_32]
        - [var_21_32] = ((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffe8{-24}) &.0 0xffffffff{-1})
        - [var_23_32] = (((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffe0{-32}) &.0 0xffffff00{-256}) |.0 ([var_23_32] &.0 0xff{255}))
        if(!(((([funcVar_20_32] &.0 0xff{255}) &.1 ([funcVar_20_32] &.0 0xff{255})) == 0x0{0}))) {
                //block 14d (level: 9, maxHeight: 0, backOrderId: 4, linearLevel: 16, refCount: 1)
                0x14d mov r9b, [rbp-0x1C]
                0x151 mov r8d, [rbp-0x20]
                ------------
                [mem_89_8] = *(uint_8t*)(([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffe4{-28})
                [mem_8a_32] = *(uint_32t*)(([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 0xffffffffffffffe0{-32})
                <Symbol assignments>:
                - [var_22_32] = [mem_8a_32]
                - [var_23_32] = (([var_23_32] &.0 0xffffff00{-256}) |.0 [mem_89_8])
                //goto to block 155 (backOrderId: 2; minLinLevel: 16, maxLinLevel: 17) [!!!Normal!!!]
        } else {
                //goto to block 160 (backOrderId: 2; minLinLevel: 17, maxLinLevel: 17) [None]
        }
        //goto is null (backOrderId: 2; minLinLevel: 15, maxLinLevel: 17)
} else {
        //goto to block 160 (backOrderId: 2; minLinLevel: 17, maxLinLevel: 17) [None]
}
//block 160 (level: 11, maxHeight: 0, backOrderId: 2, linearLevel: 17, refCount: 4)
0x160 mov rbx, [rsp+0x60]
0x165 mov rsi, [rsp+0x68]
0x16a mov rdi, [rsp+0x70]
0x16f movaps xmm6, [rsp+0x40]
0x174 mov r14, [rsp+0x78]
0x179 add rsp, 0x50
0x17d pop rbp
0x17e ret
------------
[mem_8b_64] = *(uint_64t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x60{96})
[mem_8c_64] = *(uint_64t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x68{104})
[mem_8d_64] = *(uint_64t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x70{112})
[mem_8e_32] = *(uint_32t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x40{64})
[mem_8f_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x40{64}) +.8 0x4{4})
[mem_90_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x40{64}) +.8 0x8{8})
[mem_91_32] = *(uint_32t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x40{64}) +.8 0xc{12})
[mem_92_64] = *(uint_64t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x78{120})
[mem_93_64] = *(uint_64t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x50{80})
[mem_94_64] = *(uint_64t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x50{80} *.8 0xffffffffffffffff{-1})) +.8 0x50{80}) +.8 0x8{8})
return [var_25_32]
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 18)



********************* AFTER OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 46, backOrderId: 5, linearLevel: 1, refCount: 0)
0x0 mov rax, rsp
0x3 mov [rax+0x08], rbx
0x7 mov [rax+0x10], rsi
0xb mov [rax+0x18], rdi
0xf mov [rax+0x20], r14
0x13 push rbp
0x14 mov rbp, rsp
0x17 sub rsp, 0x50
0x1b movaps [rax-0x18], xmm6
0x1f lea r9, [0x00000233CFEA9DE0]
0x26 mov rsi, r8
0x29 movaps xmm6, xmm3
0x2c mov r14, rdx
0x2f mov edi, ecx
0x31 call 0x00000233CF01B094
0x36 mov r9, rax
0x39 test rax, rax
0x3c jz 0x00000233CF00E3B8
------------
[funcVar_11_32] = fun_50052596([reg_rcx:4], ([reg_rdx:8] &.4 0xffffffff{-1}), ([reg_r8:8] &.4 0xffffffff{-1}), (([reg_rip:8] +.8 0xe9ba9a{15317658}) &.4 0xffffffff{-1}))
[var_21_32] = (([reg_rdx:8] &.3 0xffffff00{-256}) |.4 ([var_21_32] &.1 0xff{255}))
[var_22_32] = (([reg_r8:8] &.3 0xffffff00{-256}) |.4 ([var_22_32] &.1 0xff{255}))
if(([funcVar_11_32] != 0x0{0})) {
        //block 3e (level: 2, maxHeight: 43, backOrderId: 6, linearLevel: 2, refCount: 1)
        0x3e mov rax, [rax+0x10]
        0x42 test rax, rax
        0x45 jz 0x00000233CF00E375
        ------------
        [mem_83_64] = *(uint_64t*)([funcVar_11_32] +.8 0x10{16})
        if(([mem_83_64] != 0x0{0})) {
                //block 47 (level: 3, maxHeight: 42, backOrderId: 6, linearLevel: 3, refCount: 1)
                0x47 mov cl, [rax+0x214]
                0x4d shr cl, 0x06
                0x50 and cl, 0x01
                0x53 jmp 0x00000233CF00E377
                ------------
                [mem_84_8] = *(uint_8t*)([mem_83_64] +.8 0x214{532})
                [var_1d_8] = (([mem_84_8] >>.1 0x6{6}) &.1 0x1{1})
                //goto to block 57 (backOrderId: 5; minLinLevel: 3, maxLinLevel: 4) [None]
        } else {
                //block 55 (level: 3, maxHeight: 41, backOrderId: 6, linearLevel: 4, refCount: 1)
                0x55 xor cl, cl
                ------------
                [var_1d_8] = 0x0{0}
                //goto to block 57 (backOrderId: 5; minLinLevel: 4, maxLinLevel: 5) [None]
        }
        //block 57 (level: 4, maxHeight: 40, backOrderId: 5, linearLevel: 5, refCount: 2)
        0x57 test cl, cl
        0x59 jnz 0x00000233CF00E3B8
        ------------
        if(([var_1d_8] == 0x0{0})) {
                //block 5b (level: 5, maxHeight: 17, backOrderId: 7, linearLevel: 6, refCount: 1)
                0x5b mov eax, [0x00000233D03CEF4C]
                0x61 test al, 0x01
                0x63 jnz 0x00000233CF00E39B
                ------------
                [mem_85_32] = *(uint_32t*)([reg_rip:8] +.8 0x13c0bcb{20712395})
                if((([mem_85_32] &.1 0x1{1}) == 0x0{0})) {
                        //block 65 (level: 6, maxHeight: 16, backOrderId: 7, linearLevel: 7, refCount: 1)
                        0x65 or eax, 0x01
                        0x68 mov [0x00000233D03CEF4C], eax
                        0x6e mov eax, 0x7E68C088
                        0x73 mov [0x00000233D03CEF48], eax
                        0x79 jmp 0x00000233CF00E3A1
                        ------------
                        *(uint_32t*)([reg_rip:8] +.8 0x13c0bbe{20712382}) = ([mem_85_32] |.4 0x1{1})
                        *(uint_32t*)([reg_rip:8] +.8 0x13c0baf{20712367}) = 0x7e68c088{2120794248}
                        [var_25_32] = 0x7e68c088{2120794248}
                        //goto to block 81 (backOrderId: 6; minLinLevel: 7, maxLinLevel: 8) [None]
                } else {
                        //block 7b (level: 6, maxHeight: 15, backOrderId: 7, linearLevel: 8, refCount: 1)
                        0x7b mov eax, [0x00000233D03CEF48]
                        ------------
                        [mem_86_32] = *(uint_32t*)([reg_rip:8] +.8 0x13c0ba7{20712359})
                        [var_25_32] = [mem_86_32]
                        //goto to block 81 (backOrderId: 6; minLinLevel: 8, maxLinLevel: 9) [None]
                }
                //block 81 (level: 7, maxHeight: 13, backOrderId: 6, linearLevel: 9, refCount: 2)
                0x81 lea rdx, [rbp-0x20]
                0x85 movaps xmm2, xmm6
                0x88 mov rcx, r9
                0x8b mov [rbp-0x20], eax
                0x8e call 0x00000233CEE27E9C
                0x93 jmp 0x00000233CF00E480
                ------------
                *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffd8{-40}) = [var_25_32]
                [funcVar_12_32] = fun_48008188([funcVar_11_32], (([reg_rsp:8] +.8 0xffffffffffffffd8{-40}) &.4 0xffffffff{-1}), ([reg_r8:8] &.4 0xffffffff{-1}), [funcVar_11_32])
                [var_25_32] = [funcVar_12_32]
                //goto to block 160 (backOrderId: 4; minLinLevel: 6, maxLinLevel: 10) [!!!Normal!!!]
        } else {
                //goto to block 98 (backOrderId: 4; minLinLevel: 10, maxLinLevel: 10) [None]
        }
        //goto is null (backOrderId: 4; minLinLevel: 2, maxLinLevel: 10)
} else {
        //goto to block 98 (backOrderId: 4; minLinLevel: 10, maxLinLevel: 10) [None]
}
//block 98 (level: 5, maxHeight: 40, backOrderId: 4, linearLevel: 10, refCount: 2)
0x98 mov r8b, 0x01
0x9b mov r9d, 0x07
0xa1 mov ecx, edi
0xa3 mov dl, r8b
0xa6 call 0x00000233CF01A528
0xab mov rbx, rax
0xae test rax, rax
0xb1 jz 0x00000233CF00E418
------------
[funcVar_13_32] = fun_50049672([reg_rcx:4], 0x1{1}, 0x1{1}, 0x7{7})
[var_20_64] = [funcVar_13_32]
[var_22_32] = 0x1{1}
if(([funcVar_13_32] != 0x0{0})) {
        //block b3 (level: 6, maxHeight: 37, backOrderId: 4, linearLevel: 11, refCount: 1)
        0xb3 mov rdx, rsi
        0xb6 xor ecx, ecx
        0xb8 call 0x00000233CF7EFB24
        0xbd mov rdx, r14
        0xc0 xor ecx, ecx
        0xc2 mov [rbp-0x20], eax
        0xc5 call 0x00000233CF7EFB24
        0xca lea r9, [rbp-0x14]
        0xce mov [rbp-0x1C], eax
        0xd1 lea rax, [rbp-0x18]
        0xd5 lea r8, [rbp-0x20]
        0xd9 lea rdx, [rbp-0x1C]
        0xdd mov rcx, rbx
        0xe0 mov [rsp+0x20], rax
        0xe5 call 0x00000233CF01A46C
        0xea test al, al
        0xec jz 0x00000233CF00E418
        ------------
        [funcVar_14_32] = fun_58263684(0x0{0}, ([reg_r8:8] &.4 0xffffffff{-1}), 0x1{1}, 0x7{7})
        *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffd8{-40}) = [funcVar_14_32]
        [funcVar_15_32] = fun_58263684(0x0{0}, ([reg_rdx:8] &.4 0xffffffff{-1}), 0x1{1}, 0x7{7})
        *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffdc{-36}) = [funcVar_15_32]
        *(uint_64t*)([reg_rsp:8] +.8 0xffffffffffffffc8{-56}) = ([reg_rsp:8] +.8 0xffffffffffffffe0{-32})
        [funcVar_16_32] = fun_50049484([funcVar_13_32], (([reg_rsp:8] +.8 0xffffffffffffffdc{-36}) &.4 0xffffffff{-1}), (([reg_rsp:8] +.8 0xffffffffffffffd8{-40}) &.4 0xffffffff{-1}), (([reg_rsp:8] +.8 0xffffffffffffffe4{-28}) &.4 0xffffffff{-1}))
        [var_21_32] = (([reg_rsp:8] +.8 0xffffffffffffffdc{-36}) &.4 0xffffffff{-1})
        [var_22_32] = (([reg_rsp:8] +.8 0xffffffffffffffd8{-40}) &.4 0xffffffff{-1})
        [var_23_32] = ((([reg_rsp:8] +.8 0xffffffffffffffe4{-28}) &.3 0xffffff00{-256}) |.4 ([var_23_32] &.1 0xff{255}))
        if((([funcVar_16_32] &.1 0xff{255}) != 0x0{0})) {
                //block ee (level: 7, maxHeight: 16, backOrderId: 4, linearLevel: 12, refCount: 1)
                0xee mov r9b, [rbp-0x18]
                0xf2 mov r8d, [rbp-0x14]
                0xf6 jmp 0x00000233CF00E475
                ------------
                [mem_87_8] = *(uint_8t*)([reg_rsp:8] +.8 0xffffffffffffffe0{-32})
                [mem_88_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe4{-28})
                [var_22_32] = [mem_88_32]
                [var_23_32] = (([var_23_32] &.3 0xffffff00{-256}) |.4 [mem_87_8])
                //goto to block 155 (backOrderId: 3; minLinLevel: 12, maxLinLevel: 13) [None]
        } else {
                //goto to block f8 (backOrderId: 3; minLinLevel: 13, maxLinLevel: 13) [None]
        }
        //goto is null (backOrderId: 3; minLinLevel: 11, maxLinLevel: 13)
} else {
        //goto to block f8 (backOrderId: 3; minLinLevel: 13, maxLinLevel: 13) [None]
}
//block f8 (level: 7, maxHeight: 28, backOrderId: 3, linearLevel: 13, refCount: 2)
0xf8 mov r9d, 0x07
0xfe xor r8d, r8d
0x101 mov dl, 0x01
0x103 mov ecx, edi
0x105 call 0x00000233CF01A528
0x10a mov rbx, rax
0x10d test rax, rax
0x110 jz 0x00000233CF00E480
------------
[funcVar_17_32] = fun_50049672([reg_rcx:4], 0x1{1}, 0x0{0}, 0x7{7})
[var_25_32] = [funcVar_17_32]
[var_20_64] = [funcVar_17_32]
if(([funcVar_17_32] != 0x0{0})) {
        //block 112 (level: 8, maxHeight: 25, backOrderId: 5, linearLevel: 14, refCount: 1)
        0x112 mov rdx, rsi
        0x115 xor ecx, ecx
        0x117 call 0x00000233CF7EFB24
        0x11c mov rdx, r14
        0x11f xor ecx, ecx
        0x121 mov [rbp-0x14], eax
        0x124 call 0x00000233CF7EFB24
        0x129 lea r9, [rbp-0x20]
        0x12d mov [rbp-0x18], eax
        0x130 lea rax, [rbp-0x1C]
        0x134 lea r8, [rbp-0x14]
        0x138 lea rdx, [rbp-0x18]
        0x13c mov rcx, rbx
        0x13f mov [rsp+0x20], rax
        0x144 call 0x00000233CF01A46C
        0x149 test al, al
        0x14b jz 0x00000233CF00E480
        ------------
        [funcVar_18_32] = fun_58263684(0x0{0}, ([reg_r8:8] &.4 0xffffffff{-1}), 0x0{0}, 0x7{7})
        *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe4{-28}) = [funcVar_18_32]
        [funcVar_19_32] = fun_58263684(0x0{0}, ([reg_rdx:8] &.4 0xffffffff{-1}), 0x0{0}, 0x7{7})
        *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe0{-32}) = [funcVar_19_32]
        *(uint_64t*)([reg_rsp:8] +.8 0xffffffffffffffc8{-56}) = ([reg_rsp:8] +.8 0xffffffffffffffdc{-36})
        [funcVar_20_32] = fun_50049484([funcVar_17_32], (([reg_rsp:8] +.8 0xffffffffffffffe0{-32}) &.4 0xffffffff{-1}), (([reg_rsp:8] +.8 0xffffffffffffffe4{-28}) &.4 0xffffffff{-1}), (([reg_rsp:8] +.8 0xffffffffffffffd8{-40}) &.4 0xffffffff{-1}))
        [var_25_32] = [funcVar_20_32]
        [var_21_32] = (([reg_rsp:8] +.8 0xffffffffffffffe0{-32}) &.4 0xffffffff{-1})
        [var_23_32] = ((([reg_rsp:8] +.8 0xffffffffffffffd8{-40}) &.3 0xffffff00{-256}) |.4 ([var_23_32] &.1 0xff{255}))
        if((([funcVar_20_32] &.1 0xff{255}) == 0x0{0})) {
                //goto to block 160 (backOrderId: 4; minLinLevel: 15, maxLinLevel: 15) [!!!Normal!!!]
        } else {
                //goto to block 14d (backOrderId: 4; minLinLevel: 15, maxLinLevel: 15) [None]
        }
        //block 14d (level: 9, maxHeight: 16, backOrderId: 4, linearLevel: 15, refCount: 1)
        0x14d mov r9b, [rbp-0x1C]
        0x151 mov r8d, [rbp-0x20]
        ------------
        [mem_89_8] = *(uint_8t*)([reg_rsp:8] +.8 0xffffffffffffffdc{-36})
        [mem_8a_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffd8{-40})
        [var_22_32] = [mem_8a_32]
        [var_23_32] = (([var_23_32] &.3 0xffffff00{-256}) |.4 [mem_89_8])
        //block 155 (level: 10, maxHeight: 12, backOrderId: 3, linearLevel: 16, refCount: 2)
        0x155 movaps xmm1, xmm6
        0x158 mov rcx, rbx
        0x15b call 0x00000233CE8F4DF4
        ------------
        [funcVar_21_32] = fun_42556244(([var_20_64] &.4 0xffffffff{-1}), [var_21_32], [var_22_32], [var_23_32])
        [var_25_32] = [funcVar_21_32]
        //goto to block 160 (backOrderId: 2; minLinLevel: 14, maxLinLevel: 17) [None]
} else {
        //goto to block 160 (backOrderId: 2; minLinLevel: 17, maxLinLevel: 17) [None]
}
//block 160 (level: 11, maxHeight: 10, backOrderId: 2, linearLevel: 17, refCount: 4)
0x160 mov rbx, [rsp+0x60]
0x165 mov rsi, [rsp+0x68]
0x16a mov rdi, [rsp+0x70]
0x16f movaps xmm6, [rsp+0x40]
0x174 mov r14, [rsp+0x78]
0x179 add rsp, 0x50
0x17d pop rbp
0x17e ret
------------
[mem_8b_64] = *(uint_64t*)([reg_rsp:8] +.8 0x8{8})
[mem_8c_64] = *(uint_64t*)([reg_rsp:8] +.8 0x10{16})
[mem_8d_64] = *(uint_64t*)([reg_rsp:8] +.8 0x18{24})
[mem_8e_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24})
[mem_8f_32] = *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffec{-20})
[mem_90_32] = *(uint_32t*)([reg_rsp:8] +.8 0xfffffffffffffff0{-16})
[mem_91_32] = *(uint_32t*)([reg_rsp:8] +.8 0xfffffffffffffff4{-12})
[mem_92_64] = *(uint_64t*)([reg_rsp:8] +.8 0x20{32})
[mem_93_64] = *(uint_64t*)([reg_rsp:8] +.8 0xfffffffffffffff8{-8})
[mem_94_64] = *(uint_64t*)[reg_rsp:8]
return [var_25_32]
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 18)





SAMPLE 1000 <----                                                                                                      ЫП ­
lea rax, [0x00000233D0C891FC]
cmp [rax], ecx
jz 0x00000233CF00D983
lea r8, [0x00000233D0C895FC]
add rax, 0x20
inc edx
cmp rax, r8
jl 0x00000233CF00D969
or eax, 0xFFFFFFFF
ret
mov eax, edx
ret
********************* BEFORE OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 0, backOrderId: 5, linearLevel: 1, refCount: 0)
0x0 xor edx, edx
0x2 lea rax, [0x00000233D0C891FC]
------------
<Symbol assignments>:
- [var_26_64] = ([reg_rip:8] +.8 0x1c7b893{29866131})
- [var_28_32] = ([reg_rdx:4] ^.4 [reg_rdx:4])
do {
        //block 9 (level: 2, maxHeight: 0, backOrderId: 4, linearLevel: 2, refCount: 2)
        0x9 cmp [rax], ecx
        0xb jz 0x00000233CF00D983
        ------------
        [mem_95_32] = *(uint_32t*)[var_26_64]
        if((([mem_95_32] +.4 ([reg_rcx:4] *.4 0xffffffff{-1})) == 0x0{0})) {
                //block 23 (level: 3, maxHeight: 0, backOrderId: 4, linearLevel: 3, refCount: 1)
                0x23 mov eax, edx
                0x25 ret
                ------------
                [mem_97_64] = *(uint_64t*)[reg_rsp:8]
                return [var_28_32]
                //goto is null (backOrderId: 3; minLinLevel: 3, maxLinLevel: 4)
        } else {
                //goto to block d (backOrderId: 3; minLinLevel: 4, maxLinLevel: 4) [None]
        }
        //goto is null (backOrderId: 3; minLinLevel: 2, maxLinLevel: 4)
        //block d (level: 3, maxHeight: 0, backOrderId: 3, linearLevel: 4, refCount: 1)
        0xd lea r8, [0x00000233D0C895FC]
        0x14 add rax, 0x20
        0x18 inc edx
        0x1a cmp rax, r8
        0x1d jl 0x00000233CF00D969
        ------------
        <Symbol assignments>:
        - [var_26_64] = ([var_26_64] +.8 0x20{32})
        - [var_28_32] = ([var_28_32] +.4 0x1{1})
} while((SBORROW(([var_26_64] +.8 0x20{32}), ([reg_rip:8] +.8 0x1c7bc88{29867144})) != ((([var_26_64] +.8 0x20{32}) +.8 (([reg_rip:8] +.8 0x1c7bc88{29867144}) *.8 0xffffffffffffffff{-1})) < 0x0{0})));
//block 1f (level: 4, maxHeight: 0, backOrderId: 2, linearLevel: 5, refCount: 1)
0x1f or eax, 0xFFFFFFFF
0x22 ret
------------
[mem_96_64] = *(uint_64t*)[reg_rsp:8]
return ((([var_26_64] +.8 0x20{32}) &.0 0xffffffff{-1}) |.4 0xffffffff{-1})
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 6)



********************* AFTER OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 6, backOrderId: 5, linearLevel: 1, refCount: 0)
0x0 xor edx, edx
0x2 lea rax, [0x00000233D0C891FC]
------------
[var_26_64] = ([reg_rip:8] +.8 0x1c7b893{29866131})
[var_28_32] = 0x0{0}
do {
        //block 9 (level: 2, maxHeight: 4, backOrderId: 4, linearLevel: 2, refCount: 2)
        0x9 cmp [rax], ecx
        0xb jz 0x00000233CF00D983
        ------------
        [mem_95_32] = *(uint_32t*)[var_26_64]
        if(([mem_95_32] == ([reg_rcx:4] *.4 0x1{1}))) {
                //block 23 (level: 3, maxHeight: 1, backOrderId: 4, linearLevel: 3, refCount: 1)
                0x23 mov eax, edx
                0x25 ret
                ------------
                [mem_97_64] = *(uint_64t*)[reg_rsp:8]
                return [var_28_32]
                //goto is null (backOrderId: 3; minLinLevel: 3, maxLinLevel: 4)
        } else {
                //goto to block d (backOrderId: 3; minLinLevel: 4, maxLinLevel: 4) [None]
        }
        //goto is null (backOrderId: 3; minLinLevel: 2, maxLinLevel: 4)
        //block d (level: 3, maxHeight: 3, backOrderId: 3, linearLevel: 4, refCount: 1)
        0xd lea r8, [0x00000233D0C895FC]
        0x14 add rax, 0x20
        0x18 inc edx
        0x1a cmp rax, r8
        0x1d jl 0x00000233CF00D969
        ------------
        [var_26_64] = ([var_26_64] +.8 0x20{32})
        [var_28_32] = ([var_28_32] +.4 0x1{1})
} while(([var_26_64] < ([reg_rip:8] +.8 0x1c7bc88{29867144})));
//block 1f (level: 4, maxHeight: 1, backOrderId: 2, linearLevel: 5, refCount: 1)
0x1f or eax, 0xFFFFFFFF
0x22 ret
------------
[mem_96_64] = *(uint_64t*)[reg_rsp:8]
return 0xffffffff{-1}
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 6)





SAMPLE 1001 <----                                                                                                      ЫП ­
mov r8d, edx
mov r9, rcx
test rcx, rcx
jz 0x00000233CF00E5CA
cmp byte ptr [rcx], 0x22
jnz 0x00000233CF00E50E
inc r9
mov al, [r9]
test al, al
jz 0x00000233CF00E5C7
lea r11, [0x00000233CF781F94]
cmp al, 0x22
jz 0x00000233CF00E5C7
movzx eax, al
inc r9
movzx eax, byte ptr [rax+r11*1]
add r8d, eax
imul r8d, r8d, 0x401
mov eax, r8d
shr eax, 0x06
xor r8d, eax
mov al, [r9]
test al, al
jnz 0x00000233CF00E4DC
jmp 0x00000233CF00E5C7
lea r11, [0x00000233CF781F94]
test cl, 0x03
jnz 0x00000233CF00E5C0
mov eax, [rcx]
jmp 0x00000233CF00E594
movzx eax, byte ptr [r9]
add r9, 0x04
movzx eax, byte ptr [rax+r11*1]
add r8d, eax
movzx eax, byte ptr [r9-0x03]
movzx ecx, byte ptr [rax+r11*1]
imul r8d, r8d, 0x401
mov eax, r8d
shr eax, 0x06
xor eax, r8d
add ecx, eax
movzx eax, byte ptr [r9-0x02]
movzx edx, byte ptr [rax+r11*1]
imul ecx, ecx, 0x401
mov eax, ecx
shr eax, 0x06
xor eax, ecx
add edx, eax
movzx eax, byte ptr [r9-0x01]
movzx r8d, byte ptr [rax+r11*1]
imul edx, edx, 0x401
mov eax, edx
shr eax, 0x06
xor eax, edx
add r8d, eax
imul r8d, r8d, 0x401
mov eax, r8d
shr eax, 0x06
xor r8d, eax
mov eax, [r9]
sub eax, 0x1010101
test eax, 0x80808080
jz 0x00000233CF00E522
jmp 0x00000233CF00E5C0
movzx eax, al
inc r9
movzx eax, byte ptr [rax+r11*1]
add r8d, eax
imul r8d, r8d, 0x401
mov eax, r8d
shr eax, 0x06
xor r8d, eax
mov al, [r9]
test al, al
jnz 0x00000233CF00E5A2
mov r10d, r8d
lea eax, [r10+r10*8]
mov ecx, eax
shr ecx, 0x0B
xor eax, ecx
imul eax, eax, 0x8001
ret
********************* BEFORE OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 0, backOrderId: 3, linearLevel: 1, refCount: 0)
0x0 xor r10d, r10d
0x3 mov r8d, edx
0x6 mov r9, rcx
0x9 test rcx, rcx
0xc jz 0x00000233CF00E5CA
------------
<Symbol assignments>:
- [var_31_32] = [reg_rdx:4]
- [var_2c_64] = [reg_rcx:8]
- [var_32_32] = ([reg_r10:4] ^.4 [reg_r10:4])
if(!((([reg_rcx:8] &.8 [reg_rcx:8]) == 0x0{0}))) {
        //block 12 (level: 2, maxHeight: 0, backOrderId: 4, linearLevel: 2, refCount: 1)
        0x12 cmp byte ptr [rcx], 0x22
        0x15 jnz 0x00000233CF00E50E
        ------------
        [mem_98_8] = *(uint_8t*)[reg_rcx:8]
        if(!(!((([mem_98_8] +.1 (0x22{34} *.1 0xff{255})) == 0x0{0})))) {
                //block 17 (level: 3, maxHeight: 0, backOrderId: 4, linearLevel: 3, refCount: 1)
                0x17 inc r9
                0x1a mov al, [r9]
                0x1d test al, al
                0x1f jz 0x00000233CF00E5C7
                ------------
                [mem_99_8] = *(uint_8t*)([reg_rcx:8] +.8 0x1{1})
                <Symbol assignments>:
                - [var_2e_8] = [mem_99_8]
                - [var_2f_64] = ([reg_rcx:8] +.8 0x1{1})
                if(!((([mem_99_8] &.1 [mem_99_8]) == 0x0{0}))) {
                        //block 25 (level: 4, maxHeight: 0, backOrderId: 5, linearLevel: 4, refCount: 1)
                        0x25 lea r11, [0x00000233CF781F94]
                        ------------
                        //block 2c (level: 5, maxHeight: 0, backOrderId: 4, linearLevel: 5, refCount: 2)
                        0x2c cmp al, 0x22
                        0x2e jz 0x00000233CF00E5C7
                        ------------
                        while(!((([var_2e_8] +.1 (0x22{34} *.1 0xff{255})) == 0x0{0}))) {
                                //block 34 (level: 6, maxHeight: 0, backOrderId: 4, linearLevel: 6, refCount: 1)
                                0x34 movzx eax, al
                                0x37 inc r9
                                0x3a movzx eax, byte ptr [rax+r11*1]
                                0x3f add r8d, eax
                                0x42 imul r8d, r8d, 0x401
                                0x49 mov eax, r8d
                                0x4c shr eax, 0x06
                                0x4f xor r8d, eax
                                0x52 mov al, [r9]
                                0x55 test al, al
                                0x57 jnz 0x00000233CF00E4DC
                                ------------
                                [mem_9a_8] = *(uint_8t*)([var_2e_8] +.8 ([reg_rip:8] +.8 0x773ab8{7813816}))
                                [mem_9b_8] = *(uint_8t*)([var_2f_64] +.8 0x1{1})
                                <Symbol assignments>:
                                - [var_2e_8] = [mem_9b_8]
                                - [var_31_32] = ((([var_31_32] +.4 [mem_9a_8]) *.4 0x401{1025}) ^.4 ((([var_31_32] +.4 [mem_9a_8]) *.4 0x401{1025}) >>.4 (0x6{6} &.8 0x3f{63})))
                                - [var_2f_64] = ([var_2f_64] +.8 0x1{1})
                                if(!(!((([mem_9b_8] &.1 [mem_9b_8]) == 0x0{0})))) {
                                        //block 59 (level: 7, maxHeight: 0, backOrderId: 4, linearLevel: 7, refCount: 1)
                                        0x59 jmp 0x00000233CF00E5C7
                                        ------------
                                        //goto to block 117 (backOrderId: 3; minLinLevel: 7, maxLinLevel: 8) [break]
                                } else {
                                        //goto to block 2c (backOrderId: 3; minLinLevel: 8, maxLinLevel: 8) [None]
                                }
                                //goto is null (backOrderId: 3; minLinLevel: 6, maxLinLevel: 8)
                        }
                        //goto to block 117 (backOrderId: 3; minLinLevel: 4, maxLinLevel: 8) [None]
                } else {
                        //goto to block 117 (backOrderId: 3; minLinLevel: 8, maxLinLevel: 8) [None]
                }
                //goto is null (backOrderId: 3; minLinLevel: 3, maxLinLevel: 8)
        } else {
                //block 5e (level: 3, maxHeight: 0, backOrderId: 6, linearLevel: 8, refCount: 1)
                0x5e lea r11, [0x00000233CF781F94]
                0x65 test cl, 0x03
                0x68 jnz 0x00000233CF00E5C0
                ------------
                if(!(!(((([reg_rcx:8] &.0 0xff{255}) &.1 0x3{3}) == 0x0{0})))) {
                        //block 6e (level: 4, maxHeight: 0, backOrderId: 8, linearLevel: 9, refCount: 1)
                        0x6e mov eax, [rcx]
                        0x70 jmp 0x00000233CF00E594
                        ------------
                        [mem_9c_32] = *(uint_32t*)[reg_rcx:8]
                        <Symbol assignments>:
                        - [var_29_32] = [mem_9c_32]
                        do {
                                //block e4 (level: 5, maxHeight: 0, backOrderId: 7, linearLevel: 10, refCount: 2)
                                0xe4 sub eax, 0x1010101
                                0xe9 test eax, 0x80808080
                                0xee jz 0x00000233CF00E522
                                ------------
                                if(!(((([var_29_32] +.4 (0x1010101{16843009} *.4 0xffffffff{-1})) &.4 0x80808080{-2139062144}) == 0x0{0}))) {
                                        //block f0 (level: 6, maxHeight: 0, backOrderId: 8, linearLevel: 11, refCount: 1)
                                        0xf0 jmp 0x00000233CF00E5C0
                                        ------------
                                        //goto to block 110 (backOrderId: 6; minLinLevel: 11, maxLinLevel: 12) [break]
                                } else {
                                        //goto to block 72 (backOrderId: 6; minLinLevel: 12, maxLinLevel: 12) [None]
                                }
                                //goto is null (backOrderId: 6; minLinLevel: 10, maxLinLevel: 12)
                                //block 72 (level: 6, maxHeight: 0, backOrderId: 6, linearLevel: 12, refCount: 1)
                                0x72 movzx eax, byte ptr [r9]
                                0x76 add r9, 0x04
                                0x7a movzx eax, byte ptr [rax+r11*1]
                                0x7f add r8d, eax
                                0x82 movzx eax, byte ptr [r9-0x03]
                                0x87 movzx ecx, byte ptr [rax+r11*1]
                                0x8c imul r8d, r8d, 0x401
                                0x93 mov eax, r8d
                                0x96 shr eax, 0x06
                                0x99 xor eax, r8d
                                0x9c add ecx, eax
                                0x9e movzx eax, byte ptr [r9-0x02]
                                0xa3 movzx edx, byte ptr [rax+r11*1]
                                0xa8 imul ecx, ecx, 0x401
                                0xae mov eax, ecx
                                0xb0 shr eax, 0x06
                                0xb3 xor eax, ecx
                                0xb5 add edx, eax
                                0xb7 movzx eax, byte ptr [r9-0x01]
                                0xbc movzx r8d, byte ptr [rax+r11*1]
                                0xc1 imul edx, edx, 0x401
                                0xc7 mov eax, edx
                                0xc9 shr eax, 0x06
                                0xcc xor eax, edx
                                0xce add r8d, eax
                                0xd1 imul r8d, r8d, 0x401
                                0xd8 mov eax, r8d
                                0xdb shr eax, 0x06
                                0xde xor r8d, eax
                                0xe1 mov eax, [r9]
                                ------------
                                [mem_9d_8] = *(uint_8t*)[var_2c_64]
                                [mem_9e_8] = *(uint_8t*)([mem_9d_8] +.8 ([reg_rip:8] +.8 0x773a7f{7813759}))
                                [mem_9f_8] = *(uint_8t*)(([var_2c_64] +.8 0x4{4}) +.8 0xfffffffffffffffd{-3})
                                [mem_a0_8] = *(uint_8t*)([mem_9f_8] +.8 ([reg_rip:8] +.8 0x773a7f{7813759}))
                                [mem_a1_8] = *(uint_8t*)(([var_2c_64] +.8 0x4{4}) +.8 0xfffffffffffffffe{-2})
                                [mem_a2_8] = *(uint_8t*)([mem_a1_8] +.8 ([reg_rip:8] +.8 0x773a7f{7813759}))
                                [mem_a3_8] = *(uint_8t*)(([var_2c_64] +.8 0x4{4}) +.8 0xffffffffffffffff{-1})
                                [mem_a4_8] = *(uint_8t*)([mem_a3_8] +.8 ([reg_rip:8] +.8 0x773a7f{7813759}))
                                [mem_a5_32] = *(uint_32t*)([var_2c_64] +.8 0x4{4})
                                <Symbol assignments>:
                                - [var_29_32] = [mem_a5_32]
                                - [var_31_32] = ((([mem_a4_8] +.4 (((([mem_a2_8] +.4 (((([mem_a0_8] +.4 (((([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}) >>.4 (0x6{6} &.8 0x3f{63})) ^.4 (([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}))) *.4 0x401{1025}) >>.4 (0x6{6} &.8 0x3f{63})) ^.4 (([mem_a0_8] +.4 (((([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}) >>.4 (0x6{6} &.8 0x3f{63})) ^.4 (([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}))) *.4 0x401{1025}))) *.4 0x401{1025}) >>.4 (0x6{6} &.8 0x3f{63})) ^.4 (([mem_a2_8] +.4 (((([mem_a0_8] +.4 (((([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}) >>.4 (0x6{6} &.8 0x3f{63})) ^.4 (([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}))) *.4 0x401{1025}) >>.4 (0x6{6} &.8 0x3f{63})) ^.4 (([mem_a0_8] +.4 (((([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}) >>.4 (0x6{6} &.8 0x3f{63})) ^.4 (([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}))) *.4 0x401{1025}))) *.4 0x401{1025}))) *.4 0x401{1025}) ^.4 ((([mem_a4_8] +.4 (((([mem_a2_8] +.4 (((([mem_a0_8] +.4 (((([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}) >>.4 (0x6{6} &.8 0x3f{63})) ^.4 (([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}))) *.4 0x401{1025}) >>.4 (0x6{6} &.8 0x3f{63})) ^.4 (([mem_a0_8] +.4 (((([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}) >>.4 (0x6{6} &.8 0x3f{63})) ^.4 (([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}))) *.4 0x401{1025}))) *.4 0x401{1025}) >>.4 (0x6{6} &.8 0x3f{63})) ^.4 (([mem_a2_8] +.4 (((([mem_a0_8] +.4 (((([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}) >>.4 (0x6{6} &.8 0x3f{63})) ^.4 (([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}))) *.4 0x401{1025}) >>.4 (0x6{6} &.8 0x3f{63})) ^.4 (([mem_a0_8] +.4 (((([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}) >>.4 (0x6{6} &.8 0x3f{63})) ^.4 (([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}))) *.4 0x401{1025}))) *.4 0x401{1025}))) *.4 0x401{1025}) >>.4 (0x6{6} &.8 0x3f{63})))
                                - [var_2c_64] = ([var_2c_64] +.8 0x4{4})
                        } while(true);
                        //goto is null (backOrderId: 5; minLinLevel: 9, maxLinLevel: 13)
                } else {
                        //goto to block 110 (backOrderId: 5; minLinLevel: 13, maxLinLevel: 13) [None]
                }
                do {
                        //block 110 (level: 7, maxHeight: 0, backOrderId: 5, linearLevel: 13, refCount: 3)
                        0x110 mov al, [r9]
                        0x113 test al, al
                        0x115 jnz 0x00000233CF00E5A2
                        ------------
                        [mem_a7_8] = *(uint_8t*)[var_2c_64]
                        if(!((([mem_a7_8] &.1 [mem_a7_8]) == 0x0{0}))) {
                                //goto to block f2 (backOrderId: 4; minLinLevel: 14, maxLinLevel: 14) [None]
                        } else {
                                //goto to block 117 (backOrderId: 4; minLinLevel: 14, maxLinLevel: 14) [break]
                        }
                        //goto is null (backOrderId: 4; minLinLevel: 13, maxLinLevel: 14)
                        //block f2 (level: 8, maxHeight: 0, backOrderId: 4, linearLevel: 14, refCount: 1)
                        0xf2 movzx eax, al
                        0xf5 inc r9
                        0xf8 movzx eax, byte ptr [rax+r11*1]
                        0xfd add r8d, eax
                        0x100 imul r8d, r8d, 0x401
                        0x107 mov eax, r8d
                        0x10a shr eax, 0x06
                        0x10d xor r8d, eax
                        ------------
                        [mem_a6_8] = *(uint_8t*)([mem_a7_8] +.8 ([reg_rip:8] +.8 0x773a7f{7813759}))
                        <Symbol assignments>:
                        - [var_31_32] = ((([var_31_32] +.4 [mem_a6_8]) *.4 0x401{1025}) ^.4 ((([var_31_32] +.4 [mem_a6_8]) *.4 0x401{1025}) >>.4 (0x6{6} &.8 0x3f{63})))
                        - [var_2c_64] = ([var_2c_64] +.8 0x1{1})
                } while(true);
                //goto is null (backOrderId: 3; minLinLevel: 8, maxLinLevel: 15)
        }
        //block 117 (level: 8, maxHeight: 0, backOrderId: 3, linearLevel: 15, refCount: 4)
        0x117 mov r10d, r8d
        ------------
        <Symbol assignments>:
        - [var_32_32] = [var_31_32]
        //goto to block 11a (backOrderId: 2; minLinLevel: 2, maxLinLevel: 16) [None]
} else {
        //goto to block 11a (backOrderId: 2; minLinLevel: 16, maxLinLevel: 16) [None]
}
//block 11a (level: 9, maxHeight: 0, backOrderId: 2, linearLevel: 16, refCount: 2)
0x11a lea eax, [r10+r10*8]
0x11e mov ecx, eax
0x120 shr ecx, 0x0B
0x123 xor eax, ecx
0x125 imul eax, eax, 0x8001
0x12b ret
------------
[mem_a8_64] = *(uint_64t*)[reg_rsp:8]
return ((([var_32_32] +.4 ([var_32_32] *.4 0x8{8})) ^.4 (([var_32_32] +.4 ([var_32_32] *.4 0x8{8})) >>.4 (0xb{11} &.8 0x3f{63}))) *.4 0x8001{32769})
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 17)



********************* AFTER OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 18, backOrderId: 3, linearLevel: 1, refCount: 0)
0x0 xor r10d, r10d
0x3 mov r8d, edx
0x6 mov r9, rcx
0x9 test rcx, rcx
0xc jz 0x00000233CF00E5CA
------------
[var_31_32] = [reg_rdx:4]
[var_2c_64] = [reg_rcx:8]
[var_32_32] = 0x0{0}
if(([reg_rcx:8] != 0x0{0})) {
        //block 12 (level: 2, maxHeight: 15, backOrderId: 4, linearLevel: 2, refCount: 1)
        0x12 cmp byte ptr [rcx], 0x22
        0x15 jnz 0x00000233CF00E50E
        ------------
        [mem_98_8] = *(uint_8t*)[reg_rcx:8]
        if(([mem_98_8] == 0x22{34})) {
                //block 17 (level: 3, maxHeight: 10, backOrderId: 4, linearLevel: 3, refCount: 1)
                0x17 inc r9
                0x1a mov al, [r9]
                0x1d test al, al
                0x1f jz 0x00000233CF00E5C7
                ------------
                [mem_99_8] = *(uint_8t*)([reg_rcx:8] +.8 0x1{1})
                [var_2e_8] = [mem_99_8]
                [var_2f_64] = ([reg_rcx:8] +.8 0x1{1})
                if(([mem_99_8] != 0x0{0})) {
                        //block 25 (level: 4, maxHeight: 7, backOrderId: 5, linearLevel: 4, refCount: 1)
                        0x25 lea r11, [0x00000233CF781F94]
                        ------------
                        //block 2c (level: 5, maxHeight: 7, backOrderId: 4, linearLevel: 5, refCount: 2)
                        0x2c cmp al, 0x22
                        0x2e jz 0x00000233CF00E5C7
                        ------------
                        while(([var_2e_8] != 0x22{34})) {
                                //block 34 (level: 6, maxHeight: 7, backOrderId: 4, linearLevel: 6, refCount: 1)
                                0x34 movzx eax, al
                                0x37 inc r9
                                0x3a movzx eax, byte ptr [rax+r11*1]
                                0x3f add r8d, eax
                                0x42 imul r8d, r8d, 0x401
                                0x49 mov eax, r8d
                                0x4c shr eax, 0x06
                                0x4f xor r8d, eax
                                0x52 mov al, [r9]
                                0x55 test al, al
                                0x57 jnz 0x00000233CF00E4DC
                                ------------
                                [mem_9a_8] = *(uint_8t*)(([reg_rip:8] +.8 0x773ab8{7813816}) +.8 [var_2e_8])
                                [mem_9b_8] = *(uint_8t*)([var_2f_64] +.8 0x1{1})
                                [var_2e_8] = [mem_9b_8]
                                [var_31_32] = ((([var_31_32] +.4 [mem_9a_8]) *.4 0x401{1025}) ^.4 ((([var_31_32] +.4 [mem_9a_8]) *.4 0x401{1025}) >>.4 0x6{6}))
                                [var_2f_64] = ([var_2f_64] +.8 0x1{1})
                                if(([mem_9b_8] == 0x0{0})) {
                                        //block 59 (level: 7, maxHeight: 2, backOrderId: 4, linearLevel: 7, refCount: 1)
                                        0x59 jmp 0x00000233CF00E5C7
                                        ------------
                                        //goto to block 117 (backOrderId: 3; minLinLevel: 7, maxLinLevel: 8) [break]
                                } else {
                                        //goto to block 2c (backOrderId: 3; minLinLevel: 8, maxLinLevel: 8) [None]
                                }
                                //goto is null (backOrderId: 3; minLinLevel: 6, maxLinLevel: 8)
                        }
                        //goto to block 117 (backOrderId: 3; minLinLevel: 4, maxLinLevel: 8) [None]
                } else {
                        //goto to block 117 (backOrderId: 3; minLinLevel: 8, maxLinLevel: 8) [None]
                }
                //goto is null (backOrderId: 3; minLinLevel: 3, maxLinLevel: 8)
        } else {
                //block 5e (level: 3, maxHeight: 14, backOrderId: 6, linearLevel: 8, refCount: 1)
                0x5e lea r11, [0x00000233CF781F94]
                0x65 test cl, 0x03
                0x68 jnz 0x00000233CF00E5C0
                ------------
                if((([reg_rcx:8] &.1 0x3{3}) == 0x0{0})) {
                        //block 6e (level: 4, maxHeight: 14, backOrderId: 8, linearLevel: 9, refCount: 1)
                        0x6e mov eax, [rcx]
                        0x70 jmp 0x00000233CF00E594
                        ------------
                        [mem_9c_32] = *(uint_32t*)[reg_rcx:8]
                        [var_29_32] = [mem_9c_32]
                        do {
                                //block e4 (level: 5, maxHeight: 12, backOrderId: 7, linearLevel: 10, refCount: 2)
                                0xe4 sub eax, 0x1010101
                                0xe9 test eax, 0x80808080
                                0xee jz 0x00000233CF00E522
                                ------------
                                if(((([var_29_32] +.4 0xfefefeff{-16843009}) &.4 0x80808080{-2139062144}) != 0x0{0})) {
                                        //block f0 (level: 6, maxHeight: 4, backOrderId: 8, linearLevel: 11, refCount: 1)
                                        0xf0 jmp 0x00000233CF00E5C0
                                        ------------
                                        //goto to block 110 (backOrderId: 6; minLinLevel: 11, maxLinLevel: 12) [break]
                                } else {
                                        //goto to block 72 (backOrderId: 6; minLinLevel: 12, maxLinLevel: 12) [None]
                                }
                                //goto is null (backOrderId: 6; minLinLevel: 10, maxLinLevel: 12)
                                //block 72 (level: 6, maxHeight: 12, backOrderId: 6, linearLevel: 12, refCount: 1)
                                0x72 movzx eax, byte ptr [r9]
                                0x76 add r9, 0x04
                                0x7a movzx eax, byte ptr [rax+r11*1]
                                0x7f add r8d, eax
                                0x82 movzx eax, byte ptr [r9-0x03]
                                0x87 movzx ecx, byte ptr [rax+r11*1]
                                0x8c imul r8d, r8d, 0x401
                                0x93 mov eax, r8d
                                0x96 shr eax, 0x06
                                0x99 xor eax, r8d
                                0x9c add ecx, eax
                                0x9e movzx eax, byte ptr [r9-0x02]
                                0xa3 movzx edx, byte ptr [rax+r11*1]
                                0xa8 imul ecx, ecx, 0x401
                                0xae mov eax, ecx
                                0xb0 shr eax, 0x06
                                0xb3 xor eax, ecx
                                0xb5 add edx, eax
                                0xb7 movzx eax, byte ptr [r9-0x01]
                                0xbc movzx r8d, byte ptr [rax+r11*1]
                                0xc1 imul edx, edx, 0x401
                                0xc7 mov eax, edx
                                0xc9 shr eax, 0x06
                                0xcc xor eax, edx
                                0xce add r8d, eax
                                0xd1 imul r8d, r8d, 0x401
                                0xd8 mov eax, r8d
                                0xdb shr eax, 0x06
                                0xde xor r8d, eax
                                0xe1 mov eax, [r9]
                                ------------
                                [mem_9d_8] = *(uint_8t*)[var_2c_64]
                                [mem_9e_8] = *(uint_8t*)(([reg_rip:8] +.8 0x773a7f{7813759}) +.8 [mem_9d_8])
                                [mem_9f_8] = *(uint_8t*)([var_2c_64] +.8 0x1{1})
                                [mem_a0_8] = *(uint_8t*)(([reg_rip:8] +.8 0x773a7f{7813759}) +.8 [mem_9f_8])
                                [mem_a1_8] = *(uint_8t*)([var_2c_64] +.8 0x2{2})
                                [mem_a2_8] = *(uint_8t*)(([reg_rip:8] +.8 0x773a7f{7813759}) +.8 [mem_a1_8])
                                [mem_a3_8] = *(uint_8t*)([var_2c_64] +.8 0x3{3})
                                [mem_a4_8] = *(uint_8t*)(([reg_rip:8] +.8 0x773a7f{7813759}) +.8 [mem_a3_8])
                                [mem_a5_32] = *(uint_32t*)([var_2c_64] +.8 0x4{4})
                                [var_29_32] = [mem_a5_32]
                                [var_31_32] = ((((((((((((((([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}) >>.4 0x6{6}) ^.4 (([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025})) +.4 [mem_a0_8]) *.4 0x401{1025}) >>.4 0x6{6}) ^.4 (((((([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}) >>.4 0x6{6}) ^.4 (([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025})) +.4 [mem_a0_8]) *.4 0x401{1025})) +.4 [mem_a2_8]) *.4 0x401{1025}) >>.4 0x6{6}) ^.4 (((((((((([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}) >>.4 0x6{6}) ^.4 (([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025})) +.4 [mem_a0_8]) *.4 0x401{1025}) >>.4 0x6{6}) ^.4 (((((([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}) >>.4 0x6{6}) ^.4 (([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025})) +.4 [mem_a0_8]) *.4 0x401{1025})) +.4 [mem_a2_8]) *.4 0x401{1025})) +.4 [mem_a4_8]) *.4 0x401{1025}) ^.4 ((((((((((((((([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}) >>.4 0x6{6}) ^.4 (([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025})) +.4 [mem_a0_8]) *.4 0x401{1025}) >>.4 0x6{6}) ^.4 (((((([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}) >>.4 0x6{6}) ^.4 (([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025})) +.4 [mem_a0_8]) *.4 0x401{1025})) +.4 [mem_a2_8]) *.4 0x401{1025}) >>.4 0x6{6}) ^.4 (((((((((([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}) >>.4 0x6{6}) ^.4 (([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025})) +.4 [mem_a0_8]) *.4 0x401{1025}) >>.4 0x6{6}) ^.4 (((((([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025}) >>.4 0x6{6}) ^.4 (([var_31_32] +.4 [mem_9e_8]) *.4 0x401{1025})) +.4 [mem_a0_8]) *.4 0x401{1025})) +.4 [mem_a2_8]) *.4 0x401{1025})) +.4 [mem_a4_8]) *.4 0x401{1025}) >>.4 0x6{6}))
                                [var_2c_64] = ([var_2c_64] +.8 0x4{4})
                        } while(true);
                        //goto is null (backOrderId: 5; minLinLevel: 9, maxLinLevel: 13)
                } else {
                        //goto to block 110 (backOrderId: 5; minLinLevel: 13, maxLinLevel: 13) [None]
                }
                do {
                        //block 110 (level: 7, maxHeight: 4, backOrderId: 5, linearLevel: 13, refCount: 3)
                        0x110 mov al, [r9]
                        0x113 test al, al
                        0x115 jnz 0x00000233CF00E5A2
                        ------------
                        [mem_a7_8] = *(uint_8t*)[var_2c_64]
                        if(([mem_a7_8] != 0x0{0})) {
                                //goto to block f2 (backOrderId: 4; minLinLevel: 14, maxLinLevel: 14) [None]
                        } else {
                                //goto to block 117 (backOrderId: 4; minLinLevel: 14, maxLinLevel: 14) [break]
                        }
                        //goto is null (backOrderId: 4; minLinLevel: 13, maxLinLevel: 14)
                        //block f2 (level: 8, maxHeight: 3, backOrderId: 4, linearLevel: 14, refCount: 1)
                        0xf2 movzx eax, al
                        0xf5 inc r9
                        0xf8 movzx eax, byte ptr [rax+r11*1]
                        0xfd add r8d, eax
                        0x100 imul r8d, r8d, 0x401
                        0x107 mov eax, r8d
                        0x10a shr eax, 0x06
                        0x10d xor r8d, eax
                        ------------
                        [mem_a6_8] = *(uint_8t*)(([reg_rip:8] +.8 0x773a7f{7813759}) +.8 [mem_a7_8])
                        [var_31_32] = ((([var_31_32] +.4 [mem_a6_8]) *.4 0x401{1025}) ^.4 ((([var_31_32] +.4 [mem_a6_8]) *.4 0x401{1025}) >>.4 0x6{6}))
                        [var_2c_64] = ([var_2c_64] +.8 0x1{1})
                } while(true);
                //goto is null (backOrderId: 3; minLinLevel: 8, maxLinLevel: 15)
        }
        //block 117 (level: 8, maxHeight: 2, backOrderId: 3, linearLevel: 15, refCount: 4)
        0x117 mov r10d, r8d
        ------------
        [var_32_32] = [var_31_32]
        //goto to block 11a (backOrderId: 2; minLinLevel: 2, maxLinLevel: 16) [None]
} else {
        //goto to block 11a (backOrderId: 2; minLinLevel: 16, maxLinLevel: 16) [None]
}
//block 11a (level: 9, maxHeight: 1, backOrderId: 2, linearLevel: 16, refCount: 2)
0x11a lea eax, [r10+r10*8]
0x11e mov ecx, eax
0x120 shr ecx, 0x0B
0x123 xor eax, ecx
0x125 imul eax, eax, 0x8001
0x12b ret
------------
[mem_a8_64] = *(uint_64t*)[reg_rsp:8]
return ((([var_32_32] *.4 0x9{9}) ^.4 (([var_32_32] *.4 0x9{9}) >>.4 0xb{11})) *.4 0x8001{32769})
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 17)





SAMPLE 1002 <----                                                                                                      ЫП ­
mov [rax+0x08], rbx
mov [rax+0x10], rbp
mov [rax+0x18], rsi
mov [rax+0x20], rdi
push r14
sub rsp, 0x30
mov rax, [0x00000233D073A59C]
mov rbp, rcx
mov r8d, [rax+0x20]
mov eax, [rax+0x10]
shl r8d, 0x02
sar r8d, 0x02
sub eax, r8d
jnz 0x00000233CF00E6FE
test dl, dl
jz 0x00000233CF00E638
test byte ptr [rcx+0x3DFC0], 0x04
jz 0x00000233CF00E63F
xor al, al
jmp 0x00000233CF00E700
mov rsi, [rcx+0x28]
test rsi, rsi
jz 0x00000233CF00E71B
mov r14, [rsi+0x08]
mov rbx, [rsi+0x10]
test r14, r14
jz 0x00000233CF00E669
mov rax, [r14]
mov rcx, r14
call [rax+0x90]
test al, al
jz 0x00000233CF00E671
mov rsi, rbx
test rbx, rbx
jmp 0x00000233CF00E646
mov rax, [r14+0x10]
mov rdi, [rbp+0x3DFA8]
mov rcx, r14
mov ebx, [rax]
mov rax, [r14]
call [rax+0x08]
lea r8, [0x00000233CF2C0000]
lea rdx, [0x00000233CF3ED72C]
mov rcx, rdi
mov r9, rax
mov [rsp+0x20], ebx
call 0x00000233CE471CD8
mov rcx, [rbp+0x3DFA8]
lea r8, [0x00000233CF438B3C]
mov rax, [rcx]
lea rdx, [0x00000233CF34F5AC]
call [rax+0x30]
mov rax, [r14]
mov edx, 0x01
mov rcx, r14
call [rax]
cmp rsi, [rbp+0x28]
jnz 0x00000233CF00E6DA
mov rax, [rsi+0x10]
mov [rbp+0x28], rax
cmp rsi, [rbp+0x30]
jnz 0x00000233CF00E6E8
mov rdx, [rsi+0x18]
mov [rbp+0x30], rdx
mov rcx, rsi
call 0x00000233CF010150
mov r8, [rsi]
mov edx, 0x01
mov rcx, rsi
call [r8]
mov al, 0x01
mov rbx, [rsp+0x40]
mov rbp, [rsp+0x48]
mov rsi, [rsp+0x50]
mov rdi, [rsp+0x58]
add rsp, 0x30
pop r14
ret
mov rcx, [0x00000233D073A5E4]
test rcx, rcx
jz 0x00000233CF00E72F
mov rax, [rcx]
mov dl, 0x01
call [rax+0x18]
xor ecx, ecx
call 0x00000233CEC7B860
jmp 0x00000233CF00E638
********************* BEFORE OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 0, backOrderId: 4, linearLevel: 1, refCount: 0)
0x0 mov rax, rsp
0x3 mov [rax+0x08], rbx
0x7 mov [rax+0x10], rbp
0xb mov [rax+0x18], rsi
0xf mov [rax+0x20], rdi
0x13 push r14
0x15 sub rsp, 0x30
0x19 mov rax, [0x00000233D073A59C]
0x20 mov rbp, rcx
0x23 mov r8d, [rax+0x20]
0x27 mov eax, [rax+0x10]
0x2a shl r8d, 0x02
0x2e sar r8d, 0x02
0x32 sub eax, r8d
0x35 jnz 0x00000233CF00E6FE
------------
*(uint_64t*)([reg_rsp:8] +.8 0x8{8}) = [reg_rbx:8]
*(uint_64t*)([reg_rsp:8] +.8 0x10{16}) = [reg_rbp:8]
*(uint_64t*)([reg_rsp:8] +.8 0x18{24}) = [reg_rsi:8]
*(uint_64t*)([reg_rsp:8] +.8 0x20{32}) = [reg_rdi:8]
*(uint_64t*)([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) = [reg_r14:8]
[mem_a9_64] = *(uint_64t*)([reg_rip:8] +.8 0x172bf8c{24297356})
[mem_aa_32] = *(uint_32t*)([mem_a9_64] +.8 0x20{32})
[mem_ab_32] = *(uint_32t*)([mem_a9_64] +.8 0x10{16})
<Symbol assignments>:
- [var_38_32] = ((([mem_ab_32] +.4 ((([mem_aa_32] <<.4 (0x2{2} &.8 0x3f{63})) >>.4 (0x2{2} &.8 0x3f{63})) *.4 0xffffffff{-1})) &.0 0xff{255}) |.0 ([var_38_32] &.0 0xffffff00{-256}))
if(!(!((([mem_ab_32] +.4 ((([mem_aa_32] <<.4 (0x2{2} &.8 0x3f{63})) >>.4 (0x2{2} &.8 0x3f{63})) *.4 0xffffffff{-1})) == 0x0{0})))) {
        //block 3b (level: 2, maxHeight: 0, backOrderId: 6, linearLevel: 2, refCount: 1)
        0x3b test dl, dl
        0x3d jz 0x00000233CF00E638
        ------------
        <Symbol assignments>:
        - [var_34_8] = [reg_rdx:1]
        if(!((([reg_rdx:1] &.1 [reg_rdx:1]) == 0x0{0}))) {
                //block 3f (level: 3, maxHeight: 0, backOrderId: 6, linearLevel: 3, refCount: 1)
                0x3f test byte ptr [rcx+0x3DFC0], 0x04
                0x46 jz 0x00000233CF00E63F
                ------------
                [mem_ac_8] = *(uint_8t*)([reg_rcx:8] +.8 0x3dfc0{253888})
                if(!((([mem_ac_8] &.1 0x4{4}) == 0x0{0}))) {
                        //goto to block 48 (backOrderId: 5; minLinLevel: 4, maxLinLevel: 4) [None]
                } else {
                        //block 4f (level: 4, maxHeight: 0, backOrderId: 9, linearLevel: 4, refCount: 1)
                        0x4f mov rsi, [rcx+0x28]
                        0x53 test rsi, rsi
                        ------------
                        [mem_ad_64] = *(uint_64t*)([reg_rcx:8] +.8 0x28{40})
                        <Symbol assignments>:
                        - [var_35_64] = [mem_ad_64]
                        - [var_33_8] = (([mem_ad_64] &.8 [mem_ad_64]) == 0x0{0})
                        //block 56 (level: 5, maxHeight: 0, backOrderId: 8, linearLevel: 5, refCount: 2)
                        0x56 jz 0x00000233CF00E71B
                        ------------
                        while(!(([var_33_8] != 0x0{0}))) {
                                //block 5c (level: 6, maxHeight: 0, backOrderId: 10, linearLevel: 6, refCount: 1)
                                0x5c mov r14, [rsi+0x08]
                                0x60 mov rbx, [rsi+0x10]
                                0x64 test r14, r14
                                0x67 jz 0x00000233CF00E669
                                ------------
                                [mem_ae_64] = *(uint_64t*)([var_35_64] +.8 0x8{8})
                                [mem_af_64] = *(uint_64t*)([var_35_64] +.8 0x10{16})
                                if(!((([mem_ae_64] &.8 [mem_ae_64]) == 0x0{0}))) {
                                        //block 69 (level: 7, maxHeight: 0, backOrderId: 10, linearLevel: 7, refCount: 1)
                                        0x69 mov rax, [r14]
                                        0x6c mov rcx, r14
                                        0x6f call [rax+0x90]
                                        0x75 test al, al
                                        0x77 jz 0x00000233CF00E671
                                        ------------
                                        [mem_b0_64] = *(uint_64t*)[mem_ae_64]
                                        [mem_b1_64] = *(uint_64t*)([mem_b0_64] +.8 0x90{144})
                                        [funcVar_22_32] = fun_50000000(([mem_ae_64] &.0 0xffffffff{-1}), [reg_rdx:1], (([mem_aa_32] <<.4 (0x2{2} &.8 0x3f{63})) >>.4 (0x2{2} &.8 0x3f{63})), [reg_r9:Da])
                                        if(((([funcVar_22_32] &.0 0xff{255}) &.1 ([funcVar_22_32] &.0 0xff{255})) == 0x0{0})) {
                                                //block 81 (level: 8, maxHeight: 0, backOrderId: 13, linearLevel: 8, refCount: 1)
                                                0x81 mov rax, [r14+0x10]
                                                0x85 mov rdi, [rbp+0x3DFA8]
                                                0x8c mov rcx, r14
                                                0x8f mov ebx, [rax]
                                                0x91 mov rax, [r14]
                                                0x94 call [rax+0x08]
                                                0x97 lea r8, [0x00000233CF2C0000]
                                                0x9e lea rdx, [0x00000233CF3ED72C]
                                                0xa5 mov rcx, rdi
                                                0xa8 mov r9, rax
                                                0xab mov [rsp+0x20], ebx
                                                0xaf call 0x00000233CE471CD8
                                                0xb4 mov rcx, [rbp+0x3DFA8]
                                                0xbb lea r8, [0x00000233CF438B3C]
                                                0xc2 mov rax, [rcx]
                                                0xc5 lea rdx, [0x00000233CF34F5AC]
                                                0xcc call [rax+0x30]
                                                0xcf mov rax, [r14]
                                                0xd2 mov edx, 0x01
                                                0xd7 mov rcx, r14
                                                0xda call [rax]
                                                0xdc cmp rsi, [rbp+0x28]
                                                0xe0 jnz 0x00000233CF00E6DA
                                                ------------
                                                [mem_b2_64] = *(uint_64t*)([mem_ae_64] +.8 0x10{16})
                                                [mem_b3_64] = *(uint_64t*)([reg_rcx:8] +.8 0x3dfa8{253864})
                                                [mem_b4_32] = *(uint_32t*)[mem_b2_64]
                                                [mem_b5_64] = *(uint_64t*)[mem_ae_64]
                                                [mem_b6_64] = *(uint_64t*)([mem_b5_64] +.8 0x8{8})
                                                [funcVar_23_32] = fun_50000000(([mem_ae_64] &.0 0xffffffff{-1}), [reg_rdx:1], (([mem_aa_32] <<.4 (0x2{2} &.8 0x3f{63})) >>.4 (0x2{2} &.8 0x3f{63})), [reg_r9:Da])
                                                *(uint_32t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x30{48} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) = [mem_b4_32]
                                                [funcVar_24_32] = fun_37824360(([mem_b3_64] &.0 0xffffffff{-1}), (([reg_rip:8] +.8 0x3df097{4059287}) &.0 0xffffffff{-1}), (([reg_rip:8] +.8 0x2b1972{2824562}) &.0 0xffffffff{-1}), ([funcVar_23_32] &.0 0xffffffff{-1}))
                                                [mem_b7_64] = *(uint_64t*)([reg_rcx:8] +.8 0x3dfa8{253864})
                                                [mem_b8_64] = *(uint_64t*)[mem_b7_64]
                                                [mem_b9_64] = *(uint_64t*)([mem_b8_64] +.8 0x30{48})
                                                [funcVar_25_32] = fun_50000000(([mem_b7_64] &.0 0xffffffff{-1}), (([reg_rip:8] +.8 0x340ef0{3411696}) &.0 0xffffffff{-1}), (([reg_rip:8] +.8 0x42a48a{4367498}) &.0 0xffffffff{-1}), ([funcVar_23_32] &.0 0xffffffff{-1}))
                                                [mem_ba_64] = *(uint_64t*)[mem_ae_64]
                                                [mem_bb_64] = *(uint_64t*)[mem_ba_64]
                                                [funcVar_26_32] = fun_50000000(([mem_ae_64] &.0 0xffffffff{-1}), 0x1{1}, (([reg_rip:8] +.8 0x42a48a{4367498}) &.0 0xffffffff{-1}), ([funcVar_23_32] &.0 0xffffffff{-1}))
                                                [mem_bc_64] = *(uint_64t*)([reg_rcx:8] +.8 0x28{40})
                                                <Symbol assignments>:
                                                - [var_36_32] = 0x1{1}
                                                if(!(!((([var_35_64] +.8 ([mem_bc_64] *.8 0xffffffffffffffff{-1})) == 0x0{0})))) {
                                                        //block e2 (level: 9, maxHeight: 0, backOrderId: 13, linearLevel: 9, refCount: 1)
                                                        0xe2 mov rax, [rsi+0x10]
                                                        0xe6 mov [rbp+0x28], rax
                                                        ------------
                                                        [mem_bd_64] = *(uint_64t*)([var_35_64] +.8 0x10{16})
                                                        *(uint_64t*)([reg_rcx:8] +.8 0x28{40}) = [mem_bd_64]
                                                        //goto to block ea (backOrderId: 12; minLinLevel: 9, maxLinLevel: 10) [None]
                                                } else {
                                                        //goto to block ea (backOrderId: 12; minLinLevel: 10, maxLinLevel: 10) [None]
                                                }
                                                //block ea (level: 10, maxHeight: 0, backOrderId: 12, linearLevel: 10, refCount: 2)
                                                0xea cmp rsi, [rbp+0x30]
                                                0xee jnz 0x00000233CF00E6E8
                                                ------------
                                                [mem_be_64] = *(uint_64t*)([reg_rcx:8] +.8 0x30{48})
                                                if(!(!((([var_35_64] +.8 ([mem_be_64] *.8 0xffffffffffffffff{-1})) == 0x0{0})))) {
                                                        //block f0 (level: 11, maxHeight: 0, backOrderId: 12, linearLevel: 11, refCount: 1)
                                                        0xf0 mov rdx, [rsi+0x18]
                                                        0xf4 mov [rbp+0x30], rdx
                                                        ------------
                                                        [mem_bf_64] = *(uint_64t*)([var_35_64] +.8 0x18{24})
                                                        *(uint_64t*)([reg_rcx:8] +.8 0x30{48}) = [mem_bf_64]
                                                        <Symbol assignments>:
                                                        - [var_36_32] = ([mem_bf_64] &.0 0xffffffff{-1})
                                                        //goto to block f8 (backOrderId: 11; minLinLevel: 11, maxLinLevel: 12) [None]
                                                } else {
                                                        //goto to block f8 (backOrderId: 11; minLinLevel: 12, maxLinLevel: 12) [None]
                                                }
                                                //block f8 (level: 12, maxHeight: 0, backOrderId: 11, linearLevel: 12, refCount: 2)
                                                0xf8 mov rcx, rsi
                                                0xfb call 0x00000233CF010150
                                                0x100 mov r8, [rsi]
                                                0x103 mov edx, 0x01
                                                0x108 mov rcx, rsi
                                                0x10b call [r8]
                                                ------------
                                                [funcVar_27_32] = fun_50007008(([var_35_64] &.0 0xffffffff{-1}), [var_36_32], (([reg_rip:8] +.8 0x42a48a{4367498}) &.0 0xffffffff{-1}), ([funcVar_23_32] &.0 0xffffffff{-1}))
                                                [mem_c0_64] = *(uint_64t*)[var_35_64]
                                                [mem_c1_64] = *(uint_64t*)[mem_c0_64]
                                                [funcVar_28_32] = fun_50000000(([var_35_64] &.0 0xffffffff{-1}), 0x1{1}, ([mem_c0_64] &.0 0xffffffff{-1}), ([funcVar_23_32] &.0 0xffffffff{-1}))
                                                <Symbol assignments>:
                                                - [var_38_32] = (([funcVar_28_32] &.0 0xffffff00{-256}) |.0 ([var_38_32] &.0 0xff{255}))
                                                //goto to block 10e (backOrderId: 9; minLinLevel: 8, maxLinLevel: 13) [!!!Normal!!!]
                                        } else {
                                                //goto to block 79 (backOrderId: 9; minLinLevel: 13, maxLinLevel: 13) [None]
                                        }
                                        //goto is null (backOrderId: 9; minLinLevel: 7, maxLinLevel: 13)
                                } else {
                                        //goto to block 79 (backOrderId: 9; minLinLevel: 13, maxLinLevel: 13) [None]
                                }
                                //block 79 (level: 8, maxHeight: 0, backOrderId: 9, linearLevel: 13, refCount: 2)
                                0x79 mov rsi, rbx
                                0x7c test rbx, rbx
                                0x7f jmp 0x00000233CF00E646
                                ------------
                                <Symbol assignments>:
                                - [var_35_64] = [mem_af_64]
                                - [var_33_8] = (([mem_af_64] &.8 [mem_af_64]) == 0x0{0})
                                //goto to block 56 (backOrderId: 7; minLinLevel: 6, maxLinLevel: 14) [None]
                        }
                        //block 12b (level: 6, maxHeight: 0, backOrderId: 7, linearLevel: 14, refCount: 1)
                        0x12b mov rcx, [0x00000233D073A5E4]
                        0x132 test rcx, rcx
                        0x135 jz 0x00000233CF00E72F
                        ------------
                        [mem_c8_64] = *(uint_64t*)([reg_rip:8] +.8 0x172bec2{24297154})
                        if(!((([mem_c8_64] &.8 [mem_c8_64]) == 0x0{0}))) {
                                //block 137 (level: 7, maxHeight: 0, backOrderId: 7, linearLevel: 15, refCount: 1)
                                0x137 mov rax, [rcx]
                                0x13a mov dl, 0x01
                                0x13c call [rax+0x18]
                                ------------
                                [mem_c9_64] = *(uint_64t*)[mem_c8_64]
                                [mem_ca_64] = *(uint_64t*)([mem_c9_64] +.8 0x18{24})
                                [funcVar_29_32] = fun_50000000(([mem_c8_64] &.0 0xffffffff{-1}), 0x1{1}, (([mem_aa_32] <<.4 (0x2{2} &.8 0x3f{63})) >>.4 (0x2{2} &.8 0x3f{63})), [reg_r9:Da])
                                <Symbol assignments>:
                                - [var_38_32] = (([funcVar_29_32] &.0 0xffffff00{-256}) |.0 ([var_38_32] &.0 0xff{255}))
                                - [var_34_8] = 0x1{1}
                                //goto to block 13f (backOrderId: 6; minLinLevel: 15, maxLinLevel: 16) [None]
                        } else {
                                //goto to block 13f (backOrderId: 6; minLinLevel: 16, maxLinLevel: 16) [None]
                        }
                        //block 13f (level: 8, maxHeight: 0, backOrderId: 6, linearLevel: 16, refCount: 2)
                        0x13f xor ecx, ecx
                        0x141 call 0x00000233CEC7B860
                        0x146 jmp 0x00000233CF00E638
                        ------------
                        [funcVar_30_32] = fun_46252784((([mem_c8_64] &.0 0xffffffff{-1}) ^.4 ([mem_c8_64] &.0 0xffffffff{-1})), [var_34_8], (([mem_aa_32] <<.4 (0x2{2} &.8 0x3f{63})) >>.4 (0x2{2} &.8 0x3f{63})), [reg_r9:Da])
                        <Symbol assignments>:
                        - [var_38_32] = (([funcVar_30_32] &.0 0xff{255}) |.0 ([var_38_32] &.0 0xffffff00{-256}))
                        //goto to block 48 (backOrderId: 5; minLinLevel: 4, maxLinLevel: 17) [None]
                }
                //goto is null (backOrderId: 5; minLinLevel: 3, maxLinLevel: 17)
        } else {
                //goto to block 48 (backOrderId: 5; minLinLevel: 17, maxLinLevel: 17) [None]
        }
        //block 48 (level: 9, maxHeight: 0, backOrderId: 5, linearLevel: 17, refCount: 3)
        0x48 xor al, al
        0x4a jmp 0x00000233CF00E700
        ------------
        <Symbol assignments>:
        - [var_38_32] = (([var_38_32] &.0 0xffffff00{-256}) |.0 ([var_38_32] ^.1 [var_38_32]))
        //goto to block 110 (backOrderId: 3; minLinLevel: 2, maxLinLevel: 18) [!!!Normal!!!]
} else {
        //goto to block 10e (backOrderId: 3; minLinLevel: 18, maxLinLevel: 18) [None]
}
//block 10e (level: 13, maxHeight: 0, backOrderId: 3, linearLevel: 18, refCount: 2)
0x10e mov al, 0x01
------------
<Symbol assignments>:
- [var_38_32] = (([var_38_32] &.0 0xffffff00{-256}) |.0 0x1{1})
//block 110 (level: 14, maxHeight: 0, backOrderId: 2, linearLevel: 19, refCount: 2)
0x110 mov rbx, [rsp+0x40]
0x115 mov rbp, [rsp+0x48]
0x11a mov rsi, [rsp+0x50]
0x11f mov rdi, [rsp+0x58]
0x124 add rsp, 0x30
0x128 pop r14
0x12a ret
------------
[mem_c2_64] = *(uint_64t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x30{48} *.8 0xffffffffffffffff{-1})) +.8 0x40{64})
[mem_c3_64] = *(uint_64t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x30{48} *.8 0xffffffffffffffff{-1})) +.8 0x48{72})
[mem_c4_64] = *(uint_64t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x30{48} *.8 0xffffffffffffffff{-1})) +.8 0x50{80})
[mem_c5_64] = *(uint_64t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x30{48} *.8 0xffffffffffffffff{-1})) +.8 0x58{88})
[mem_c6_64] = *(uint_64t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x30{48} *.8 0xffffffffffffffff{-1})) +.8 0x30{48})
[mem_c7_64] = *(uint_64t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x30{48} *.8 0xffffffffffffffff{-1})) +.8 0x30{48}) +.8 0x8{8})
return [var_38_32]
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 20)



********************* AFTER OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 49, backOrderId: 4, linearLevel: 1, refCount: 0)
0x0 mov rax, rsp
0x3 mov [rax+0x08], rbx
0x7 mov [rax+0x10], rbp
0xb mov [rax+0x18], rsi
0xf mov [rax+0x20], rdi
0x13 push r14
0x15 sub rsp, 0x30
0x19 mov rax, [0x00000233D073A59C]
0x20 mov rbp, rcx
0x23 mov r8d, [rax+0x20]
0x27 mov eax, [rax+0x10]
0x2a shl r8d, 0x02
0x2e sar r8d, 0x02
0x32 sub eax, r8d
0x35 jnz 0x00000233CF00E6FE
------------
[mem_a9_64] = *(uint_64t*)([reg_rip:8] +.8 0x172bf8c{24297356})
[mem_aa_32] = *(uint_32t*)([mem_a9_64] +.8 0x20{32})
[mem_ab_32] = *(uint_32t*)([mem_a9_64] +.8 0x10{16})
[var_38_32] = (((((([mem_aa_32] *.4 0x4{4}) >>.4 0x2{2}) *.4 0xffffffff{-1}) +.4 [mem_ab_32]) &.1 0xff{255}) |.4 ([var_38_32] &.3 0xffffff00{-256}))
if(([mem_ab_32] == ((([mem_aa_32] *.4 0x4{4}) >>.4 0x2{2}) *.4 0x1{1}))) {
        //block 3b (level: 2, maxHeight: 45, backOrderId: 6, linearLevel: 2, refCount: 1)
        0x3b test dl, dl
        0x3d jz 0x00000233CF00E638
        ------------
        [var_34_8] = [reg_rdx:1]
        if(([reg_rdx:1] != 0x0{0})) {
                //block 3f (level: 3, maxHeight: 44, backOrderId: 6, linearLevel: 3, refCount: 1)
                0x3f test byte ptr [rcx+0x3DFC0], 0x04
                0x46 jz 0x00000233CF00E63F
                ------------
                [mem_ac_8] = *(uint_8t*)([reg_rcx:8] +.8 0x3dfc0{253888})
                if((([mem_ac_8] &.1 0x4{4}) != 0x0{0})) {
                        //goto to block 48 (backOrderId: 5; minLinLevel: 4, maxLinLevel: 4) [None]
                } else {
                        //block 4f (level: 4, maxHeight: 43, backOrderId: 9, linearLevel: 4, refCount: 1)
                        0x4f mov rsi, [rcx+0x28]
                        0x53 test rsi, rsi
                        ------------
                        [mem_ad_64] = *(uint_64t*)([reg_rcx:8] +.8 0x28{40})
                        [var_35_64] = [mem_ad_64]
                        [var_33_8] = ([mem_ad_64] == 0x0{0})
                        //block 56 (level: 5, maxHeight: 40, backOrderId: 8, linearLevel: 5, refCount: 2)
                        0x56 jz 0x00000233CF00E71B
                        ------------
                        while(([var_33_8] == 0x0{0})) {
                                //block 5c (level: 6, maxHeight: 40, backOrderId: 10, linearLevel: 6, refCount: 1)
                                0x5c mov r14, [rsi+0x08]
                                0x60 mov rbx, [rsi+0x10]
                                0x64 test r14, r14
                                0x67 jz 0x00000233CF00E669
                                ------------
                                [mem_ae_64] = *(uint_64t*)([var_35_64] +.8 0x8{8})
                                [mem_af_64] = *(uint_64t*)([var_35_64] +.8 0x10{16})
                                if(([mem_ae_64] != 0x0{0})) {
                                        //block 69 (level: 7, maxHeight: 38, backOrderId: 10, linearLevel: 7, refCount: 1)
                                        0x69 mov rax, [r14]
                                        0x6c mov rcx, r14
                                        0x6f call [rax+0x90]
                                        0x75 test al, al
                                        0x77 jz 0x00000233CF00E671
                                        ------------
                                        [mem_b0_64] = *(uint_64t*)[mem_ae_64]
                                        [mem_b1_64] = *(uint_64t*)([mem_b0_64] +.8 0x90{144})
                                        [funcVar_22_32] = fun_50000000(([mem_ae_64] &.4 0xffffffff{-1}), [reg_rdx:1], (([mem_aa_32] *.4 0x4{4}) >>.4 0x2{2}), [reg_r9:Da])
                                        if((([funcVar_22_32] &.1 0xff{255}) == 0x0{0})) {
                                                //block 81 (level: 8, maxHeight: 35, backOrderId: 13, linearLevel: 8, refCount: 1)
                                                0x81 mov rax, [r14+0x10]
                                                0x85 mov rdi, [rbp+0x3DFA8]
                                                0x8c mov rcx, r14
                                                0x8f mov ebx, [rax]
                                                0x91 mov rax, [r14]
                                                0x94 call [rax+0x08]
                                                0x97 lea r8, [0x00000233CF2C0000]
                                                0x9e lea rdx, [0x00000233CF3ED72C]
                                                0xa5 mov rcx, rdi
                                                0xa8 mov r9, rax
                                                0xab mov [rsp+0x20], ebx
                                                0xaf call 0x00000233CE471CD8
                                                0xb4 mov rcx, [rbp+0x3DFA8]
                                                0xbb lea r8, [0x00000233CF438B3C]
                                                0xc2 mov rax, [rcx]
                                                0xc5 lea rdx, [0x00000233CF34F5AC]
                                                0xcc call [rax+0x30]
                                                0xcf mov rax, [r14]
                                                0xd2 mov edx, 0x01
                                                0xd7 mov rcx, r14
                                                0xda call [rax]
                                                0xdc cmp rsi, [rbp+0x28]
                                                0xe0 jnz 0x00000233CF00E6DA
                                                ------------
                                                [mem_b2_64] = *(uint_64t*)([mem_ae_64] +.8 0x10{16})
                                                [mem_b3_64] = *(uint_64t*)([reg_rcx:8] +.8 0x3dfa8{253864})
                                                [mem_b4_32] = *(uint_32t*)[mem_b2_64]
                                                [mem_b5_64] = *(uint_64t*)[mem_ae_64]
                                                [mem_b6_64] = *(uint_64t*)([mem_b5_64] +.8 0x8{8})
                                                [funcVar_23_32] = fun_50000000(([mem_ae_64] &.4 0xffffffff{-1}), [reg_rdx:1], (([mem_aa_32] *.4 0x4{4}) >>.4 0x2{2}), [reg_r9:Da])
                                                *(uint_32t*)([reg_rsp:8] +.8 0xffffffffffffffe8{-24}) = [mem_b4_32]
                                                [funcVar_24_32] = fun_37824360(([mem_b3_64] &.4 0xffffffff{-1}), (([reg_rip:8] +.8 0x3df097{4059287}) &.4 0xffffffff{-1}), (([reg_rip:8] +.8 0x2b1972{2824562}) &.4 0xffffffff{-1}), [funcVar_23_32])
                                                [mem_b7_64] = *(uint_64t*)([reg_rcx:8] +.8 0x3dfa8{253864})
                                                [mem_b8_64] = *(uint_64t*)[mem_b7_64]
                                                [mem_b9_64] = *(uint_64t*)([mem_b8_64] +.8 0x30{48})
                                                [funcVar_25_32] = fun_50000000(([mem_b7_64] &.4 0xffffffff{-1}), (([reg_rip:8] +.8 0x340ef0{3411696}) &.4 0xffffffff{-1}), (([reg_rip:8] +.8 0x42a48a{4367498}) &.4 0xffffffff{-1}), [funcVar_23_32])
                                                [mem_ba_64] = *(uint_64t*)[mem_ae_64]
                                                [mem_bb_64] = *(uint_64t*)[mem_ba_64]
                                                [funcVar_26_32] = fun_50000000(([mem_ae_64] &.4 0xffffffff{-1}), 0x1{1}, (([reg_rip:8] +.8 0x42a48a{4367498}) &.4 0xffffffff{-1}), [funcVar_23_32])
                                                [mem_bc_64] = *(uint_64t*)([reg_rcx:8] +.8 0x28{40})
                                                [var_36_32] = 0x1{1}
                                                if(([var_35_64] == ([mem_bc_64] *.8 0x1{1}))) {
                                                        //block e2 (level: 9, maxHeight: 18, backOrderId: 13, linearLevel: 9, refCount: 1)
                                                        0xe2 mov rax, [rsi+0x10]
                                                        0xe6 mov [rbp+0x28], rax
                                                        ------------
                                                        [mem_bd_64] = *(uint_64t*)([var_35_64] +.8 0x10{16})
                                                        *(uint_64t*)([reg_rcx:8] +.8 0x28{40}) = [mem_bd_64]
                                                        //goto to block ea (backOrderId: 12; minLinLevel: 9, maxLinLevel: 10) [None]
                                                } else {
                                                        //goto to block ea (backOrderId: 12; minLinLevel: 10, maxLinLevel: 10) [None]
                                                }
                                                //block ea (level: 10, maxHeight: 16, backOrderId: 12, linearLevel: 10, refCount: 2)
                                                0xea cmp rsi, [rbp+0x30]
                                                0xee jnz 0x00000233CF00E6E8
                                                ------------
                                                [mem_be_64] = *(uint_64t*)([reg_rcx:8] +.8 0x30{48})
                                                if(([var_35_64] == ([mem_be_64] *.8 0x1{1}))) {
                                                        //block f0 (level: 11, maxHeight: 15, backOrderId: 12, linearLevel: 11, refCount: 1)
                                                        0xf0 mov rdx, [rsi+0x18]
                                                        0xf4 mov [rbp+0x30], rdx
                                                        ------------
                                                        [mem_bf_64] = *(uint_64t*)([var_35_64] +.8 0x18{24})
                                                        *(uint_64t*)([reg_rcx:8] +.8 0x30{48}) = [mem_bf_64]
                                                        [var_36_32] = ([mem_bf_64] &.4 0xffffffff{-1})
                                                        //goto to block f8 (backOrderId: 11; minLinLevel: 11, maxLinLevel: 12) [None]
                                                } else {
                                                        //goto to block f8 (backOrderId: 11; minLinLevel: 12, maxLinLevel: 12) [None]
                                                }
                                                //block f8 (level: 12, maxHeight: 12, backOrderId: 11, linearLevel: 12, refCount: 2)
                                                0xf8 mov rcx, rsi
                                                0xfb call 0x00000233CF010150
                                                0x100 mov r8, [rsi]
                                                0x103 mov edx, 0x01
                                                0x108 mov rcx, rsi
                                                0x10b call [r8]
                                                ------------
                                                [funcVar_27_32] = fun_50007008(([var_35_64] &.4 0xffffffff{-1}), [var_36_32], (([reg_rip:8] +.8 0x42a48a{4367498}) &.4 0xffffffff{-1}), [funcVar_23_32])
                                                [mem_c0_64] = *(uint_64t*)[var_35_64]
                                                [mem_c1_64] = *(uint_64t*)[mem_c0_64]
                                                [funcVar_28_32] = fun_50000000(([var_35_64] &.4 0xffffffff{-1}), 0x1{1}, ([mem_c0_64] &.4 0xffffffff{-1}), [funcVar_23_32])
                                                [var_38_32] = (([funcVar_28_32] &.3 0xffffff00{-256}) |.4 ([var_38_32] &.1 0xff{255}))
                                                //goto to block 10e (backOrderId: 9; minLinLevel: 8, maxLinLevel: 13) [!!!Normal!!!]
                                        } else {
                                                //goto to block 79 (backOrderId: 9; minLinLevel: 13, maxLinLevel: 13) [None]
                                        }
                                        //goto is null (backOrderId: 9; minLinLevel: 7, maxLinLevel: 13)
                                } else {
                                        //goto to block 79 (backOrderId: 9; minLinLevel: 13, maxLinLevel: 13) [None]
                                }
                                //block 79 (level: 8, maxHeight: 2, backOrderId: 9, linearLevel: 13, refCount: 2)
                                0x79 mov rsi, rbx
                                0x7c test rbx, rbx
                                0x7f jmp 0x00000233CF00E646
                                ------------
                                [var_35_64] = [mem_af_64]
                                [var_33_8] = ([mem_af_64] == 0x0{0})
                                //goto to block 56 (backOrderId: 7; minLinLevel: 6, maxLinLevel: 14) [None]
                        }
                        //block 12b (level: 6, maxHeight: 15, backOrderId: 7, linearLevel: 14, refCount: 1)
                        0x12b mov rcx, [0x00000233D073A5E4]
                        0x132 test rcx, rcx
                        0x135 jz 0x00000233CF00E72F
                        ------------
                        [mem_c8_64] = *(uint_64t*)([reg_rip:8] +.8 0x172bec2{24297154})
                        if(([mem_c8_64] != 0x0{0})) {
                                //block 137 (level: 7, maxHeight: 14, backOrderId: 7, linearLevel: 15, refCount: 1)
                                0x137 mov rax, [rcx]
                                0x13a mov dl, 0x01
                                0x13c call [rax+0x18]
                                ------------
                                [mem_c9_64] = *(uint_64t*)[mem_c8_64]
                                [mem_ca_64] = *(uint_64t*)([mem_c9_64] +.8 0x18{24})
                                [funcVar_29_32] = fun_50000000(([mem_c8_64] &.4 0xffffffff{-1}), 0x1{1}, (([mem_aa_32] *.4 0x4{4}) >>.4 0x2{2}), [reg_r9:Da])
                                [var_38_32] = (([funcVar_29_32] &.3 0xffffff00{-256}) |.4 ([var_38_32] &.1 0xff{255}))
                                [var_34_8] = 0x1{1}
                                //goto to block 13f (backOrderId: 6; minLinLevel: 15, maxLinLevel: 16) [None]
                        } else {
                                //goto to block 13f (backOrderId: 6; minLinLevel: 16, maxLinLevel: 16) [None]
                        }
                        //block 13f (level: 8, maxHeight: 9, backOrderId: 6, linearLevel: 16, refCount: 2)
                        0x13f xor ecx, ecx
                        0x141 call 0x00000233CEC7B860
                        0x146 jmp 0x00000233CF00E638
                        ------------
                        [funcVar_30_32] = fun_46252784(0x0{0}, [var_34_8], (([mem_aa_32] *.4 0x4{4}) >>.4 0x2{2}), [reg_r9:Da])
                        [var_38_32] = (([funcVar_30_32] &.1 0xff{255}) |.4 ([var_38_32] &.3 0xffffff00{-256}))
                        //goto to block 48 (backOrderId: 5; minLinLevel: 4, maxLinLevel: 17) [None]
                }
                //goto is null (backOrderId: 5; minLinLevel: 3, maxLinLevel: 17)
        } else {
                //goto to block 48 (backOrderId: 5; minLinLevel: 17, maxLinLevel: 17) [None]
        }
        //block 48 (level: 9, maxHeight: 7, backOrderId: 5, linearLevel: 17, refCount: 3)
        0x48 xor al, al
        0x4a jmp 0x00000233CF00E700
        ------------
        [var_38_32] = ([var_38_32] &.3 0xffffff00{-256})
        //goto to block 110 (backOrderId: 3; minLinLevel: 2, maxLinLevel: 18) [!!!Normal!!!]
} else {
        //goto to block 10e (backOrderId: 3; minLinLevel: 18, maxLinLevel: 18) [None]
}
//block 10e (level: 13, maxHeight: 7, backOrderId: 3, linearLevel: 18, refCount: 2)
0x10e mov al, 0x01
------------
[var_38_32] = 0x1{1}
//block 110 (level: 14, maxHeight: 6, backOrderId: 2, linearLevel: 19, refCount: 2)
0x110 mov rbx, [rsp+0x40]
0x115 mov rbp, [rsp+0x48]
0x11a mov rsi, [rsp+0x50]
0x11f mov rdi, [rsp+0x58]
0x124 add rsp, 0x30
0x128 pop r14
0x12a ret
------------
[mem_c2_64] = *(uint_64t*)([reg_rsp:8] +.8 0x8{8})
[mem_c3_64] = *(uint_64t*)([reg_rsp:8] +.8 0x10{16})
[mem_c4_64] = *(uint_64t*)([reg_rsp:8] +.8 0x18{24})
[mem_c5_64] = *(uint_64t*)([reg_rsp:8] +.8 0x20{32})
[mem_c6_64] = *(uint_64t*)([reg_rsp:8] +.8 0xfffffffffffffff8{-8})
[mem_c7_64] = *(uint_64t*)[reg_rsp:8]
return [var_38_32]
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 20)





SAMPLE 1003 <----                                                                                                      ЫП ­
sub rsp, 0x20
mov r9, rdx
mov rbx, rcx
mov r8, rcx
sub r9, rcx
mov ecx, 0x32
mov r10, rdx
mov al, [r9+r8*1]
mov [r8], al
inc r8
dec rcx
jnz 0x00000233CF009B0A
lea rcx, [rbx+0x32]
mov edx, 0x64
mov al, [rcx+r9*1]
mov [rcx], al
inc rcx
dec rdx
jnz 0x00000233CF009B22
mov al, [r10+0x96]
lea rcx, [rbx+0x9C]
mov [rbx+0x96], al
mov eax, [r10+0x98]
mov [rbx+0x98], eax
movzx r8d, word ptr [r10+0xA0]
mov edx, [r10+0x9C]
movzx r9d, r8b
shr r8d, 0x08
and r8d, 0x7F
call 0x00000233D03D2424
mov rax, rbx
add rsp, 0x20
pop rbx
ret
********************* BEFORE OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 0, backOrderId: 6, linearLevel: 1, refCount: 0)
0x0 push rbx
0x2 sub rsp, 0x20
0x6 mov r9, rdx
0x9 mov rbx, rcx
0xc mov r8, rcx
0xf sub r9, rcx
0x12 mov ecx, 0x32
0x17 mov r10, rdx
------------
*(uint_64t*)([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) = [reg_rbx:8]
<Symbol assignments>:
- [var_3a_64] = 0x32{50}
- [var_39_64] = [reg_rcx:8]
do {
        //goto to block 1a (backOrderId: 5; minLinLevel: 2, maxLinLevel: 2) [None]
        //block 1a (level: 2, maxHeight: 0, backOrderId: 5, linearLevel: 2, refCount: 2)
        0x1a mov al, [r9+r8*1]
        0x1e mov [r8], al
        0x21 inc r8
        0x24 dec rcx
        0x27 jnz 0x00000233CF009B0A
        ------------
        [mem_cb_8] = *(uint_8t*)(([reg_rdx:8] +.8 ([reg_rcx:8] *.8 0xffffffffffffffff{-1})) +.8 [var_39_64])
        *(uint_8t*)[var_39_64] = [mem_cb_8]
        <Symbol assignments>:
        - [var_3a_64] = ([var_3a_64] +.8 (0x1{1} *.8 0xffffffffffffffff{-1}))
        - [var_39_64] = ([var_39_64] +.8 0x1{1})
} while(!((([var_3a_64] +.8 (0x1{1} *.8 0xffffffffffffffff{-1})) == 0x0{0})));
//block 29 (level: 3, maxHeight: 0, backOrderId: 4, linearLevel: 3, refCount: 1)
0x29 lea rcx, [rbx+0x32]
0x2d mov edx, 0x64
------------
<Symbol assignments>:
- [var_3b_64] = ([reg_rcx:8] +.8 0x32{50})
- [var_3c_64] = 0x64{100}
do {
        //goto to block 32 (backOrderId: 3; minLinLevel: 4, maxLinLevel: 4) [None]
        //block 32 (level: 4, maxHeight: 0, backOrderId: 3, linearLevel: 4, refCount: 2)
        0x32 mov al, [rcx+r9*1]
        0x36 mov [rcx], al
        0x38 inc rcx
        0x3b dec rdx
        0x3e jnz 0x00000233CF009B22
        ------------
        [mem_cc_8] = *(uint_8t*)([var_3b_64] +.8 ([reg_rdx:8] +.8 ([reg_rcx:8] *.8 0xffffffffffffffff{-1})))
        *(uint_8t*)[var_3b_64] = [mem_cc_8]
        <Symbol assignments>:
        - [var_3b_64] = ([var_3b_64] +.8 0x1{1})
        - [var_3c_64] = ([var_3c_64] +.8 (0x1{1} *.8 0xffffffffffffffff{-1}))
} while(!((([var_3c_64] +.8 (0x1{1} *.8 0xffffffffffffffff{-1})) == 0x0{0})));
//block 40 (level: 5, maxHeight: 0, backOrderId: 2, linearLevel: 5, refCount: 1)
0x40 mov al, [r10+0x96]
0x47 lea rcx, [rbx+0x9C]
0x4e mov [rbx+0x96], al
0x54 mov eax, [r10+0x98]
0x5b mov [rbx+0x98], eax
0x61 movzx r8d, word ptr [r10+0xA0]
0x69 mov edx, [r10+0x9C]
0x70 movzx r9d, r8b
0x74 shr r8d, 0x08
0x78 and r8d, 0x7F
0x7c call 0x00000233D03D2424
0x81 mov rax, rbx
0x84 add rsp, 0x20
0x88 pop rbx
0x89 ret
------------
[mem_cd_8] = *(uint_8t*)([reg_rdx:8] +.8 0x96{150})
*(uint_8t*)([reg_rcx:8] +.8 0x96{150}) = [mem_cd_8]
[mem_ce_32] = *(uint_32t*)([reg_rdx:8] +.8 0x98{152})
*(uint_32t*)([reg_rcx:8] +.8 0x98{152}) = [mem_ce_32]
[mem_cf_16] = *(uint_16t*)([reg_rdx:8] +.8 0xa0{160})
[mem_d0_32] = *(uint_32t*)([reg_rdx:8] +.8 0x9c{156})
[funcVar_31_32] = fun_70744500((([reg_rcx:8] +.8 0x9c{156}) &.0 0xffffffff{-1}), [mem_d0_32], (([mem_cf_16] >>.4 (0x8{8} &.8 0x3f{63})) &.4 0x7f{127}), ([mem_cf_16] &.0 0xff{255}))
[mem_d1_64] = *(uint_64t*)((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x20{32} *.8 0xffffffffffffffff{-1})) +.8 0x20{32})
[mem_d2_64] = *(uint_64t*)(((([reg_rsp:8] +.8 (0x8{8} *.8 0xffffffffffffffff{-1})) +.8 (0x20{32} *.8 0xffffffffffffffff{-1})) +.8 0x20{32}) +.8 0x8{8})
return ([reg_rcx:8] &.0 0xffffffff{-1})
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 6)



********************* AFTER OPTIMIZATION: *********************

//block 0 (level: 1, maxHeight: 21, backOrderId: 6, linearLevel: 1, refCount: 0)
0x0 push rbx
0x2 sub rsp, 0x20
0x6 mov r9, rdx
0x9 mov rbx, rcx
0xc mov r8, rcx
0xf sub r9, rcx
0x12 mov ecx, 0x32
0x17 mov r10, rdx
------------
[var_3a_64] = 0x32{50}
[var_39_64] = [reg_rcx:8]
do {
        //goto to block 1a (backOrderId: 5; minLinLevel: 2, maxLinLevel: 2) [None]
        //block 1a (level: 2, maxHeight: 19, backOrderId: 5, linearLevel: 2, refCount: 2)
        0x1a mov al, [r9+r8*1]
        0x1e mov [r8], al
        0x21 inc r8
        0x24 dec rcx
        0x27 jnz 0x00000233CF009B0A
        ------------
        [mem_cb_8] = *(uint_8t*)(([reg_rdx:8] +.8 ([reg_rcx:8] *.8 0xffffffffffffffff{-1})) +.8 [var_39_64])
        *(uint_8t*)[var_39_64] = [mem_cb_8]
        [var_3a_64] = ([var_3a_64] +.8 0xffffffffffffffff{-1})
        [var_39_64] = ([var_39_64] +.8 0x1{1})
} while(([var_3a_64] != 0x0{0}));
//block 29 (level: 3, maxHeight: 15, backOrderId: 4, linearLevel: 3, refCount: 1)
0x29 lea rcx, [rbx+0x32]
0x2d mov edx, 0x64
------------
[var_3b_64] = ([reg_rcx:8] +.8 0x32{50})
[var_3c_64] = 0x64{100}
do {
        //goto to block 32 (backOrderId: 3; minLinLevel: 4, maxLinLevel: 4) [None]
        //block 32 (level: 4, maxHeight: 13, backOrderId: 3, linearLevel: 4, refCount: 2)
        0x32 mov al, [rcx+r9*1]
        0x36 mov [rcx], al
        0x38 inc rcx
        0x3b dec rdx
        0x3e jnz 0x00000233CF009B22
        ------------
        [mem_cc_8] = *(uint_8t*)(([reg_rdx:8] +.8 ([reg_rcx:8] *.8 0xffffffffffffffff{-1})) +.8 [var_3b_64])
        *(uint_8t*)[var_3b_64] = [mem_cc_8]
        [var_3b_64] = ([var_3b_64] +.8 0x1{1})
        [var_3c_64] = ([var_3c_64] +.8 0xffffffffffffffff{-1})
} while(([var_3c_64] != 0x0{0}));
//block 40 (level: 5, maxHeight: 9, backOrderId: 2, linearLevel: 5, refCount: 1)
0x40 mov al, [r10+0x96]
0x47 lea rcx, [rbx+0x9C]
0x4e mov [rbx+0x96], al
0x54 mov eax, [r10+0x98]
0x5b mov [rbx+0x98], eax
0x61 movzx r8d, word ptr [r10+0xA0]
0x69 mov edx, [r10+0x9C]
0x70 movzx r9d, r8b
0x74 shr r8d, 0x08
0x78 and r8d, 0x7F
0x7c call 0x00000233D03D2424
0x81 mov rax, rbx
0x84 add rsp, 0x20
0x88 pop rbx
0x89 ret
------------
[mem_cd_8] = *(uint_8t*)([reg_rdx:8] +.8 0x96{150})
*(uint_8t*)([reg_rcx:8] +.8 0x96{150}) = [mem_cd_8]
[mem_ce_32] = *(uint_32t*)([reg_rdx:8] +.8 0x98{152})
*(uint_32t*)([reg_rcx:8] +.8 0x98{152}) = [mem_ce_32]
[mem_cf_16] = *(uint_16t*)([reg_rdx:8] +.8 0xa0{160})
[mem_d0_32] = *(uint_32t*)([reg_rdx:8] +.8 0x9c{156})
[funcVar_31_32] = fun_70744500((([reg_rcx:8] +.8 0x9c{156}) &.4 0xffffffff{-1}), [mem_d0_32], (([mem_cf_16] >>.4 0x8{8}) &.4 0x7f{127}), ([mem_cf_16] &.1 0xff{255}))
[mem_d1_64] = *(uint_64t*)([reg_rsp:8] +.8 0xfffffffffffffff8{-8})
[mem_d2_64] = *(uint_64t*)[reg_rsp:8]
return ([reg_rcx:8] &.4 0xffffffff{-1})
//goto is null (backOrderId: 0; minLinLevel: 1, maxLinLevel: 6)